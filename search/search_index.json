{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DIY Arcade Cabinet Project","text":""},{"location":"#welcome-future-game-developers","title":"Welcome Future Game Developers! \ud83c\udfae","text":"<p>Are you ready to build your own arcade cabinet with modern technology? This project will teach you how to create an arcade system that can:</p> <ul> <li>Accept real payments through a phone \ud83d\udcf1</li> <li>Control when games start and stop \ud83c\udfb2</li> <li>Run in the cloud \u2601\ufe0f</li> <li>Handle game credits automatically \ud83c\udfaf</li> </ul> <p></p>"},{"location":"#perfect-for-stem-students","title":"Perfect for STEM Students","text":"<p>Whether you're just starting to code or already know some programming, this project is designed for high school STEM students (ages 14-18) who want to:</p> <ul> <li>Learn real-world programming \ud83d\udcbb</li> <li>Understand cloud computing \u2601\ufe0f</li> <li>Work with payment systems \ud83d\udcb3</li> <li>Build something awesome! \ud83d\ude80</li> </ul>"},{"location":"#choose-your-path","title":"Choose Your Path","text":"<p>We offer two ways to build this project:</p> Quick Start Path \ud83d\ude80Custom Build Path \ud83d\udee0\ufe0f <ul> <li>Get up and running fast</li> <li>Use pre-built components</li> <li>Perfect for beginners</li> <li>Focus on understanding the system</li> </ul> <ul> <li>Build everything yourself</li> <li>Modify the code</li> <li>Deeper learning experience</li> <li>More flexibility and control</li> </ul>"},{"location":"#ready-to-begin","title":"Ready to Begin?","text":"<p>Choose where you'd like to start:</p> <p>Project Overview What You'll Need</p> <p>New to Programming?</p> <p>Don't worry if you're new to this! We'll explain everything step by step, and there's a Glossary for any terms you don't know.</p>"},{"location":"#need-help","title":"Need Help?","text":"<ul> <li>Check out our Troubleshooting Guide</li> <li>Visit the Getting Help section</li> </ul> <p>Important Note</p> <p>This project is designed for educational purposes. Always follow local regulations and get proper permissions when handling payments and operating arcade machines.</p>"},{"location":"accounts/emqx-setup/","title":"Setting Up Your EMQX Account","text":"<p>Welcome to your first setup step! Before we configure AWS or Stripe, we'll set up EMQX - the messaging system that will help your arcade cabinet communicate. Think of it like a super-fast mail service for your arcade! </p>"},{"location":"accounts/emqx-setup/#what-is-emqx","title":"What is EMQX?","text":"<p>EMQX is a messaging system that will:</p> <ul> <li>Send messages when someone pays</li> <li>Tell games when to start</li> <li>Signal when games are over</li> <li>Handle all communication securely</li> </ul> <p>Why Start with EMQX?</p> <p>We're setting up EMQX first because:</p> <ul> <li>It's the quickest to set up</li> <li>We'll need it to test other components</li> <li>It helps you understand how the parts connect</li> <li>The free tier is perfect for learning</li> </ul>"},{"location":"accounts/emqx-setup/#before-you-start","title":"Before You Start","text":"<p>You'll need:</p> <ul> <li>An email address</li> <li>About 10-15 minutes</li> <li>A way to save important information</li> </ul> <p>Keep Notes</p> <p>Create a document to save these important details:</p> <ul> <li>Broker URL</li> <li>Port numbers</li> <li>Username</li> <li>Password</li> </ul>"},{"location":"accounts/emqx-setup/#setting-up-your-account","title":"Setting Up Your Account","text":""},{"location":"accounts/emqx-setup/#1-create-your-account","title":"1. Create Your Account","text":"<ol> <li>Visit https://accounts.emqx.com/signup</li> <li>Enter your email address</li> <li>Create a strong password</li> <li>Verify your email</li> </ol>"},{"location":"accounts/emqx-setup/#2-create-a-deployment","title":"2. Create a Deployment","text":"<ol> <li>Log into EMQX Cloud Console</li> <li>Click \"Create Deployment\"</li> <li>Choose \"Serverless\" (Free tier)</li> <li>Pick a name (like \"ArcadeMessenger\")</li> </ol> <p>Free Tier Perfect for Learning</p> <p>You get plenty for your arcade system:</p> <ul> <li>1 million messages per month</li> <li>1 GB traffic per month</li> <li>Multiple cabinet support</li> <li>No credit card required!</li> </ul>"},{"location":"accounts/emqx-setup/#essential-configuration","title":"Essential Configuration","text":""},{"location":"accounts/emqx-setup/#1-get-your-connection-details","title":"1. Get Your Connection Details","text":"<p>After deployment is ready:</p> <ol> <li>Save your Broker URL</li> <li> <p>Note these Port Numbers:</p> </li> <li> <p>8883 - For secure MQTT (we'll use this one)</p> </li> <li>1883 - For standard MQTT</li> <li>8083 - For WebSocket</li> </ol>"},{"location":"accounts/emqx-setup/#2-set-up-authentication","title":"2. Set Up Authentication","text":"<ol> <li>Go to \"Authentication\" in sidebar</li> <li>Click \"Create\"</li> <li> <p>Create and save:</p> </li> <li> <p>Username (like \"arcade-user\")</p> </li> <li>Strong password</li> </ol> <p>Keep These Safe!</p> <p>Save your credentials securely - you'll need them for AWS setup next!</p>"},{"location":"accounts/emqx-setup/#quick-test","title":"Quick Test","text":"<p>Let's make sure everything works! We'll use the Mosquitto CLI tool:</p> WindowsMacLinux <pre><code># Install from: https://mosquitto.org/download/\n\n# Test subscribing to arcade topics\nmosquitto_sub -h your-broker.emqx.cloud -p 8883 ^\n  -t \"arcade/machine/+/coinpulse\" ^\n  --cafile emqx.crt ^\n  -u \"your-username\" -P \"your-password\"\n</code></pre> <pre><code># Install Mosquitto\nbrew install mosquitto\n\n# Test subscribing to arcade topics\nmosquitto_sub -h your-broker.emqx.cloud -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  --cafile emqx.crt \\\n  -u \"your-username\" -P \"your-password\"\n</code></pre> <pre><code># Install Mosquitto\nsudo apt-get install mosquitto-clients\n\n# Test subscribing to arcade topics\nmosquitto_sub -h your-broker.emqx.cloud -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  --cafile emqx.crt \\\n  -u \"your-username\" -P \"your-password\"\n</code></pre> <p>Don't worry if this test doesn't work yet!</p> <p>We still need to set up security certificates. We'll do that during AWS setup.</p>"},{"location":"accounts/emqx-setup/#understanding-the-free-tier","title":"Understanding the Free Tier","text":"<p>Your free account includes:</p> <ul> <li>1 million session minutes/month</li> <li>1 GB traffic/month</li> <li>Messages up to 1 MB each</li> <li>1000 message queue length</li> <li>2-hour inactive session timeout</li> </ul> <p>Perfect for Learning</p> <p>These limits are way more than enough for:</p> <ul> <li>Learning the system</li> <li>Testing your cabinet</li> <li>Initial deployment</li> </ul>"},{"location":"accounts/emqx-setup/#what-youve-accomplished","title":"What You've Accomplished","text":"<p>You've now got:</p> <ol> <li>\u2705 An EMQX Cloud account</li> <li>\u2705 A serverless deployment</li> <li>\u2705 Your broker URL and ports</li> <li>\u2705 Authentication credentials</li> </ol>"},{"location":"accounts/emqx-setup/#next-steps","title":"Next Steps","text":"<p>Now that your messaging system is ready:</p> <ol> <li>Keep your credentials handy</li> <li>Double-check your broker URL</li> <li>Get ready to set up AWS!</li> </ol> <p>Continue to AWS Setup \u2192</p>"},{"location":"accounts/emqx-setup/#quick-troubleshooting","title":"Quick Troubleshooting","text":"<p>Having issues?</p>"},{"location":"accounts/emqx-setup/#cant-create-account","title":"Can't Create Account","text":"<ul> <li>Check your email for verification</li> <li>Try a different browser</li> <li>Clear browser cache</li> </ul>"},{"location":"accounts/emqx-setup/#deployment-failed","title":"Deployment Failed","text":"<ul> <li>Make sure you selected \"Serverless\"</li> <li>Try a different region</li> <li>Check your email is verified</li> </ul> <p>Need Help?</p> <ul> <li>Ask your teacher or mentor</li> <li>Check our Troubleshooting Guide</li> <li>Visit EMQX Docs</li> </ul>"},{"location":"accounts/github-setup/","title":"Setting Up Your GitHub Account","text":"<p>Welcome to the GitHub setup guide! If you're taking the Custom Build path for your arcade cabinet, GitHub will help you store and manage your code. Even better - you can collaborate with others! :octocat:</p>"},{"location":"accounts/github-setup/#what-is-github","title":"What is GitHub?","text":"<p>GitHub is like Google Docs for code:</p> <ul> <li>Stores your code safely in the cloud</li> <li>Tracks changes you make over time</li> <li>Lets you collaborate with others</li> <li>Makes it easy to share your work</li> <li>Used by real developers worldwide!</li> </ul> <p>Why Use GitHub?</p> <p>GitHub helps you:</p> <ul> <li>Keep your code safe and organized</li> <li>Track all changes to your code</li> <li>Work with others on the same code</li> <li>Share your arcade improvements</li> <li>Build a portfolio of your work</li> </ul>"},{"location":"accounts/github-setup/#before-you-start","title":"Before You Start","text":"<p>You'll need:</p> <ul> <li>An email address</li> <li>About 10-15 minutes</li> <li>A strong password in mind</li> </ul> <p>Student Benefits</p> <p>As a student, you can get the GitHub Student Developer Pack for free! We'll show you how to get this later.</p>"},{"location":"accounts/github-setup/#setting-up-your-account","title":"Setting Up Your Account","text":""},{"location":"accounts/github-setup/#1-create-your-account","title":"1. Create Your Account","text":"<ol> <li>Visit https://github.com/signup</li> <li>Enter your email address</li> <li>Create a password</li> <li>Choose a username</li> <li>Complete the verification puzzle</li> </ol> <p>Choosing a Username</p> <p>Pick a professional username! This might be part of your portfolio later. Good examples: * jsmith-dev * jane-parker-code * john-arcade-2024</p>"},{"location":"accounts/github-setup/#2-verify-your-email","title":"2. Verify Your Email","text":"<ol> <li>Check your email</li> <li>Click the verification link</li> <li>Sign in to GitHub</li> </ol>"},{"location":"accounts/github-setup/#3-set-up-two-factor-authentication-2fa","title":"3. Set Up Two-Factor Authentication (2FA)","text":"<p>This extra security step is important:</p> <ol> <li>Go to Settings \u2192 Password and Authentication</li> <li>Choose \"Enable two-factor authentication\"</li> <li>Select your preferred 2FA method:</li> <li>Authenticator app (recommended)</li> <li>Text messages</li> </ol> <p>Save Your Recovery Codes</p> <p>GitHub will give you recovery codes - save them somewhere safe!</p>"},{"location":"accounts/github-setup/#creating-your-first-repository","title":"Creating Your First Repository","text":""},{"location":"accounts/github-setup/#whats-a-repository","title":"What's a Repository?","text":"<p>Think of a repository (or \"repo\") as a project folder that: * Stores all your code * Tracks all changes * Can be shared with others</p>"},{"location":"accounts/github-setup/#create-a-repository","title":"Create a Repository","text":"<ol> <li>Click the '+' icon in the top right</li> <li>Select \"New repository\"</li> <li>Name it (e.g., \"arcade-project\")</li> <li>Add a description</li> <li>Choose \"Public\" or \"Private\"</li> <li>Initialize with a README</li> </ol> <p>Public vs Private</p> <ul> <li>Public: Everyone can see your code (good for sharing and learning)</li> <li>Private: Only you and people you invite can see it</li> </ul>"},{"location":"accounts/github-setup/#installing-github-desktop","title":"Installing GitHub Desktop","text":"<p>GitHub Desktop makes it easy to work with GitHub:</p> <ol> <li>Download GitHub Desktop:</li> <li>Windows/Mac Download</li> <li>For Linux: Use <code>sudo apt install github-desktop</code></li> <li>Install and open GitHub Desktop</li> <li>Sign in with your GitHub account</li> </ol>"},{"location":"accounts/github-setup/#basic-github-commands","title":"Basic GitHub Commands","text":"<p>When using GitHub, you'll use these basic commands:</p> <pre><code># Download your repository\ngit clone https://github.com/your-username/your-repo\n\n# Save your changes\ngit add .\ngit commit -m \"Describe your changes here\"\n\n# Upload to GitHub\ngit push\n</code></pre> <p>Using GitHub Desktop</p> <p>GitHub Desktop gives you buttons for all these commands - no typing needed!</p>"},{"location":"accounts/github-setup/#getting-the-student-pack","title":"Getting the Student Pack","text":"<p>The GitHub Student Developer Pack gives you free access to developer tools:</p> <ol> <li>Visit education.github.com/pack</li> <li>Click \"Get your pack\"</li> <li>Sign in with your GitHub account</li> <li>Verify your student status</li> <li>Use your school email if possible</li> <li>Or upload proof of student status</li> </ol>"},{"location":"accounts/github-setup/#next-steps","title":"Next Steps","text":"<p>After setting up GitHub:</p> <ol> <li>Create your arcade project repository</li> <li>Set up GitHub Desktop</li> <li>Clone your repository locally</li> <li>Start adding your code!</li> </ol> <p>Continue to AWS Setup \u2192 Back to Prerequisites</p>"},{"location":"accounts/github-setup/#troubleshooting","title":"Troubleshooting","text":"<p>Common setup issues and solutions:</p>"},{"location":"accounts/github-setup/#cant-create-account","title":"Can't Create Account","text":"<ul> <li>Make sure your email isn't already registered</li> <li>Try a different username</li> <li>Check password requirements</li> </ul>"},{"location":"accounts/github-setup/#email-verification-issues","title":"Email Verification Issues","text":"<ul> <li>Check spam folder</li> <li>Request a new verification email</li> <li>Use a different email if needed</li> </ul>"},{"location":"accounts/github-setup/#2fa-problems","title":"2FA Problems","text":"<ul> <li>Ensure correct time on your device</li> <li>Save backup codes</li> <li>Contact GitHub support if needed</li> </ul> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Visit GitHub Support</li> </ul>"},{"location":"accounts/github-setup/#best-practices","title":"Best Practices","text":""},{"location":"accounts/github-setup/#keep-your-account-secure","title":"Keep Your Account Secure","text":"<ul> <li>Use a strong password</li> <li>Enable 2FA</li> <li>Don't share your credentials</li> </ul>"},{"location":"accounts/github-setup/#repository-organization","title":"Repository Organization","text":"<ul> <li>Use clear names</li> <li>Add good descriptions</li> <li>Keep code organized</li> <li>Comment your code</li> </ul>"},{"location":"accounts/github-setup/#collaboration-tips","title":"Collaboration Tips","text":"<ul> <li>Write clear commit messages</li> <li>Review changes before pushing</li> <li>Communicate with collaborators</li> <li>Use issues for tracking tasks</li> </ul> <p>Ready to Code?</p> <p>With GitHub set up, you're ready to start managing your arcade cabinet code like a pro!s</p>"},{"location":"accounts/aws/basic-setup/","title":"Basic AWS Setup","text":"<p>Welcome to AWS (Amazon Web Services)! In this guide, we'll help you create and secure your AWS account. This is your first step toward getting your arcade cabinet connected to the cloud! </p>"},{"location":"accounts/aws/basic-setup/#what-youll-set-up","title":"What You'll Set Up","text":"<p>In this guide, you'll:</p> <ul> <li>Create your AWS account</li> <li>Set up security features</li> <li>Configure basic monitoring</li> <li>Learn about AWS Free Tier</li> </ul> <p>Time &amp; Requirements</p> <p>Time needed: About 15-20 minutes</p> <p>You'll need:</p> <ul> <li>An email address</li> <li>A phone number</li> <li>A credit/debit card (for verification only)</li> <li>A computer with internet access</li> </ul>"},{"location":"accounts/aws/basic-setup/#step-by-step-account-creation","title":"Step-by-Step Account Creation","text":""},{"location":"accounts/aws/basic-setup/#1-sign-up-for-aws","title":"1. Sign Up for AWS","text":"<ol> <li>Visit https://aws.amazon.com</li> <li>Click \"Create an AWS Account\"</li> <li>Enter your email and AWS account name<ul> <li>Account name suggestion: \"MyArcadeProject\" or \"MySTEMProject\"</li> </ul> </li> <li>Choose a strong password</li> </ol> <p>Choosing an Account Name</p> <p>Pick something you'll remember but keep it professional - you might use this account for future projects too!</p>"},{"location":"accounts/aws/basic-setup/#2-fill-in-contact-information","title":"2. Fill in Contact Information","text":"<ol> <li>Select \"Personal Account\" type</li> <li>Enter your contact information</li> <li>Read and accept the AWS Customer Agreement</li> </ol> <p>Why Personal Account?</p> <p>The Personal Account type gives you everything you need for this project and keeps things simple!</p>"},{"location":"accounts/aws/basic-setup/#3-add-payment-information","title":"3. Add Payment Information","text":"<ol> <li>Enter your credit/debit card information<ul> <li>This is for verification only</li> <li>We'll stay within free tier limits!</li> </ul> </li> <li>Complete the verification process</li> </ol> <p>About Billing</p> <p>Don't worry! Our project is designed to stay within AWS's free tier. We'll show you how to set up billing alerts just to be safe.</p>"},{"location":"accounts/aws/basic-setup/#4-verify-your-identity","title":"4. Verify Your Identity","text":"<ol> <li>Enter your phone number</li> <li>Choose verification method (text or call)</li> <li>Enter the verification code when received</li> </ol>"},{"location":"accounts/aws/basic-setup/#5-choose-support-plan","title":"5. Choose Support Plan","text":"<ol> <li>Select \"Basic Support - Free\"</li> <li>Click \"Complete sign up\"</li> </ol>"},{"location":"accounts/aws/basic-setup/#setting-up-security","title":"Setting Up Security","text":""},{"location":"accounts/aws/basic-setup/#enable-multi-factor-authentication-mfa","title":"Enable Multi-Factor Authentication (MFA)","text":"<p>This extra security step is super important!</p> <ol> <li>Sign in to AWS Console</li> <li>Click your account name (top right)</li> <li>Select \"Security credentials\"</li> <li>Click \"Assign MFA device\"</li> <li>Follow the setup wizard</li> </ol> <p>Don't Skip MFA!</p> <p>This keeps your account safe - kind of like having both a lock and an alarm on your front door!</p>"},{"location":"accounts/aws/basic-setup/#create-an-iam-user","title":"Create an IAM User","text":"<p>Instead of using your main account (root account), let's create a safer day-to-day account:</p> <ol> <li>Go to IAM service in AWS Console</li> <li>Click \"Users\" \u2192 \"Add user\"</li> <li>Set up your admin user:<ul> <li>Username: \"arcade-admin\"</li> <li>Select \"Access key - Programmatic access\"</li> <li>Store your access keys safely!</li> </ul> </li> </ol>"},{"location":"accounts/aws/basic-setup/#setting-up-billing-alerts","title":"Setting Up Billing Alerts","text":"<p>Even though we're using the free tier, let's set up alerts:</p> <ol> <li>Go to AWS Billing Dashboard</li> <li>Click \"Budgets\"</li> <li>Create a \"Zero Spend Budget\"<ul> <li>This alerts you if any charges occur</li> </ul> </li> </ol> <p>Free Tier Usage</p> <p>Our arcade project is specifically designed to stay within AWS's free tier limits for normal use!</p>"},{"location":"accounts/aws/basic-setup/#next-steps","title":"Next Steps","text":"<p>After completing this guide:</p> <ol> <li>Save your AWS account ID</li> <li>Store your IAM user credentials safely</li> <li>Continue to Creating an AWS Container Registry</li> </ol> <p>Continue to Container Registry Setup \u2192</p> <p>Back to Getting Started</p>"},{"location":"accounts/aws/basic-setup/#need-help","title":"Need Help?","text":"<p>Common setup issues:</p> <ul> <li>Can't create account? Double-check your email isn't already registered</li> <li>Verification issues? Try a different phone number or contact method</li> <li>Card declined? Make sure it's not expired and try another if needed</li> </ul> <p>Still Stuck?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Visit the AWS Help Center</li> </ul>"},{"location":"accounts/aws/container-registry/","title":"Creating an AWS Container Registry","text":"<p>Let's set up your AWS Container Registry! This is where we'll store the Docker image for your arcade cabinet software. Think of it like a secure storage locker for your code! </p>"},{"location":"accounts/aws/container-registry/#what-is-a-container-registry","title":"What is a Container Registry?","text":"<p>A container registry is like a special warehouse for storing your software:</p> <ul> <li>It keeps your Docker images safe and organized</li> <li>Makes it easy to deploy your software to AWS</li> <li>Helps manage different versions of your code</li> </ul> <p>What's a Docker Image?</p> <p>A Docker image is like a blueprint for your software. It contains everything needed to run your arcade cabinet's payment system!</p>"},{"location":"accounts/aws/container-registry/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have:</p> <ul> <li>Completed Basic AWS Setup</li> <li>AWS CLI installed on your computer</li> <li>Your IAM user access keys handy</li> </ul>"},{"location":"accounts/aws/container-registry/#creating-your-registry","title":"Creating Your Registry","text":""},{"location":"accounts/aws/container-registry/#1-open-amazon-ecr","title":"1. Open Amazon ECR","text":"<pre><code>1. Sign in to AWS Console\n2. Search for \"ECR\" in the services search bar\n3. Click \"Amazon Elastic Container Registry\"\n</code></pre>"},{"location":"accounts/aws/container-registry/#2-create-a-repository","title":"2. Create a Repository","text":"<pre><code>1. Click \"Create repository\"\n2. For repository settings:\n    * Visibility: \"Private\"\n    * Repository name: \"arcade-payment-system\"\n    * Tag immutability: Leave disabled\n    * Scan on push: Enable\n3. Click \"Create repository\"\n</code></pre> <p>About Repository Name</p> <p>Choose a clear, descriptive name - you might create more repositories for future projects!</p>"},{"location":"accounts/aws/container-registry/#3-configure-access","title":"3. Configure Access","text":"<p>Make sure your IAM user has permission to use ECR:</p> <ol> <li>Go to IAM service</li> <li>Select your \"arcade-admin\" user</li> <li>Add \"AmazonEC2ContainerRegistryFullAccess\" policy</li> </ol>"},{"location":"accounts/aws/container-registry/#using-your-registry","title":"Using Your Registry","text":""},{"location":"accounts/aws/container-registry/#view-registry-details","title":"View Registry Details","text":"<ol> <li>Click your new repository</li> <li>Note the Registry URI - you'll need this later!</li> <li>Looks like: <code>123456789012.dkr.ecr.region.amazonaws.com/arcade-payment-system</code></li> </ol>"},{"location":"accounts/aws/container-registry/#authentication-setup","title":"Authentication Setup","text":"<p>Run these commands in your terminal:</p> <pre><code># Configure AWS CLI with your credentials\naws configure\n\n# Login to ECR\naws ecr get-login-password --region your-region | docker login --username AWS --password-stdin your-registry-uri\n</code></pre> <p>Replace Values!</p> <ul> <li>Change <code>your-region</code> to your AWS region (e.g., us-west-2)</li> <li>Change <code>your-registry-uri</code> to your actual registry URI</li> </ul>"},{"location":"accounts/aws/container-registry/#next-steps","title":"Next Steps","text":"<p>Your container registry is ready! Keep your Registry URI handy - you'll need it when you:</p> <ul> <li>Follow the Quick Deploy Guide</li> <li>Or build your own version in the Custom Build Guide</li> </ul> <p>Continue to Lambda Setup \u2192 Back to Basic Setup</p>"},{"location":"accounts/aws/container-registry/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues:</p> <ul> <li>Permission denied? Check your IAM user permissions</li> <li>Login failed? Verify your AWS CLI configuration</li> <li>Can't create repository? Make sure you're in the right region</li> </ul> <p>Need Help?</p> <ul> <li>See Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Check AWS ECR documentation</li> </ul>"},{"location":"accounts/stripe/stripe-setup/","title":"Setting Up Your Stripe Account","text":"<p>Welcome to the Stripe setup guide! Stripe is what makes it possible for your arcade cabinet to accept payments. It's the same system many popular websites use for payments. Let's get it set up! </p>"},{"location":"accounts/stripe/stripe-setup/#what-is-stripe","title":"What is Stripe?","text":"<p>Stripe handles all the payment processing for your arcade cabinet:</p> <ul> <li>Creates QR codes for payments</li> <li>Processes credit/debit card payments securely</li> <li>Sends successful payment messages to API (which sends it to your gaming cabinet)</li> <li>Provides a dashboard to track earnings</li> </ul> <p>Stripe's Role</p> <p>When someone wants to play your arcade:</p> <ol> <li>They scan a QR code on the cabinet</li> <li>Stripe shows them a payment page</li> <li>They pay securely with their phone</li> <li>Stripe tells AWS to add credits to your cabinet</li> <li>Game time! </li> </ol>"},{"location":"accounts/stripe/stripe-setup/#test-mode-vs-live-mode","title":"Test Mode vs Live Mode","text":"<p>Stripe has two modes:</p>"},{"location":"accounts/stripe/stripe-setup/#test-mode","title":"Test Mode","text":"<ul> <li>Perfect for development and testing</li> <li>Use fake credit card numbers</li> <li>No real money involved</li> <li>Great for learning and setup</li> </ul>"},{"location":"accounts/stripe/stripe-setup/#live-mode","title":"Live Mode","text":"<ul> <li>For real payments when you're ready</li> <li>Requires business verification</li> <li>Involves real money</li> <li>Used when your arcade goes public</li> </ul> <p>Start with Test Mode</p> <p>We'll use Test Mode while setting everything up. This lets you practice and test without using real money!</p>"},{"location":"accounts/stripe/stripe-setup/#setting-up-your-account","title":"Setting Up Your Account","text":""},{"location":"accounts/stripe/stripe-setup/#1-create-your-account","title":"1. Create Your Account","text":"<ol> <li>Visit https://dashboard.stripe.com/register</li> <li>Enter your email address</li> <li>Create a secure password</li> <li>Verify your email address</li> </ol> <p>[!INSERT SCREENSHOT: Stripe registration page with important fields highlighted]</p>"},{"location":"accounts/stripe/stripe-setup/#2-account-settings","title":"2. Account Settings","text":"<p>After registering:</p> <ul> <li>Choose your country/region</li> <li>Select \"Individual\" account type</li> <li>Pick \"Test Mode\" for now</li> </ul> <p>Country Selection</p> <p>Make sure to pick the correct country - this can't be changed later!</p>"},{"location":"accounts/stripe/stripe-setup/#3-get-your-api-keys","title":"3. Get Your API Keys","text":"<ol> <li>Go to Developers \u2192 API Keys in dashboard</li> <li>You'll see two keys:<ul> <li>Publishable Key (starts with 'pk_test_')</li> <li>Secret Key (starts with 'sk_test_')</li> </ul> </li> </ol> <p>Keep Keys Secret!</p> <p>Never share your Secret Key! The Publishable Key is okay to share, but the Secret Key must stay private.</p> <p>[!INSERT SCREENSHOT: API keys page with sensitive information blocked out]</p>"},{"location":"accounts/stripe/stripe-setup/#setting-up-products","title":"Setting Up Products","text":""},{"location":"accounts/stripe/stripe-setup/#create-a-game-credits-product","title":"Create a Game Credits Product","text":"<ol> <li>Go to Products \u2192 Add Product</li> <li>Set up your game credit options:<ul> <li>Name (e.g., \"Arcade Credits\")</li> <li>Description</li> <li>Price points</li> <li>Currency</li> </ul> </li> </ol> <p>Example Setup: <pre><code>Name: Arcade Credits\nDescription: Credits for arcade play\nPrice: $1.00\nType: One-time payment\n</code></pre></p> <p>[!INSERT SCREENSHOT: Product creation page with example fields filled]</p>"},{"location":"accounts/stripe/stripe-setup/#test-your-setup","title":"Test Your Setup","text":""},{"location":"accounts/stripe/stripe-setup/#using-test-card-numbers","title":"Using Test Card Numbers","text":"<p>Test your payment system with these card numbers:</p> <ul> <li>Success: 4242 4242 4242 4242</li> <li>Decline: 4000 0000 0000 0002</li> <li>Error: 4000 0000 0000 9995</li> </ul> <p>Test Card Details</p> <ul> <li>Use any future expiry date</li> <li>Any 3-digit CVC</li> <li>Any ZIP code</li> </ul>"},{"location":"accounts/stripe/stripe-setup/#monitoring-payments","title":"Monitoring Payments","text":""},{"location":"accounts/stripe/stripe-setup/#test-mode-dashboard","title":"Test Mode Dashboard","text":"<p>Watch your test payments in the dashboard:</p> <ul> <li>See successful/failed payments</li> <li>View payment details</li> <li>Track testing progress</li> </ul> <p>[!INSERT SCREENSHOT: Test mode dashboard overview]</p>"},{"location":"accounts/stripe/stripe-setup/#going-live","title":"Going Live","text":"<p>When you're ready for real payments:</p>"},{"location":"accounts/stripe/stripe-setup/#1-complete-account-information","title":"1. Complete Account Information","text":"<ul> <li>Business details</li> <li>Bank account for deposits</li> <li>Tax information</li> <li>Identity verification</li> </ul>"},{"location":"accounts/stripe/stripe-setup/#2-switch-to-live-mode","title":"2. Switch to Live Mode","text":"<ul> <li>Get live API keys</li> <li>Update your system configuration</li> <li>Test with a real payment</li> </ul> <p>Before Going Live</p> <p>Make sure to: * Test thoroughly in test mode * Have all business paperwork ready * Understand fees and pricing * Set up proper monitoring</p>"},{"location":"accounts/stripe/stripe-setup/#understanding-stripe-fees","title":"Understanding Stripe Fees","text":""},{"location":"accounts/stripe/stripe-setup/#test-mode_1","title":"Test Mode","text":"<ul> <li>Completely free</li> <li>No real money involved</li> <li>Unlimited testing</li> </ul>"},{"location":"accounts/stripe/stripe-setup/#live-mode_1","title":"Live Mode","text":"<p>Standard fees: * 2.9% + $0.30 per successful charge * Example: On a $1.00 game play:     * Fee: $0.33 ($0.029 + $0.30)     * You receive: $0.67</p> <p>Pricing Strategy</p> <p>Consider Stripe fees when setting your game prices!</p>"},{"location":"accounts/stripe/stripe-setup/#next-steps","title":"Next Steps","text":"<p>After setting up Stripe:</p> <ol> <li>Save your API keys safely</li> <li>Test the payment flow</li> <li>Set up your products</li> <li>Try some test transactions</li> </ol> <p>Continue to Stripe Webhook Setup \u2192 Back to AWS Setup</p>"},{"location":"accounts/stripe/stripe-setup/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"accounts/stripe/stripe-setup/#payment-testing-issues","title":"Payment Testing Issues","text":"<ul> <li>Double-check test card numbers</li> <li>Verify API keys are correct</li> <li>Check webhook settings</li> <li>Monitor test mode logs</li> </ul>"},{"location":"accounts/stripe/stripe-setup/#account-setup-problems","title":"Account Setup Problems","text":"<ul> <li>Verify email address</li> <li>Check country settings</li> <li>Confirm product configuration</li> <li>Review API key access</li> </ul> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Visit Stripe Support</li> <li>Review Stripe's documentation</li> </ul> <p>[!INSERT SECTION: Add common student success stories and gotchas]</p>"},{"location":"accounts/stripe/stripe-setup/#local-testing-tips","title":"Local Testing Tips","text":""},{"location":"accounts/stripe/stripe-setup/#using-stripe-cli","title":"Using Stripe CLI","text":"<p>The Stripe CLI helps test locally:</p> <ol> <li>Install Stripe CLI</li> <li>Run webhook forwarding</li> <li>Test payments locally</li> </ol> <p>Testing Locally</p> <p>We'll cover detailed testing in the deployment guides!</p>"},{"location":"accounts/stripe/stripe-setup/#security-best-practices","title":"Security Best Practices","text":"<p>Remember to:</p> <ul> <li>Keep API keys secure</li> <li>Use test mode for development</li> <li>Monitor your dashboard</li> <li>Set up alerts for unusual activity</li> <li>Regularly review transactions</li> </ul> <p>Ready to Test?</p> <p>Once your Stripe account is set up, you're ready to start testing payments with your arcade cabinet!</p>"},{"location":"accounts/stripe/stripe-webhooks/","title":"Creating Stripe Webhooks","text":""},{"location":"accounts/stripe/stripe-webhooks/#before-you-start","title":"Before You Start","text":""},{"location":"accounts/stripe/stripe-webhooks/#prerequisites-checklist","title":"Prerequisites Checklist","text":"<p>Before setting up your webhook, you need:</p> <ul> <li>[x] Stripe account set up</li> <li>[ ] AWS Lambda function deployed with either:<ul> <li>Quick Deploy: Docker image pulled and deployed</li> <li>Custom Build: Your code built and deployed</li> </ul> </li> <li>[ ] API Gateway URL from AWS</li> <li>[ ] Environment variables configured in Lambda</li> </ul> <p>Not Ready Yet?</p> <p>If you haven't deployed your Lambda function:</p> <p>Quick Deploy Path</p> <ol> <li>Pull the Docker Image</li> <li>Deploy to AWS</li> <li>Come back here!</li> </ol> <p>Custom Build Path</p> <ol> <li>Build Your Code</li> <li>Deploy to AWS</li> <li>Come back here!</li> </ol> <p>Keep This Tab Open!</p> <p>If you need to complete the prerequisites, bookmark this page - you'll need it after deploying your Lambda function!</p>"},{"location":"accounts/stripe/stripe-webhooks/#creating-stripe-webhooks_1","title":"Creating Stripe Webhooks","text":""},{"location":"accounts/stripe/stripe-webhooks/#what-are-webhooks","title":"What are Webhooks?","text":"<p>Think of webhooks as a \"notification system\" for your arcade cabinet. When someone makes a payment:</p> <ol> <li>Stripe processes the payment</li> <li>Stripe sends a message to your system</li> <li>Your system adds credits to the cabinet</li> </ol> <p>Real World Example</p> <p>It's like when you order food delivery:</p> <ul> <li>You pay on the app</li> <li>The restaurant gets notified</li> <li>They start making your food!</li> </ul>"},{"location":"accounts/stripe/stripe-webhooks/#why-do-we-need-webhooks","title":"Why Do We Need Webhooks?","text":"<p>Webhooks are crucial for your arcade cabinet because they:</p> <ul> <li>Tell your system when a payment succeeds</li> <li>Help prevent cheating or errors</li> <li>Enable automatic credit adding</li> <li>Keep payment processing secure</li> </ul>"},{"location":"accounts/stripe/stripe-webhooks/#setting-up-your-webhook","title":"Setting Up Your Webhook","text":""},{"location":"accounts/stripe/stripe-webhooks/#1-find-your-api-url","title":"1. Find Your API URL","text":"<p>First, you'll need your AWS API Gateway URL. It looks like: <pre><code>https://abc123def.execute-api.us-west-2.amazonaws.com/prod\n</code></pre></p> <p>Don't Have This Yet?</p> <p>If you haven't set up AWS yet, bookmark this page and come back after completing the AWS Setup!</p>"},{"location":"accounts/stripe/stripe-webhooks/#2-create-the-webhook","title":"2. Create the Webhook","text":"<ol> <li> <p>In your Stripe Dashboard:</p> <ul> <li>Go to \"Developers\" \u2192 \"Webhooks\"</li> <li>Click \"Add endpoint\"</li> </ul> </li> <li> <p>Configure Your Endpoint:</p> <ul> <li>URL: Your API URL + <code>/addCredit</code></li> <li>Description: \"Arcade Cabinet Payments\"</li> <li>Click \"Select events\"</li> </ul> </li> <li> <p>Select Events:</p> <ul> <li>Expand \"Checkout\"</li> <li>Check <code>checkout.session.completed</code></li> <li>Click \"Add events\"</li> </ul> </li> </ol> <p>[!INSERT SCREENSHOT: Stripe webhook configuration page with fields highlighted]</p>"},{"location":"accounts/stripe/stripe-webhooks/#3-save-your-secret","title":"3. Save Your Secret","text":"<p>After creating the webhook:</p> <ol> <li>Look for \"Signing secret\"</li> <li>Click \"Reveal\" </li> <li>Copy the secret (starts with <code>whsec_</code>)</li> <li>Save it somewhere safe!</li> </ol> <p>Keep This Secret!</p> <p>Your webhook secret is like a password. Never:</p> <ul> <li>Share it with anyone</li> <li>Commit it to code</li> <li>Post it online</li> </ul>"},{"location":"accounts/stripe/stripe-webhooks/#testing-your-webhook","title":"Testing Your Webhook","text":""},{"location":"accounts/stripe/stripe-webhooks/#1-install-stripe-cli","title":"1. Install Stripe CLI","text":"MacWindowsLinux <pre><code>brew install stripe/stripe-cli/stripe\n</code></pre> <ul> <li>Download from Stripe CLI Releases</li> <li>Add to your system PATH</li> </ul> <pre><code># Download latest linux tar.gz from Stripe CLI releases\nsudo tar -xvf stripe_X.X.X_linux_x86_64.tar.gz -C /usr/local/bin\n</code></pre>"},{"location":"accounts/stripe/stripe-webhooks/#2-test-locally","title":"2. Test Locally","text":"<ol> <li> <p>Login to Stripe:    <pre><code>stripe login\n</code></pre></p> </li> <li> <p>Start webhook forwarding:    <pre><code>stripe listen --forward-to localhost:5000/webhook\n</code></pre></p> </li> <li> <p>In a new terminal, send a test event:    <pre><code>stripe trigger checkout.session.completed\n</code></pre></p> </li> </ol>"},{"location":"accounts/stripe/stripe-webhooks/#3-verify-it-works","title":"3. Verify It Works","text":"<p>Look for these signs of success:</p> <ul> <li>Terminal shows \"webhook received\"</li> <li>Your system logs show the event</li> <li>Test credits appear correctly</li> </ul>"},{"location":"accounts/stripe/stripe-webhooks/#common-issues","title":"Common Issues","text":""},{"location":"accounts/stripe/stripe-webhooks/#webhook-not-working","title":"Webhook Not Working?","text":"<ol> <li> <p>Check Your URL:</p> <ul> <li>Is it spelled correctly?</li> <li>Did you add <code>/addCredit</code> at the end?</li> <li>Is your API Gateway running?</li> </ul> </li> <li> <p>Verify Your Secret:</p> <ul> <li>Is it set in your environment variables?</li> <li>Did you copy it correctly?</li> <li>Are you using the right secret for test/live mode?</li> </ul> </li> <li> <p>Test Event Problems:</p> <ul> <li>Are you selecting the right event type?</li> <li>Is your system running when testing?</li> <li>Can you see the events in Stripe dashboard?</li> </ul> </li> </ol> <p>Still Stuck?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Look at your Lambda logs</li> <li>Review Stripe's webhook logs</li> </ul>"},{"location":"accounts/stripe/stripe-webhooks/#going-live","title":"Going Live","text":"<p>Before accepting real payments:</p> <ol> <li> <p>Update webhook URL:</p> <ul> <li>Change from localhost to your production URL</li> <li>Add new webhook endpoint for live mode</li> <li>Get new webhook secret for live mode</li> </ul> </li> <li> <p>Set up monitoring:</p> <ul> <li>Enable webhook monitoring</li> <li>Set up failure notifications</li> <li>Test with real test payments</li> </ul> </li> </ol>"},{"location":"accounts/stripe/stripe-webhooks/#next-steps","title":"Next Steps","text":"<p>Now that your webhook is set up:</p> <ol> <li>Save your webhook secret</li> <li>Update your environment variables</li> <li>Test the complete payment flow</li> <li>Monitor for successful operation</li> </ol> <p>Continue to Testing \u2192 Back to Stripe Setup</p>"},{"location":"aws-lambda/api-gateway-intro/","title":"Understanding API Gateway","text":"<p>Welcome to the API Gateway guide! Let's learn about this important service that connects your arcade cabinet to your Lambda function. </p>"},{"location":"aws-lambda/api-gateway-intro/#what-is-api-gateway","title":"What is API Gateway?","text":"<p>Think of API Gateway as a smart receptionist for your arcade system:</p> <ul> <li>It receives requests from arcade cabinets</li> <li>Routes them to the right Lambda function</li> <li>Handles security and authentication</li> <li>Manages multiple connections</li> <li>Tracks usage and performance</li> </ul> <p>Real World Example</p> <p>Imagine a hotel front desk:</p> <ul> <li>Guests (arcade cabinets) arrive with requests</li> <li>The receptionist (API Gateway) checks their ID</li> <li>Then directs them to the right room (Lambda function)</li> <li>Keeps track of who's visiting</li> <li>Makes sure everything runs smoothly</li> </ul>"},{"location":"aws-lambda/api-gateway-intro/#why-do-we-need-it","title":"Why Do We Need It?","text":"<p>API Gateway is essential because it:</p> <ol> <li>Creates a stable URL for your API</li> <li>Manages security and access</li> <li>Handles multiple requests at once</li> <li>Provides usage metrics</li> <li>Stays within AWS free tier</li> </ol> <p>Free Tier Benefits</p> <p>API Gateway's free tier includes:</p> <ul> <li>1 million API calls per month</li> <li>Built-in DDoS protection</li> <li>Request validation</li> <li>Response caching</li> </ul>"},{"location":"aws-lambda/api-gateway-intro/#api-gateway-concepts","title":"API Gateway Concepts","text":""},{"location":"aws-lambda/api-gateway-intro/#1-endpoints","title":"1. Endpoints","text":"<p>These are the URLs your arcade cabinet will use:</p> <ul> <li><code>/status</code> - Check if system is running</li> <li><code>/create-payment-link</code> - Generate QR codes</li> <li><code>/addCredit</code> - Process payments</li> <li><code>/gameover</code> - Handle game completion</li> </ul>"},{"location":"aws-lambda/api-gateway-intro/#2-methods","title":"2. Methods","text":"<p>Different types of requests:</p> <ul> <li>GET - Retrieve information</li> <li>POST - Send information</li> <li>PUT - Update information</li> <li>DELETE - Remove information</li> </ul>"},{"location":"aws-lambda/api-gateway-intro/#3-stages","title":"3. Stages","text":"<p>Different versions of your API:</p> <ul> <li>Development - For testing</li> <li>Production - For real use</li> <li>Custom stages - For special needs</li> </ul>"},{"location":"aws-lambda/api-gateway-intro/#4-integrations","title":"4. Integrations","text":"<p>How API Gateway connects to Lambda:</p> <ul> <li>Proxy integration - Passes everything through</li> <li>Custom integration - More control but complex</li> </ul>"},{"location":"aws-lambda/api-gateway-intro/#security-features","title":"Security Features","text":"<p>API Gateway protects your system with:</p> <ol> <li> <p>Authentication</p> <ul> <li>API keys</li> <li>IAM roles</li> <li>Custom authorizers</li> </ul> </li> <li> <p>Throttling</p> <ul> <li>Rate limiting</li> <li>Burst limiting</li> <li>Per-client limits</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Request logging</li> <li>Error tracking</li> <li>Usage metrics</li> </ul> </li> </ol>"},{"location":"aws-lambda/api-gateway-intro/#next-steps","title":"Next Steps","text":"<p>Now that you understand API Gateway:</p> <ol> <li>Set up your own API Gateway</li> <li>Configure security settings</li> <li>Test the integration</li> </ol> <p>Continue to API Gateway Setup \u2192 Back to Lambda Setup</p> <p>Keep Learning</p> <ul> <li>Explore API Gateway dashboard</li> <li>Read CloudWatch logs</li> <li>Test different configurations</li> </ul>"},{"location":"aws-lambda/lambda-setup/","title":"Setting Up AWS Lambda","text":"<p>Welcome to the AWS Lambda setup guide! This is where we'll create the cloud API that powers your arcade cabinet. This API handles everything from payments to game control! </p> <p>Important: Read First!</p> <p>You can only complete this guide AFTER you have:</p> <ul> <li>Either pulled the pre-built Docker image (Quick Deploy)</li> <li>OR built your own image (Custom Build)</li> <li>AND pushed the image to your Container Registry</li> </ul>"},{"location":"aws-lambda/lambda-setup/#what-is-aws-lambda","title":"What is AWS Lambda?","text":"<p>AWS Lambda hosts your Artcade API in the cloud. Think of it as your arcade's brain that:</p> <ul> <li>Processes payments from Stripe</li> <li>Sends \"coin pulse\" signals to start games</li> <li>Handles \"game over\" signals</li> <li>Creates payment QR codes</li> <li>Monitors cabinet status</li> <li>Manages multiple arcade machines</li> </ul> <p>Why Lambda for Our API?</p> <ul> <li>No servers to manage - AWS handles everything</li> <li>Only pay when your API is actually being used</li> <li>Automatically handles multiple cabinets</li> <li>Built-in security and monitoring</li> <li>Perfect for APIs that handle occasional requests</li> </ul>"},{"location":"aws-lambda/lambda-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>Completed Basic AWS Setup</li> <li>Set up your Container Registry</li> <li>Docker image ready in your registry</li> <li>IAM user with Lambda permissions</li> </ul>"},{"location":"aws-lambda/lambda-setup/#creating-your-lambda-function","title":"Creating Your Lambda Function","text":""},{"location":"aws-lambda/lambda-setup/#step-1-open-lambda-service","title":"STEP 1. Open Lambda Service","text":"<ol> <li>Sign in to AWS Console</li> <li>Search for \"Lambda\"</li> <li>Click \"Create function\"</li> </ol>"},{"location":"aws-lambda/lambda-setup/#step-2-configure-function","title":"STEP 2. Configure Function","text":"<ol> <li>Select \"Container image\"</li> <li>Set function name to \"artcade-api\"</li> <li>Select your container image URI from the registry</li> <li>Click \"Create function\"</li> </ol>"},{"location":"aws-lambda/lambda-setup/#step-3-configure-environment-variables","title":"STEP 3. Configure Environment Variables","text":"<ol> <li>Navigate to the Configuration tab</li> <li>Click on Environment Variables</li> <li>Add the following variables:<ul> <li><code>STRIPE_API_KEY</code>: Your Stripe secret key</li> <li><code>STRIPE_WEBHOOK_SECRET</code>: Your Stripe webhook secret</li> <li><code>MQTT_USERNAME</code>: Your EMQX username</li> <li><code>MQTT_PASSWORD</code>: Your EMQX password</li> <li><code>MQTT_BROKER</code>: Your EMQX broker address</li> <li><code>MQTT_PORT</code>: Usually 8883 for SSL/TLS connection</li> <li><code>PRICE_ID</code>: Your Stripe Price ID for the game</li> </ul> </li> </ol> <p>Security Best Practices</p> <p>Always use AWS Secrets Manager or AWS Systems Manager Parameter Store for sensitive information like API keys and passwords in a production environment.</p>"},{"location":"aws-lambda/lambda-setup/#testing-your-lambda","title":"Testing Your Lambda","text":"<ol> <li>Navigate to the Test tab</li> <li>Create a new test event</li> <li>Select API Gateway HTTP API template</li> <li>Save and run the test</li> <li>Check results in the execution log</li> </ol>"},{"location":"aws-lambda/lambda-setup/#monitoring-setup","title":"Monitoring Setup","text":"<ol> <li> <p>Set Up CloudWatch Monitoring</p> <ol> <li>Navigate to CloudWatch in AWS Console</li> <li>Create alarms for:<ul> <li>Error rates</li> <li>Function duration</li> <li>Invocation counts</li> </ul> </li> <li>Set notification thresholds</li> </ol> </li> </ol> <p>Free Tier Limits</p> <ul> <li>1M free requests per month</li> <li>400,000 GB-seconds compute time</li> <li>Perfect for arcade cabinets!</li> </ul>"},{"location":"aws-lambda/lambda-setup/#next-steps","title":"Next Steps","text":"<p>Once your Lambda function is set up, you'll need to:</p> <ol> <li>Understand how API Gateway works</li> <li>Configure API Gateway for your Lambda</li> <li>Test the complete system</li> </ol> <p>Continue to API Gateway Introduction \u2192 Back to Container Registry</p>"},{"location":"aws-lambda/lambda-setup/#troubleshooting","title":"Troubleshooting","text":"<p>Common Lambda issues:</p> <ol> <li> <p>Container errors: </p> <ul> <li>Check your Docker image</li> <li>Verify the image URI</li> <li>Look at CloudWatch logs</li> </ul> </li> <li> <p>Permission errors: </p> <ul> <li>Check IAM roles</li> <li>Verify execution permissions</li> <li>Review security settings</li> </ul> </li> <li> <p>Environment issues:</p> <ul> <li>Verify all variables are set</li> <li>Check for typos in values</li> <li>Confirm secrets are properly stored</li> </ul> </li> </ol> <p>Need Help?</p> <ul> <li>Check Troubleshooting Guide</li> <li>Review CloudWatch logs</li> <li>Ask your teacher or mentor</li> </ul>"},{"location":"aws-lambda/setup-gateway/","title":"Setting Up API Gateway","text":"<p>Time to connect your Lambda function to the internet! We'll start by creating the API Gateway trigger and then set up each endpoint. </p>"},{"location":"aws-lambda/setup-gateway/#getting-started-create-api-gateway-trigger","title":"Getting started: Create API Gateway Trigger","text":"<p>First, create the API Gateway trigger from your Lambda function:</p> <ol> <li>Go to your Lambda function in AWS Console</li> <li>Click on the \"Configuration\" tab</li> <li>Select \"Triggers\" from the left menu</li> <li>Click \"Add trigger\"</li> <li> <p>In the trigger configuration:</p> <ul> <li>Select \"API Gateway\" from the dropdown</li> <li>Under \"API\", select \"Create an API\"</li> <li>Choose \"HTTP API\" (it's simpler and cheaper!)</li> <li>For \"Security\", select \"Open\"</li> </ul> </li> <li> <p>Click \"Add\" to create the trigger</p> </li> </ol> <p>About HTTP APIs</p> <p>HTTP APIs are perfect for our arcade because:</p> <ul> <li>They're cost-effective</li> <li>They're simpler to manage</li> <li>They have great performance</li> <li>They work well with Lambda</li> </ul>"},{"location":"aws-lambda/setup-gateway/#creating-resources-and-methods","title":"Creating Resources and Methods","text":""},{"location":"aws-lambda/setup-gateway/#step-1-create-a-new-resource","title":"Step 1: Create a New Resource","text":"<ol> <li>Click \"Create resource\" button</li> <li> <p>In the resource setup:</p> <ul> <li>Set Resource Path to \"/\" (root)</li> <li>Give your resource a name that matches an endpoint in your code</li> <li>Leave \"Proxy Resource\" and \"CORS\" unchecked</li> </ul> </li> <li> <p>Click \"Create resource\"</p> </li> </ol> <p>Resource Names</p> <p>Your resource name should match the endpoints in your code:</p> <ul> <li>/status</li> <li>/create-payment-link</li> <li>/addCredit</li> <li>/gameover</li> </ul>"},{"location":"aws-lambda/setup-gateway/#step-2-create-and-configure-method","title":"Step 2: Create and Configure Method","text":"<p>After creating your resource:</p> <ol> <li>Click on your newly created resource in the left sidebar</li> <li>Click \"Create method\" button</li> <li> <p>In the method setup:</p> <ul> <li>Choose the appropriate HTTP method (GET, POST) from dropdown</li> <li>Select \"Lambda Function\" for Integration type</li> <li>Enable \"Lambda Proxy integration\"</li> <li>Select your Lambda function from the dropdown</li> </ul> </li> <li> <p>Click \"Create method\"</p> </li> </ol> <p>Important Settings</p> <p>Make sure you:</p> <ul> <li>Choose the correct HTTP method for each endpoint</li> <li>Select Lambda Function integration type</li> <li>Enable Lambda Proxy integration</li> <li>Select your specific Lambda function</li> </ul>"},{"location":"aws-lambda/setup-gateway/#step-3-repeat-for-each-endpoint","title":"Step 3: Repeat for Each Endpoint","text":"<p>Create resources and methods for each endpoint:</p> <ol> <li> <p>Status Endpoint:</p> <ul> <li>Resource path: /status</li> <li>Method: GET</li> </ul> </li> <li> <p>Payment Link Endpoint:</p> <ul> <li>Resource path: /create-payment-link</li> <li>Method: POST</li> </ul> </li> <li> <p>Add Credit Endpoint:</p> <ul> <li>Resource path: /addCredit</li> <li>Method: POST</li> </ul> </li> <li> <p>Game Over Endpoint:</p> <ul> <li>Resource path: /gameover</li> <li>Method: POST</li> </ul> </li> </ol>"},{"location":"aws-lambda/setup-gateway/#deploying-your-api","title":"Deploying Your API","text":"<p>After creating all resources and methods:</p> <ol> <li>Click the \"Deploy API\" button</li> <li> <p>In the deployment popup:</p> <ul> <li>Select \"[New Stage]\" if this is your first deployment</li> <li>Enter a stage name (or leave as \"default\")</li> <li>Add a description if you want</li> </ul> </li> <li> <p>Click \"Deploy\"</p> </li> </ol> <p>Get Your URL</p> <p>After deployment, you'll get a URL that looks like:</p> <pre><code>https://abc123def.execute-api.us-west-2.amazonaws.com/default\n</code></pre> <p>Save this URL - you'll need it for:</p> <ul> <li>Testing your API</li> <li>Setting up Stripe webhooks</li> <li>Configuring your arcade cabinet</li> </ul>"},{"location":"aws-lambda/setup-gateway/#testing-your-setup","title":"Testing Your Setup","text":"<p>Test each endpoint using your new API URL:</p>"},{"location":"aws-lambda/setup-gateway/#1-status-check","title":"1. Status Check","text":"<pre><code>curl https://your-api-url/status\n</code></pre>"},{"location":"aws-lambda/setup-gateway/#2-payment-link-creation","title":"2. Payment Link Creation","text":"<pre><code>curl -X POST https://your-api-url/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre>"},{"location":"aws-lambda/setup-gateway/#3-game-over-signal","title":"3. Game Over Signal","text":"<pre><code>curl -X POST https://your-api-url/gameover \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre>"},{"location":"aws-lambda/setup-gateway/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"aws-lambda/setup-gateway/#method-not-found","title":"Method Not Found","text":"<ul> <li>Check that you created the resource correctly</li> <li>Verify HTTP method matches your code</li> <li>Ensure Lambda proxy integration is enabled</li> </ul>"},{"location":"aws-lambda/setup-gateway/#lambda-permission-error","title":"Lambda Permission Error","text":"<ul> <li>Check that API Gateway has permission to invoke Lambda</li> <li>Verify Lambda function name is correct</li> <li>Review IAM roles and permissions</li> </ul>"},{"location":"aws-lambda/setup-gateway/#deployment-issues","title":"Deployment Issues","text":"<ul> <li>Make sure all methods are properly configured</li> <li>Check that you've deployed to a stage</li> <li>Verify the API URL you're using matches your deployment stage</li> </ul> <p>Need Help?</p> <ul> <li>Check Troubleshooting Guide</li> <li>Review CloudWatch logs</li> <li>Ask your teacher or mentor</li> </ul>"},{"location":"aws-lambda/setup-gateway/#next-steps","title":"Next Steps","text":"<p>After deploying your API:</p> <ol> <li>Save your API URL</li> <li>Update Stripe webhook settings</li> <li>Test all endpoints</li> <li>Monitor for issues</li> </ol> <p>Continue to Testing \u2192 Back to API Gateway Introduction</p>"},{"location":"aws-lambda/test-deployment/","title":"Testing Your Deployment","text":"<p>Now that your API is deployed, let's make sure everything works! We'll test each part of your system step by step. </p>"},{"location":"aws-lambda/test-deployment/#prerequisites","title":"Prerequisites \u2705","text":"<p>Before starting, make sure you have:</p> <ul> <li>Your API Gateway URL (from previous step)</li> <li>Stripe CLI installed</li> <li>MQTT client (Mosquitto) installed</li> <li>Test environment variables configured in Lambda</li> </ul> <p>Keep Your Tools Ready</p> <p>You'll need several terminal windows open for testing. Consider using VSCode's integrated terminal with split panes to keep everything organized!</p>"},{"location":"aws-lambda/test-deployment/#part-1-basic-api-testing","title":"Part 1: Basic API Testing \ud83d\udd0d","text":"<p>Let's start by making sure your API endpoints are accessible.</p>"},{"location":"aws-lambda/test-deployment/#1-test-status-endpoint","title":"1. Test Status Endpoint","text":"<pre><code>curl https://your-api-url/status\n</code></pre> <p>Expected response: <pre><code>{\n    \"status\": \"up\",\n    \"message\": \"API is running\"\n}\n</code></pre></p> <p>Getting a 404?</p> <p>If you get a \"Not Found\" error:</p> <ul> <li>Double-check your API URL</li> <li>Verify the endpoint is deployed</li> <li>Check Lambda logs for errors</li> </ul>"},{"location":"aws-lambda/test-deployment/#part-2-payment-flow-testing","title":"Part 2: Payment Flow Testing \ud83d\udcb3","text":""},{"location":"aws-lambda/test-deployment/#1-create-payment-link","title":"1. Create Payment Link","text":"<pre><code>curl -X POST https://your-api-url/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre> <p>Expected response: <pre><code>{\n    \"url\": \"https://checkout.stripe.com/c/pay/cs_test_...\"\n}\n</code></pre></p>"},{"location":"aws-lambda/test-deployment/#2-test-payment-processing","title":"2. Test Payment Processing","text":"<ol> <li> <p>Start Stripe webhook forwarding: <pre><code>stripe listen --forward-to https://your-api-url/addCredit\n</code></pre></p> </li> <li> <p>Open the payment URL in your browser</p> </li> <li> <p>Complete a test payment:</p> <ul> <li>Card number: 4242 4242 4242 4242</li> <li>Any future expiry date</li> <li>Any 3-digit CVC</li> <li>Any ZIP code</li> </ul> </li> </ol> <p>Test Cards</p> <p>Stripe provides several test cards for different scenarios:</p> <ul> <li>4242 4242 4242 4242 - Successful payment</li> <li>4000 0000 0000 9995 - Declined payment</li> <li>Find more in the Stripe testing docs</li> </ul>"},{"location":"aws-lambda/test-deployment/#part-3-mqtt-message-testing","title":"Part 3: MQTT Message Testing \ud83d\udce1","text":""},{"location":"aws-lambda/test-deployment/#1-watch-for-messages","title":"1. Watch for Messages","text":"<p>In a new terminal, subscribe to MQTT topics:</p> <pre><code>mosquitto_sub -h your.emqx.cloud.broker -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  -t \"arcade/machine/+/gameover\" \\\n  --cafile emqx.ca \\\n  -u \"your_username\" -P \"your_password\"\n</code></pre>"},{"location":"aws-lambda/test-deployment/#2-test-game-over-signal","title":"2. Test Game Over Signal","text":"<pre><code>curl -X POST https://your-api-url/gameover \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre> <p>Watch your MQTT subscriber terminal for the game over message!</p>"},{"location":"aws-lambda/test-deployment/#part-4-end-to-end-testing","title":"Part 4: End-to-End Testing \ud83d\udd04","text":"<p>Time to test the complete flow! You should see:</p> <ol> <li>Payment link creation \u2713</li> <li>Successful payment \u2713</li> <li>MQTT coin pulse message \u2713</li> <li>Game over signal \u2713</li> <li>MQTT game over message \u2713</li> </ol> <p>Working System</p> <p>If you see all these steps working, congratulations! Your arcade payment system is ready for action! \ud83c\udfae</p>"},{"location":"aws-lambda/test-deployment/#monitoring-and-logs","title":"Monitoring and Logs \ud83d\udcca","text":""},{"location":"aws-lambda/test-deployment/#check-cloudwatch-logs","title":"Check CloudWatch Logs","text":"<ol> <li>Go to AWS Console \u2192 CloudWatch \u2192 Log Groups</li> <li>Find your Lambda function's log group</li> <li>Look for any errors or warnings</li> </ol>"},{"location":"aws-lambda/test-deployment/#monitor-stripe-dashboard","title":"Monitor Stripe Dashboard","text":"<ol> <li>Go to Stripe Dashboard \u2192 Events</li> <li>Look for successful test payments</li> <li>Verify webhook deliveries</li> </ol> <p>Log Investigation</p> <p>If something's not working, logs are your best friend! They'll tell you exactly where things went wrong.</p>"},{"location":"aws-lambda/test-deployment/#common-issues-and-solutions","title":"Common Issues and Solutions \ud83d\udd27","text":""},{"location":"aws-lambda/test-deployment/#api-gateway-issues","title":"API Gateway Issues","text":"<ul> <li>403 Forbidden: Check Lambda permissions</li> <li>502 Bad Gateway: Review Lambda function configuration</li> <li>Timeout: Adjust Lambda timeout settings</li> </ul>"},{"location":"aws-lambda/test-deployment/#stripe-issues","title":"Stripe Issues","text":"<ul> <li>Webhook errors: Verify endpoint URL and secrets</li> <li>Payment failures: Check test card numbers</li> <li>Missing events: Confirm webhook forwarding is running</li> </ul>"},{"location":"aws-lambda/test-deployment/#mqtt-issues","title":"MQTT Issues","text":"<ul> <li>Connection refused: Check broker address and credentials</li> <li>No messages: Verify topic subscriptions</li> <li>SSL errors: Check certificate configuration</li> </ul> <p>Still Stuck?</p> <ul> <li>Check the Troubleshooting Guide</li> <li>Review specific error messages</li> <li>Ask your teacher or mentor for help</li> </ul>"},{"location":"aws-lambda/test-deployment/#security-checks","title":"Security Checks \ud83d\udd10","text":"<p>Before finishing testing, verify:</p> <ol> <li>Environment variables are properly set</li> <li>Stripe webhook secret is configured</li> <li>MQTT credentials are secure</li> <li>API endpoints are working as expected</li> </ol>"},{"location":"aws-lambda/test-deployment/#next-steps","title":"Next Steps \ud83c\udfaf","text":"<p>Once testing is complete:</p> <ol> <li>Document any issues found</li> <li>Save test outputs for reference</li> <li>Plan your next features or modifications</li> <li>Consider moving to production mode</li> </ol> <p>Continue to Making Modifications \u2192 Back to API Gateway Setup</p> <p>Keep Testing!</p> <p>Regular testing helps catch issues early. Consider setting up automated tests for your system!</p>"},{"location":"custom-build/build-and-test/","title":"Building and Testing Your System \ud83d\udee0\ufe0f","text":"<p>Now that you understand how the code works, let's get it running on your computer and test everything! We'll build and test locally first, then handle containerization and deployment in the next section.</p>"},{"location":"custom-build/build-and-test/#prerequisites","title":"Prerequisites \u2705","text":"<p>Before starting, make sure you have:</p> <ul> <li>All accounts set up (AWS, Stripe, EMQX)</li> <li>Python 3.9 or higher installed</li> <li>Visual Studio Code (VSCode) installed</li> <li>Git installed</li> <li>Your code cloned from GitHub</li> </ul> <p>Quick Check</p> <p>Run these commands in your terminal to verify your setup: <pre><code>python --version  # Should show 3.9 or higher\ngit --version    # Should show Git version\n</code></pre></p>"},{"location":"custom-build/build-and-test/#part-1-setting-up-your-development-environment","title":"Part 1: Setting Up Your Development Environment \ud83d\udcbb","text":""},{"location":"custom-build/build-and-test/#1-create-your-environment-file","title":"1. Create Your Environment File","text":"<ol> <li> <p>In your project folder, create a new file called <code>.env.local</code>:    <pre><code># In VSCode, right-click in the explorer and select \"New File\"\n# Name it .env.local\n</code></pre></p> </li> <li> <p>Add your configuration (replace with your actual values):    <pre><code>STRIPE_API_KEY=sk_test_your_stripe_key\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\nSTRIPE_PRICE_ID=price_your_price_id\nMQTT_USERNAME=your_mqtt_username\nMQTT_PASSWORD=your_mqtt_password\nMQTT_BROKER=your.emqx.cloud.broker\nMQTT_PORT=8883\n</code></pre></p> </li> </ol> <p>Keep It Secret!</p> <p>Never commit your <code>.env.local</code> file to Git! It should already be in <code>.gitignore</code>.</p>"},{"location":"custom-build/build-and-test/#2-set-up-your-python-virtual-environment","title":"2. Set Up Your Python Virtual Environment","text":"<p>Create and activate a virtual environment (open termninal in vs code):</p> WindowsMac/Linux <pre><code>python -m venv venv\n.\\venv\\Scripts\\activate\n</code></pre> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Install dependencies: <pre><code>pip install -r requirements.txt\n</code></pre></p>"},{"location":"custom-build/build-and-test/#part-2-testing-your-system","title":"Part 2: Testing Your System \ud83e\uddea","text":"<p>Let's test each component to make sure everything works!</p>"},{"location":"custom-build/build-and-test/#1-test-local-api","title":"1. Test Local API","text":"<ol> <li> <p>Start the Flask application (you paste this into terminal and run the command):    <pre><code>python app.py\n</code></pre></p> </li> <li> <p>In a new terminal, test the status endpoint:    <pre><code>curl http://localhost:5000/status\n</code></pre></p> </li> </ol> <p>You should see:    <pre><code>{\n  \"status\": \"up\",\n  \"message\": \"API is running\"\n}\n</code></pre></p>"},{"location":"custom-build/build-and-test/#2-test-mqtt-connection","title":"2. Test MQTT Connection \ud83d\udce1","text":"<ol> <li>Install the Mosquitto MQTT client:</li> </ol> WindowsMacLinux <p>Download from: https://mosquitto.org/download/</p> <pre><code>brew install mosquitto\n</code></pre> <pre><code>sudo apt-get install mosquitto-clients\n</code></pre> <ol> <li> <p>Subscribe to test messages:    <pre><code>mosquitto_sub -h your.emqx.cloud.broker -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  -t \"arcade/machine/+/gameover\" \\\n  --cafile emqx.ca \\\n  -u \"your_username\" -P \"your_password\"\n</code></pre></p> </li> <li> <p>Keep this terminal open to watch for messages!</p> </li> </ol>"},{"location":"custom-build/build-and-test/#3-test-stripe-integration","title":"3. Test Stripe Integration \ud83d\udcb3","text":"<ol> <li>Install the Stripe CLI:</li> </ol> WindowsMacLinux <p>Download from: https://github.com/stripe/stripe-cli/releases/latest</p> <pre><code>brew install stripe/stripe-cli/stripe\n</code></pre> <pre><code># Download latest linux tar.gz from Stripe CLI releases\nsudo tar -xvf stripe_X.X.X_linux_x86_64.tar.gz -C /usr/local/bin\n</code></pre> <ol> <li> <p>Login to Stripe CLI:    <pre><code>stripe login\n</code></pre></p> </li> <li> <p>Forward webhooks to your local app:    <pre><code>stripe listen --forward-to localhost:5000/webhook\n</code></pre></p> </li> <li> <p>Test payment flow:</p> <p>a. Create a payment link by running this command: <pre><code>curl -X POST http://localhost:5000/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre></p> <p>You'll get back a response that looks like this: <pre><code>{\n    \"url\": \"https://checkout.stripe.com/c/pay/cs_test_...\"\n}\n</code></pre></p> <p>What is a Payment Link?</p> <p>A Stripe Payment Link is a hosted payment page that lets customers securely make payments. On your arcade cabinet, players will scan a QR code that leads to this page. Learn more about Stripe Payment Links.</p> <p>b. Copy the URL from the response and paste it into your web browser. You'll see Stripe's payment page, just like your arcade players will see when they scan the QR code!</p> <p>c. Complete the test payment using these card details:</p> <ul> <li>Card number: <code>4242 4242 4242 4242</code></li> <li>Expiry: Any future date</li> <li>CVC: Any 3 digits</li> <li>ZIP: Any 5 digits</li> </ul> <p>Test Cards</p> <p>The <code>4242 4242 4242 4242</code> card number is a special test card that Stripe provides. It will always work in test mode but won't work in production. Perfect for testing!</p> </li> </ol>"},{"location":"custom-build/build-and-test/#4-verify-full-flow","title":"4. Verify Full Flow \ud83d\udd04","text":"<p>Time to test everything together! You'll need three terminal windows:</p> Terminal 1 - Run Flask AppTerminal 2 - Watch MQTT MessagesTerminal 3 - Forward Stripe Webhooks <pre><code>python app.py\n</code></pre> <pre><code>mosquitto_sub -h your.emqx.cloud.broker -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  -t \"arcade/machine/+/gameover\" \\\n  --cafile emqx.ca \\\n  -u \"your_username\" -P \"your_password\"\n</code></pre> <pre><code>stripe listen --forward-to localhost:5000/webhook\n</code></pre> <p>Now let's test the complete flow:</p> <ol> <li> <p>Create and use a payment link:    <pre><code>curl -X POST http://localhost:5000/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre></p> </li> <li> <p>Complete the test payment in your browser</p> </li> <li> <p>Watch Terminal 2 for the MQTT coinpulse message</p> </li> <li> <p>Send a game over signal:    <pre><code>curl -X POST http://localhost:5000/gameover \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre></p> </li> <li> <p>Watch Terminal 2 for the MQTT game over message</p> </li> </ol>"},{"location":"custom-build/build-and-test/#troubleshooting-common-issues","title":"Troubleshooting Common Issues \ud83d\udd27","text":""},{"location":"custom-build/build-and-test/#api-issues","title":"API Issues","text":"<ul> <li>Can't start Flask: Check if port 5000 is already in use</li> <li>Environment variables: Make sure <code>.env.local</code> is in the right place</li> <li>Import errors: Verify virtual environment is activated</li> </ul>"},{"location":"custom-build/build-and-test/#mqtt-issues","title":"MQTT Issues","text":"<ul> <li>Connection refused: Check broker address and port</li> <li>Authentication failed: Verify username and password</li> <li>SSL/TLS errors: Make sure you have the correct CA certificate</li> </ul>"},{"location":"custom-build/build-and-test/#stripe-issues","title":"Stripe Issues","text":"<ul> <li>Invalid API key: Check your test API key in <code>.env.local</code></li> <li>Webhook errors: Ensure webhook forwarding is running</li> <li>Payment fails: Verify you're using the correct test card</li> </ul>"},{"location":"custom-build/build-and-test/#success-criteria","title":"Success Criteria \u2728","text":"<p>Your local setup is working when you can:</p> <ol> <li>\u2705 Get a successful response from the status endpoint</li> <li>\u2705 Create a payment link</li> <li>\u2705 Complete a test payment</li> <li>\u2705 See the coinpulse MQTT message</li> <li>\u2705 Send a game over signal</li> <li>\u2705 See the game over MQTT message</li> </ol> <p>Ready for Deployment!</p> <p>Once you've verified all these steps, your system is working correctly and you're ready to move on to containerization and deployment!</p>"},{"location":"custom-build/build-and-test/#next-steps","title":"Next Steps \ud83d\udd1c","text":"<p>Once everything is tested and working:</p> <ol> <li>Save any test outputs you want to keep</li> <li>Stop all your test processes (Flask, Stripe CLI, MQTT subscriber)</li> <li>Make sure your changes are committed to Git</li> <li>Move on to the deployment section where we'll containerize and deploy your working code!</li> </ol> <p>Continue to First Deployment \u2192 Need Help?</p>"},{"location":"custom-build/code-overview/","title":"Understanding the Code","text":"<p>Welcome to the code overview! Let's break down how our arcade payment system works under the hood. </p>"},{"location":"custom-build/code-overview/#system-architecture-overview","title":"System Architecture Overview","text":"<p>Our arcade payment system consists of several key components working together:</p> <pre><code>graph TD\n    A[Arcade Cabinet] --&gt;|MQTT| B[EMQX Cloud]\n    C[Payment QR Code] --&gt;|Stripe| D[Cloud API]\n    D --&gt;|MQTT| B\n    B --&gt;|Messages| A</code></pre>"},{"location":"custom-build/code-overview/#main-application-code","title":"Main Application Code","text":"<p>Our main application (<code>app.py</code>) handles payment processing and game control. Let's break it down section by section:</p>"},{"location":"custom-build/code-overview/#1-import-and-setup","title":"1. Import and Setup","text":"<pre><code>import os\nimport stripe\nimport paho.mqtt.client as mqtt\nfrom flask import Flask, request, jsonify\nfrom dotenv import load_dotenv\nimport awsgi\n</code></pre> <p>These imports give us:</p> <pre><code>* `stripe` - Payment processing\n* `paho.mqtt` - Messaging between components\n* `flask` - Web API framework\n* `dotenv` - Environment configuration\n* `awsgi` - AWS Lambda integration\n</code></pre>"},{"location":"custom-build/code-overview/#understanding-web-concepts","title":"Understanding Web Concepts \ud83c\udf10","text":"<p>What is an Endpoint?</p> <p>An endpoint is like a doorway into our application - it's a specific URL where other programs can interact with our system. Think of it like this:</p> <ul> <li>Your house has a front door, back door, and maybe a garage door</li> <li>Each door serves a different purpose (visitors, taking out trash, parking car)</li> <li>Similarly, our API has different endpoints for different purposes</li> <li>Each endpoint has a specific address (URL) and purpose</li> </ul> <p>For example, <code>/status</code> is like a doorbell - other systems can \"ring\" it to check if our system is working!</p> <p>What is a Webhook?</p> <p>A webhook is like having a friend who agreed to call you whenever something specific happens. In our system:</p> <ol> <li>We tell Stripe: \"Hey, call this phone number (URL) when someone pays\"</li> <li>When a player makes a payment, Stripe calls our webhook</li> <li>Our webhook answers the call and processes the payment</li> <li>Then it tells the arcade cabinet to add credits</li> </ol> <p>Think of it like ordering pizza:</p> <ul> <li>You give the pizza place your address (setting up the webhook)</li> <li>When the pizza is ready, they deliver it to you (Stripe calls our webhook)</li> <li>You receive the pizza and eat it (we process the payment data)</li> </ul> <p>Real World Example</p> <p>Let's say a player wants to play your arcade game:</p> <ol> <li>They scan the QR code</li> <li>They pay through Stripe</li> <li>Stripe calls our webhook to say \"Payment successful!\"</li> <li>Our webhook using our /addCredit endpoint to tell the arcade cabinet \"Add credits!\"</li> <li>The game starts!</li> </ol>"},{"location":"custom-build/code-overview/#2-mqtt-configuration","title":"2. MQTT Configuration","text":"<p>The MQTT client helps our system communicate with the arcade cabinet:</p> <pre><code>client = mqtt.Client()\nclient.username_pw_set(username=os.getenv(\"MQTT_USERNAME\"), \n                      password=os.getenv(\"MQTT_PASSWORD\"))\n</code></pre> <p>What is MQTT?</p> <p>MQTT is like a text messaging system for machines. It lets our cloud service \"text\" the arcade cabinet when someone pays!</p>"},{"location":"custom-build/code-overview/#3-key-endpoints","title":"3. Key Endpoints","text":""},{"location":"custom-build/code-overview/#status-check","title":"Status Check","text":"<p><pre><code>@app.route('/status', methods=['GET'])\ndef status():\n    return jsonify({\n        \"status\": \"up\",\n        \"message\": \"API is running\"\n    })\n</code></pre> This tells us if our system is running.</p>"},{"location":"custom-build/code-overview/#payment-creation","title":"Payment Creation","text":"<pre><code>@app.route('/create-payment-link', methods=['POST'])\ndef create_payment_link():\n    # Creates a QR code payment link\n</code></pre> <p>Create Payment Link</p> <ol> <li>Developer calls this endpoint from terminal</li> <li>Stripe creates a new payment page for this cabinet</li> <li>Stripe returns a URL that can be used to generate a QR Code</li> <li>QR Code can be printed or built into the attract screen</li> </ol>"},{"location":"custom-build/code-overview/#add-credit","title":"Add Credit","text":"<pre><code>@app.route('/addCredit', methods=['POST'])\ndef stripe_webhook():\n    # Handles successful payments\n</code></pre> <p>Add Credit</p> <ol> <li>Player scans QR code</li> <li>Makes payment through Stripe</li> <li>Success message sent to cabinet</li> <li>Game starts!</li> </ol> <p>Webhook Security</p> <p>Just like you wouldn't want strangers entering your house, we need to make sure only Stripe can use our webhook. We do this by checking a special signature (like a secret handshake) on every webhook request:</p> <pre><code>stripe.Webhook.construct_event(payload, sig_header, webhook_secret)\n</code></pre> <p>When someone pays:</p> <pre><code>1. Stripe tells our API running in the cloud\n2. We verify the payment message is from stripe\n3. Send \"coin pulse\" to our MQTT Messenger\n4. Our cabinet game listens for the \"coin pulse\" message.\n5. Cabinet adds credits\n</code></pre>"},{"location":"custom-build/code-overview/#game-over","title":"Game Over","text":"<pre><code>@app.route('/gameover', methods=['POST'])\ndef game_over():\n    # Handles end of game\n</code></pre> <p>When a game ends:</p> <pre><code>1. Cabinet sends signal to our MQTT messenger\n2. System updates status and the \"attract screen\" begins playing\n3. Ready for next player\n</code></pre>"},{"location":"custom-build/code-overview/#message-formats","title":"Message Formats","text":""},{"location":"custom-build/code-overview/#coin-pulse-signal","title":"Coin Pulse Signal","text":"<p>This tells the cabinet to add credits: <pre><code>{\n    \"machineId\": \"arcadeCabinet-123\",\n    \"credits\": 1,\n    \"timestamp\": \"2024-07-01T12:00:00Z\"\n}\n</code></pre></p>"},{"location":"custom-build/code-overview/#game-over-signal","title":"Game Over Signal","text":"<p>This tells the system the game is done: <pre><code>{\n    \"machineId\": \"arcadeCabinet-123\",\n    \"status\": \"game_over\",\n    \"timestamp\": \"2024-07-01T12:30:00Z\"\n}\n</code></pre></p>"},{"location":"custom-build/code-overview/#docker-configuration","title":"Docker Configuration","text":"<p>Our <code>Dockerfile</code> sets up the environment:</p> <pre><code>FROM public.ecr.aws/lambda/python:3.9\nCOPY app.py ca.crt ${LAMBDA_TASK_ROOT}\nCOPY requirements.txt ./\nRUN pip install -r requirements.txt\nCMD [\"app.lambda_handler\"]\n</code></pre> <p>Why Docker?</p> <p>Docker is like a shipping container for code. It ensures our code runs the same way everywhere!</p>"},{"location":"custom-build/code-overview/#required-libraries","title":"Required Libraries","text":"<p>Our <code>requirements.txt</code> lists what we need: <pre><code>Flask==3.0.3\npython-dotenv==1.0.1\nstripe==10.9.0\naws-wsgi==0.2.7\npaho-mqtt==1.6.1\n</code></pre></p> <p>What are Libraries? \ud83d\udcda</p> <p>Libraries are like recipe books for programmers. Instead of writing all the code from scratch, we can use pre-written code that others have created and tested:</p> <ul> <li><code>Flask</code> is like a cookbook for building web services</li> <li><code>stripe</code> is a recipe book for handling payments</li> <li><code>paho.mqtt</code> contains recipes for sending messages between machines</li> <li><code>python-dotenv</code> helps us keep our secret ingredients (passwords) safe</li> <li><code>aws-wsgi</code> helps our code work with AWS's kitchen (cloud servers)</li> </ul> <p>Just like you wouldn't want to figure out a cake recipe from scratch every time, programmers use libraries to avoid \"reinventing the wheel\"!</p> <p>Real World Example</p> <p>Imagine you're baking a cake:</p> <ul> <li>Instead of creating a recipe from scratch, you use a cookbook (library)</li> <li>The cookbook tells you exactly what ingredients you need</li> <li>It gives you tested steps to follow</li> <li>You get consistent results every time</li> </ul> <p>That's exactly what our <code>requirements.txt</code> file does - it's like our shopping list of cookbooks!</p>"},{"location":"custom-build/code-overview/#security-features","title":"Security Features","text":"<p>The code includes several security measures:</p> <pre><code>* SSL/TLS encryption for MQTT\n* Stripe webhook verification\n* Environment variable protection\n* AWS Lambda security\n</code></pre> <p>API Keys</p> <p>Never share your API keys or passwords! They should always stay secret.</p>"},{"location":"custom-build/code-overview/#code-flow-examples","title":"Code Flow Examples","text":""},{"location":"custom-build/code-overview/#payment-flow","title":"Payment Flow","text":"<pre><code>1. Player scans QR code\n2. System creates Stripe payment\n3. Player pays through Stripe\n4. Webhook receives success\n5. MQTT sends coin pulse\n6. Game starts\n</code></pre>"},{"location":"custom-build/code-overview/#game-end-flow","title":"Game End Flow","text":"<pre><code>1. Game finishes\n2. Cabinet sends game over\n3. System updates status\n4. Ready for next player\n</code></pre>"},{"location":"custom-build/code-overview/#next-steps","title":"Next Steps","text":"<p>Now that you understand the code:</p> <pre><code>1. Try making small changes\n2. Test different features\n3. Add your own improvements\n</code></pre> <p>Start Making Changes \u2192 Back to Overview</p> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review the code comments</li> <li>Try our example exercises</li> </ul>"},{"location":"custom-build/first-deployment/","title":"Your First Deployment \ud83d\ude80","text":"<p>Now that your code is tested and working locally, it's time to package it up and get it ready for AWS! We'll create a Docker container and push it to Amazon's Elastic Container Registry (ECR).</p>"},{"location":"custom-build/first-deployment/#what-is-docker","title":"What is Docker? \ud83d\udc33","text":"<p>Think of Docker Like This</p> <p>Imagine you're moving to a new house:</p> <ul> <li>Instead of moving furniture piece by piece, you put everything in a shipping container</li> <li>The container has everything needed - furniture, appliances, decorations</li> <li>The container works the same no matter what truck carries it</li> </ul> <p>Docker does the same thing for your code:</p> <ul> <li>Instead of installing pieces separately, everything goes in a container</li> <li>The container has your code, Python, libraries - everything it needs</li> <li>The container runs the same way everywhere - your computer, AWS, anywhere!</li> </ul>"},{"location":"custom-build/first-deployment/#prerequisites","title":"Prerequisites \u2705","text":"<p>Before starting, make sure you have:</p> <ul> <li>[x] Locally tested code (from previous section)</li> <li>[x] Docker Desktop installed and running</li> <li>[x] AWS CLI installed and configured</li> <li>[x] Git repository with your latest code</li> </ul> <p>Quick Docker Check</p> <p>Run this command to verify Docker is working: <pre><code>docker --version\n</code></pre> If you see a version number, you're good to go!</p>"},{"location":"custom-build/first-deployment/#step-1-prepare-your-code","title":"Step 1: Prepare Your Code \ud83d\udcdd","text":"<ol> <li> <p>Make sure your code is committed to Git:    <pre><code>git status                  # Check what needs committing\ngit add .                   # Add all changes\ngit commit -m \"Ready for deployment\"  # Save changes\n</code></pre></p> </li> <li> <p>Verify your project structure:    <pre><code>your-project/\n\u251c\u2500\u2500 app.py                 # Main application\n\u251c\u2500\u2500 requirements.txt       # Python dependencies\n\u251c\u2500\u2500 Dockerfile            # Docker configuration\n\u251c\u2500\u2500 .env.local            # Local environment variables\n\u2514\u2500\u2500 ca.crt                # MQTT certificate\n</code></pre></p> </li> </ol>"},{"location":"custom-build/first-deployment/#step-2-build-your-docker-image","title":"Step 2: Build Your Docker Image \ud83c\udfd7\ufe0f","text":"<ol> <li>Build your image locally:    <pre><code>docker build --no-cache -t arcade-payment-api .\n</code></pre></li> </ol> <p>What's Happening?</p> <ul> <li><code>docker build</code> - Creates your container</li> <li><code>--no-cache</code> - Ensures fresh build</li> <li><code>-t arcade-payment-api</code> - Names your container</li> <li><code>.</code> - Uses current directory</li> </ul> <ol> <li> <p>Test your Docker image locally:    <pre><code>docker run -p 8080:8080 arcade-payment-api\n</code></pre></p> </li> <li> <p>In another terminal, test the API:    <pre><code>curl http://localhost:8080/status\n</code></pre></p> </li> </ol> <p>You should see:    <pre><code>{\n  \"status\": \"up\",\n  \"message\": \"API is running\"\n}\n</code></pre></p>"},{"location":"custom-build/first-deployment/#step-3-prepare-for-aws-ecr","title":"Step 3: Prepare for AWS ECR \ud83c\udf25\ufe0f","text":"<ol> <li> <p>Login to AWS ECR (replace <code>region</code> with your AWS region):    <pre><code>aws ecr get-login-password --region region | docker login --username AWS --password-stdin your-account-id.dkr.ecr.region.amazonaws.com\n</code></pre></p> </li> <li> <p>Create an ECR repository:    <pre><code>aws ecr create-repository --repository-name arcade-payment-api --region region\n</code></pre></p> </li> <li> <p>Note your repository URI:    <pre><code>your-account-id.dkr.ecr.region.amazonaws.com/arcade-payment-api\n</code></pre></p> </li> </ol> <p>Finding Your Account ID</p> <p>You can find your AWS account ID in the AWS Console or by running: <pre><code>aws sts get-caller-identity\n</code></pre></p>"},{"location":"custom-build/first-deployment/#step-4-push-to-aws-ecr","title":"Step 4: Push to AWS ECR \ud83d\udce4","text":"<ol> <li> <p>Tag your Docker image:    <pre><code>docker tag arcade-payment-api:latest your-account-id.dkr.ecr.region.amazonaws.com/arcade-payment-api:latest\n</code></pre></p> </li> <li> <p>Push to ECR:    <pre><code>docker push your-account-id.dkr.ecr.region.amazonaws.com/arcade-payment-api:latest\n</code></pre></p> </li> </ol> <p>Why Tag?</p> <p>Tagging is like putting a shipping label on your container:</p> <ul> <li>Tells Docker where to send it</li> <li>Includes version information</li> <li>Makes it easy to find in ECR</li> </ul>"},{"location":"custom-build/first-deployment/#special-notes-for-m1m2m3-mac-users","title":"Special Notes for M1/M2/M3 Mac Users \ud83c\udf4e","text":"<p>If you're using a newer Mac with Apple Silicon (M1, M2, or M3 chip):</p> <ol> <li> <p>Build for the right architecture:    <pre><code>docker buildx build --platform linux/amd64 --no-cache -t arcade-payment-api .\n</code></pre></p> </li> <li> <p>Then continue with tagging and pushing as normal.</p> </li> </ol> <p>Why Different?</p> <ul> <li>New Macs use different processor architecture (ARM) than AWS (x86)</li> <li>We need to build specifically for AWS's architecture</li> <li>The <code>--platform</code> flag handles this for us</li> </ul>"},{"location":"custom-build/first-deployment/#troubleshooting","title":"Troubleshooting \ud83d\udd27","text":""},{"location":"custom-build/first-deployment/#common-docker-issues","title":"Common Docker Issues","text":"<ul> <li> <p>Build Fails</p> <ul> <li>Check Dockerfile syntax</li> <li>Verify all files are present</li> <li>Look for Python dependency issues</li> </ul> </li> <li> <p>Push Fails</p> <ul> <li>Check AWS credentials</li> <li>Verify repository exists</li> <li>Confirm login to ECR</li> </ul> </li> <li> <p>Architecture Issues</p> <ul> <li>Use <code>--platform</code> flag on Apple Silicon</li> <li>Check Docker Desktop settings</li> <li>Verify AWS region settings</li> </ul> </li> </ul> <p>Need Help?</p> <ul> <li>Review error messages carefully</li> <li>Check Docker logs</li> <li>See our Troubleshooting Guide</li> </ul>"},{"location":"custom-build/first-deployment/#success-criteria","title":"Success Criteria \u2728","text":"<p>Your deployment is ready when:</p> <ol> <li>\u2705 Docker image builds successfully</li> <li>\u2705 Local container tests pass</li> <li>\u2705 Image is pushed to ECR</li> <li>\u2705 You can see your image in AWS Console</li> </ol>"},{"location":"custom-build/first-deployment/#next-steps","title":"Next Steps \ud83c\udfaf","text":"<p>Now that your container is in ECR:</p> <ol> <li>Save your repository URI</li> <li>Keep your environment variables handy</li> <li>Get ready to set up your Lambda function!</li> </ol> <p>Set Up AWS Lambda \u2192 Back to Build and Test</p>"},{"location":"custom-build/overview/","title":"Custom Build Overview","text":"<p>Welcome to the Custom Build Path!  This is where you'll learn to build your arcade payment system from scratch, giving you complete control over how it works.</p>"},{"location":"custom-build/overview/#what-youll-build","title":"What You'll Build","text":"<p>You're going to create a cloud-based system that:</p> <ul> <li>Generates QR codes for payments</li> <li>Processes payments securely with Stripe</li> <li>Sends signals to start and stop games</li> <li>Keeps track of credits and game sessions</li> </ul> <p>Learning Opportunity</p> <p>By building this yourself, you'll learn real-world programming skills that professional developers use every day!</p>"},{"location":"custom-build/overview/#system-architecture","title":"System Architecture","text":"<p>Your system will have these main components:</p> <ol> <li> <p>Payment API (Python + Flask)</p> <ul> <li>Creates payment links</li> <li>Processes successful payments</li> <li>Manages game sessions</li> <li>Runs in AWS Lambda</li> </ul> </li> <li> <p>Messaging System (MQTT)</p> <ul> <li>Sends signals between components</li> <li>Controls when games start/stop</li> <li>Manages arcade cabinet state</li> </ul> </li> <li> <p>Docker Container</p> <ul> <li>Packages your code</li> <li>Makes deployment easy</li> <li>Runs consistently everywhere</li> </ul> </li> </ol> <p>[!INSERT IMAGE: Basic architecture diagram showing components]</p>"},{"location":"custom-build/overview/#technical-stack","title":"Technical Stack","text":"<p>Here's what we'll use to build the system:</p>"},{"location":"custom-build/overview/#programming-language","title":"Programming Language","text":"<ul> <li>Python 3.9<ul> <li>Easy to learn</li> <li>Powerful libraries</li> <li>Great for APIs</li> </ul> </li> </ul>"},{"location":"custom-build/overview/#web-framework","title":"Web Framework","text":"<ul> <li>Flask<ul> <li>Lightweight</li> <li>Easy to understand</li> <li>Perfect for APIs</li> </ul> </li> </ul>"},{"location":"custom-build/overview/#payment-processing","title":"Payment Processing","text":"<ul> <li>Stripe<ul> <li>Handles payments securely</li> <li>Creates payment links</li> <li>Processes credit cards</li> </ul> </li> </ul>"},{"location":"custom-build/overview/#message-broker","title":"Message Broker","text":"<ul> <li>MQTT with EMQX<ul> <li>Sends signals between components</li> <li>Fast and reliable</li> <li>Industry standard</li> </ul> </li> </ul>"},{"location":"custom-build/overview/#containerization","title":"Containerization","text":"<ul> <li>Docker<ul> <li>Packages your code</li> <li>Makes deployment easy</li> <li>Works everywhere</li> </ul> </li> </ul>"},{"location":"custom-build/overview/#cloud-platform","title":"Cloud Platform","text":"<ul> <li>AWS Lambda<ul> <li>Runs your code in the cloud</li> <li>Scales automatically</li> <li>Stays in free tier</li> </ul> </li> </ul>"},{"location":"custom-build/overview/#project-structure","title":"Project Structure","text":"<p>Here's how our project files are organized:</p> <pre><code>arcade-payment-api/\n\u2502\n\u251c\u2500\u2500 app.py              # Main application code\n\u251c\u2500\u2500 Dockerfile          # Instructions for building Docker image\n\u251c\u2500\u2500 requirements.txt    # Python package dependencies\n\u251c\u2500\u2500 ca.crt             # SSL certificate for MQTT\n\u2514\u2500\u2500 .env.local         # Local environment variables\n</code></pre>"},{"location":"custom-build/overview/#the-build-process","title":"The Build Process","text":"<p>You'll build this system in these stages:</p> <ol> <li> <p>Set Up Development Environment</p> <ul> <li>Install required software</li> <li>Configure your editor</li> <li>Set up version control</li> </ul> </li> <li> <p>Create the Payment API</p> <ul> <li>Build Flask application</li> <li>Integrate Stripe payments</li> <li>Handle webhooks</li> </ul> </li> <li> <p>Add MQTT Messaging</p> <ul> <li>Set up MQTT client</li> <li>Implement signal handling</li> <li>Test messaging</li> </ul> </li> <li> <p>Containerize the Application</p> <ul> <li>Create Docker container</li> <li>Build the image</li> <li>Test locally</li> </ul> </li> <li> <p>Deploy to AWS</p> <ul> <li>Configure AWS Lambda</li> <li>Push container image</li> <li>Set up API Gateway</li> </ul> </li> </ol>"},{"location":"custom-build/overview/#required-knowledge","title":"Required Knowledge","text":"<p>Here's what you should know (or be ready to learn):</p>"},{"location":"custom-build/overview/#must-have","title":"Must Have","text":"<ul> <li>Basic Python syntax</li> <li>Command line basics</li> <li>Git fundamentals</li> </ul>"},{"location":"custom-build/overview/#will-learn","title":"Will Learn","text":"<ul> <li>API development</li> <li>Cloud services</li> <li>Docker containers</li> <li>Payment processing</li> <li>Message queuing</li> </ul> <p>New to Programming?</p> <p>Don't worry if some of this looks unfamiliar! We'll explain everything step-by-step.</p>"},{"location":"custom-build/overview/#environment-setup","title":"Environment Setup","text":"<p>You'll need these tools installed:</p> <ol> <li>Python 3.9+</li> <li>Visual Studio Code</li> <li>Docker Desktop</li> <li>Git</li> </ol> <p>System Requirements</p> <ul> <li>8GB RAM minimum</li> <li>10GB free disk space</li> <li>Reliable internet connection</li> </ul>"},{"location":"custom-build/overview/#next-steps","title":"Next Steps","text":"<p>Ready to start building? Here's what to do next:</p> <ol> <li>Understanding the Code - Learn how the system works</li> <li>Making Changes - Customize the system</li> <li>Building &amp; Deploying - Get your code running</li> </ol>"},{"location":"custom-build/overview/#getting-help","title":"Getting Help","text":"<p>If you get stuck:</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review the code comments</li> <li>Look up error messages</li> </ul> <p>Need Help?</p> <p>Remember: Getting stuck is normal when learning to code. Don't be afraid to ask for help!</p>"},{"location":"custom-build/overview/#example-projects","title":"Example Projects","text":"<p>Here are some ways students have extended this project:</p> <ul> <li>Adding custom game modes</li> <li>Creating admin dashboards</li> <li>Implementing player stats</li> <li>Building tournament systems</li> </ul> <p>Continue to Code Overview \u2192 Back to Choose Your Path</p>"},{"location":"custom-build/aws-lambda/api-gateway-intro/","title":"Understanding API Gateway","text":"<p>Welcome to the API Gateway guide! Let's learn about this important service that connects your arcade cabinet to your Lambda function. </p>"},{"location":"custom-build/aws-lambda/api-gateway-intro/#what-is-api-gateway","title":"What is API Gateway?","text":"<p>Think of API Gateway as a smart receptionist for your arcade system:</p> <ul> <li>It receives requests from arcade cabinets</li> <li>Routes them to the right Lambda function</li> <li>Handles security and authentication</li> <li>Manages multiple connections</li> <li>Tracks usage and performance</li> </ul> <p>Real World Example</p> <p>Imagine a hotel front desk:</p> <ul> <li>Guests (arcade cabinets) arrive with requests</li> <li>The receptionist (API Gateway) checks their ID</li> <li>Then directs them to the right room (Lambda function)</li> <li>Keeps track of who's visiting</li> <li>Makes sure everything runs smoothly</li> </ul>"},{"location":"custom-build/aws-lambda/api-gateway-intro/#why-do-we-need-it","title":"Why Do We Need It?","text":"<p>API Gateway is essential because it:</p> <ol> <li>Creates a stable URL for your API</li> <li>Manages security and access</li> <li>Handles multiple requests at once</li> <li>Provides usage metrics</li> <li>Stays within AWS free tier</li> </ol> <p>Free Tier Benefits</p> <p>API Gateway's free tier includes:</p> <ul> <li>1 million API calls per month</li> <li>Built-in DDoS protection</li> <li>Request validation</li> <li>Response caching</li> </ul>"},{"location":"custom-build/aws-lambda/api-gateway-intro/#api-gateway-concepts","title":"API Gateway Concepts","text":""},{"location":"custom-build/aws-lambda/api-gateway-intro/#1-endpoints","title":"1. Endpoints","text":"<p>These are the URLs your arcade cabinet will use:</p> <ul> <li><code>/status</code> - Check if system is running</li> <li><code>/create-payment-link</code> - Generate QR codes</li> <li><code>/addCredit</code> - Process payments</li> <li><code>/gameover</code> - Handle game completion</li> </ul>"},{"location":"custom-build/aws-lambda/api-gateway-intro/#2-methods","title":"2. Methods","text":"<p>Different types of requests:</p> <ul> <li>GET - Retrieve information</li> <li>POST - Send information</li> <li>PUT - Update information</li> <li>DELETE - Remove information</li> </ul>"},{"location":"custom-build/aws-lambda/api-gateway-intro/#3-stages","title":"3. Stages","text":"<p>Different versions of your API:</p> <ul> <li>Development - For testing</li> <li>Production - For real use</li> <li>Custom stages - For special needs</li> </ul>"},{"location":"custom-build/aws-lambda/api-gateway-intro/#4-integrations","title":"4. Integrations","text":"<p>How API Gateway connects to Lambda:</p> <ul> <li>Proxy integration - Passes everything through</li> <li>Custom integration - More control but complex</li> </ul>"},{"location":"custom-build/aws-lambda/api-gateway-intro/#security-features","title":"Security Features","text":"<p>API Gateway protects your system with:</p> <ol> <li> <p>Authentication</p> <ul> <li>API keys</li> <li>IAM roles</li> <li>Custom authorizers</li> </ul> </li> <li> <p>Throttling</p> <ul> <li>Rate limiting</li> <li>Burst limiting</li> <li>Per-client limits</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Request logging</li> <li>Error tracking</li> <li>Usage metrics</li> </ul> </li> </ol>"},{"location":"custom-build/aws-lambda/api-gateway-intro/#next-steps","title":"Next Steps","text":"<p>Now that you understand API Gateway:</p> <ol> <li>Set up your own API Gateway</li> <li>Configure security settings</li> <li>Test the integration</li> </ol> <p>Continue to API Gateway Setup \u2192 Back to Lambda Setup</p> <p>Keep Learning</p> <ul> <li>Explore API Gateway dashboard</li> <li>Read CloudWatch logs</li> <li>Test different configurations</li> </ul>"},{"location":"custom-build/aws-lambda/lambda-setup/","title":"Setting Up AWS Lambda","text":"<p>Welcome to the AWS Lambda setup guide! This is where we'll create the cloud API that powers your arcade cabinet. This API handles everything from payments to game control! </p> <p>Important: Read First!</p> <p>You can only complete this guide AFTER you have:</p> <ul> <li>Either pulled the pre-built Docker image (Quick Deploy)</li> <li>OR built your own image (Custom Build)</li> <li>AND pushed the image to your Container Registry</li> </ul>"},{"location":"custom-build/aws-lambda/lambda-setup/#what-is-aws-lambda","title":"What is AWS Lambda?","text":"<p>AWS Lambda hosts your Artcade API in the cloud. Think of it as your arcade's brain that:</p> <ul> <li>Processes payments from Stripe</li> <li>Sends \"coin pulse\" signals to start games</li> <li>Handles \"game over\" signals</li> <li>Creates payment QR codes</li> <li>Monitors cabinet status</li> <li>Manages multiple arcade machines</li> </ul> <p>Why Lambda for Our API?</p> <ul> <li>No servers to manage - AWS handles everything</li> <li>Only pay when your API is actually being used</li> <li>Automatically handles multiple cabinets</li> <li>Built-in security and monitoring</li> <li>Perfect for APIs that handle occasional requests</li> </ul>"},{"location":"custom-build/aws-lambda/lambda-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>Completed Basic AWS Setup</li> <li>Set up your Container Registry</li> <li>Docker image ready in your registry</li> <li>IAM user with Lambda permissions</li> </ul>"},{"location":"custom-build/aws-lambda/lambda-setup/#creating-your-lambda-function","title":"Creating Your Lambda Function","text":""},{"location":"custom-build/aws-lambda/lambda-setup/#step-1-open-lambda-service","title":"STEP 1. Open Lambda Service","text":"<ol> <li>Sign in to AWS Console</li> <li>Search for \"Lambda\"</li> <li>Click \"Create function\"</li> </ol>"},{"location":"custom-build/aws-lambda/lambda-setup/#step-2-configure-function","title":"STEP 2. Configure Function","text":"<ol> <li>Select \"Container image\"</li> <li>Set function name to \"artcade-api\"</li> <li>Select your container image URI from the registry</li> <li>Click \"Create function\"</li> </ol>"},{"location":"custom-build/aws-lambda/lambda-setup/#step-3-configure-environment-variables","title":"STEP 3. Configure Environment Variables","text":"<ol> <li>Navigate to the Configuration tab</li> <li>Click on Environment Variables</li> <li>Add the following variables:<ul> <li><code>STRIPE_API_KEY</code>: Your Stripe secret key</li> <li><code>STRIPE_WEBHOOK_SECRET</code>: Your Stripe webhook secret</li> <li><code>MQTT_USERNAME</code>: Your EMQX username</li> <li><code>MQTT_PASSWORD</code>: Your EMQX password</li> <li><code>MQTT_BROKER</code>: Your EMQX broker address</li> <li><code>MQTT_PORT</code>: Usually 8883 for SSL/TLS connection</li> <li><code>PRICE_ID</code>: Your Stripe Price ID for the game</li> </ul> </li> </ol> <p>Security Best Practices</p> <p>Always use AWS Secrets Manager or AWS Systems Manager Parameter Store for sensitive information like API keys and passwords in a production environment.</p>"},{"location":"custom-build/aws-lambda/lambda-setup/#testing-your-lambda","title":"Testing Your Lambda","text":"<ol> <li>Navigate to the Test tab</li> <li>Create a new test event</li> <li>Select API Gateway HTTP API template</li> <li>Save and run the test</li> <li>Check results in the execution log</li> </ol>"},{"location":"custom-build/aws-lambda/lambda-setup/#monitoring-setup","title":"Monitoring Setup","text":"<ol> <li> <p>Set Up CloudWatch Monitoring</p> <ol> <li>Navigate to CloudWatch in AWS Console</li> <li>Create alarms for:<ul> <li>Error rates</li> <li>Function duration</li> <li>Invocation counts</li> </ul> </li> <li>Set notification thresholds</li> </ol> </li> </ol> <p>Free Tier Limits</p> <ul> <li>1M free requests per month</li> <li>400,000 GB-seconds compute time</li> <li>Perfect for arcade cabinets!</li> </ul>"},{"location":"custom-build/aws-lambda/lambda-setup/#next-steps","title":"Next Steps","text":"<p>Once your Lambda function is set up, you'll need to:</p> <ol> <li>Understand how API Gateway works</li> <li>Configure API Gateway for your Lambda</li> <li>Test the complete system</li> </ol> <p>Continue to API Gateway Introduction \u2192 Back to Container Registry</p>"},{"location":"custom-build/aws-lambda/lambda-setup/#troubleshooting","title":"Troubleshooting","text":"<p>Common Lambda issues:</p> <ol> <li> <p>Container errors: </p> <ul> <li>Check your Docker image</li> <li>Verify the image URI</li> <li>Look at CloudWatch logs</li> </ul> </li> <li> <p>Permission errors: </p> <ul> <li>Check IAM roles</li> <li>Verify execution permissions</li> <li>Review security settings</li> </ul> </li> <li> <p>Environment issues:</p> <ul> <li>Verify all variables are set</li> <li>Check for typos in values</li> <li>Confirm secrets are properly stored</li> </ul> </li> </ol> <p>Need Help?</p> <ul> <li>Check Troubleshooting Guide</li> <li>Review CloudWatch logs</li> <li>Ask your teacher or mentor</li> </ul>"},{"location":"custom-build/aws-lambda/setup-gateway/","title":"Setting Up API Gateway","text":"<p>Time to connect your Lambda function to the internet! We'll start by creating the API Gateway trigger and then set up each endpoint. </p>"},{"location":"custom-build/aws-lambda/setup-gateway/#getting-started-create-api-gateway-trigger","title":"Getting started: Create API Gateway Trigger","text":"<p>First, create the API Gateway trigger from your Lambda function:</p> <ol> <li>Go to your Lambda function in AWS Console</li> <li>Click on the \"Configuration\" tab</li> <li>Select \"Triggers\" from the left menu</li> <li>Click \"Add trigger\"</li> <li> <p>In the trigger configuration:</p> <ul> <li>Select \"API Gateway\" from the dropdown</li> <li>Under \"API\", select \"Create an API\"</li> <li>Choose \"HTTP API\" (it's simpler and cheaper!)</li> <li>For \"Security\", select \"Open\"</li> </ul> </li> <li> <p>Click \"Add\" to create the trigger</p> </li> </ol> <p>About HTTP APIs</p> <p>HTTP APIs are perfect for our arcade because:</p> <ul> <li>They're cost-effective</li> <li>They're simpler to manage</li> <li>They have great performance</li> <li>They work well with Lambda</li> </ul>"},{"location":"custom-build/aws-lambda/setup-gateway/#creating-resources-and-methods","title":"Creating Resources and Methods","text":""},{"location":"custom-build/aws-lambda/setup-gateway/#step-1-create-a-new-resource","title":"Step 1: Create a New Resource","text":"<ol> <li>Click \"Create resource\" button</li> <li> <p>In the resource setup:</p> <ul> <li>Set Resource Path to \"/\" (root)</li> <li>Give your resource a name that matches an endpoint in your code</li> <li>Leave \"Proxy Resource\" and \"CORS\" unchecked</li> </ul> </li> <li> <p>Click \"Create resource\"</p> </li> </ol> <p>Resource Names</p> <p>Your resource name should match the endpoints in your code:</p> <ul> <li>/status</li> <li>/create-payment-link</li> <li>/addCredit</li> <li>/gameover</li> </ul>"},{"location":"custom-build/aws-lambda/setup-gateway/#step-2-create-and-configure-method","title":"Step 2: Create and Configure Method","text":"<p>After creating your resource:</p> <ol> <li>Click on your newly created resource in the left sidebar</li> <li>Click \"Create method\" button</li> <li> <p>In the method setup:</p> <ul> <li>Choose the appropriate HTTP method (GET, POST) from dropdown</li> <li>Select \"Lambda Function\" for Integration type</li> <li>Enable \"Lambda Proxy integration\"</li> <li>Select your Lambda function from the dropdown</li> </ul> </li> <li> <p>Click \"Create method\"</p> </li> </ol> <p>Important Settings</p> <p>Make sure you:</p> <ul> <li>Choose the correct HTTP method for each endpoint</li> <li>Select Lambda Function integration type</li> <li>Enable Lambda Proxy integration</li> <li>Select your specific Lambda function</li> </ul>"},{"location":"custom-build/aws-lambda/setup-gateway/#step-3-repeat-for-each-endpoint","title":"Step 3: Repeat for Each Endpoint","text":"<p>Create resources and methods for each endpoint:</p> <ol> <li> <p>Status Endpoint:</p> <ul> <li>Resource path: /status</li> <li>Method: GET</li> </ul> </li> <li> <p>Payment Link Endpoint:</p> <ul> <li>Resource path: /create-payment-link</li> <li>Method: POST</li> </ul> </li> <li> <p>Add Credit Endpoint:</p> <ul> <li>Resource path: /addCredit</li> <li>Method: POST</li> </ul> </li> <li> <p>Game Over Endpoint:</p> <ul> <li>Resource path: /gameover</li> <li>Method: POST</li> </ul> </li> </ol>"},{"location":"custom-build/aws-lambda/setup-gateway/#deploying-your-api","title":"Deploying Your API","text":"<p>After creating all resources and methods:</p> <ol> <li>Click the \"Deploy API\" button</li> <li> <p>In the deployment popup:</p> <ul> <li>Select \"[New Stage]\" if this is your first deployment</li> <li>Enter a stage name (or leave as \"default\")</li> <li>Add a description if you want</li> </ul> </li> <li> <p>Click \"Deploy\"</p> </li> </ol> <p>Get Your URL</p> <p>After deployment, you'll get a URL that looks like:</p> <pre><code>https://abc123def.execute-api.us-west-2.amazonaws.com/default\n</code></pre> <p>Save this URL - you'll need it for:</p> <ul> <li>Testing your API</li> <li>Setting up Stripe webhooks</li> <li>Configuring your arcade cabinet</li> </ul>"},{"location":"custom-build/aws-lambda/setup-gateway/#testing-your-setup","title":"Testing Your Setup","text":"<p>Test each endpoint using your new API URL:</p>"},{"location":"custom-build/aws-lambda/setup-gateway/#1-status-check","title":"1. Status Check","text":"<pre><code>curl https://your-api-url/status\n</code></pre>"},{"location":"custom-build/aws-lambda/setup-gateway/#2-payment-link-creation","title":"2. Payment Link Creation","text":"<pre><code>curl -X POST https://your-api-url/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre>"},{"location":"custom-build/aws-lambda/setup-gateway/#3-game-over-signal","title":"3. Game Over Signal","text":"<pre><code>curl -X POST https://your-api-url/gameover \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre>"},{"location":"custom-build/aws-lambda/setup-gateway/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"custom-build/aws-lambda/setup-gateway/#method-not-found","title":"Method Not Found","text":"<ul> <li>Check that you created the resource correctly</li> <li>Verify HTTP method matches your code</li> <li>Ensure Lambda proxy integration is enabled</li> </ul>"},{"location":"custom-build/aws-lambda/setup-gateway/#lambda-permission-error","title":"Lambda Permission Error","text":"<ul> <li>Check that API Gateway has permission to invoke Lambda</li> <li>Verify Lambda function name is correct</li> <li>Review IAM roles and permissions</li> </ul>"},{"location":"custom-build/aws-lambda/setup-gateway/#deployment-issues","title":"Deployment Issues","text":"<ul> <li>Make sure all methods are properly configured</li> <li>Check that you've deployed to a stage</li> <li>Verify the API URL you're using matches your deployment stage</li> </ul> <p>Need Help?</p> <ul> <li>Check Troubleshooting Guide</li> <li>Review CloudWatch logs</li> <li>Ask your teacher or mentor</li> </ul>"},{"location":"custom-build/aws-lambda/setup-gateway/#next-steps","title":"Next Steps","text":"<p>After deploying your API:</p> <ol> <li>Save your API URL</li> <li>Update Stripe webhook settings</li> <li>Test all endpoints</li> <li>Monitor for issues</li> </ol> <p>Continue to Testing \u2192 Back to API Gateway Introduction</p>"},{"location":"custom-build/aws-lambda/test-deployment/","title":"Testing Your Deployment","text":"<p>Now that your API is deployed, let's make sure everything works! We'll test each part of your system step by step. </p>"},{"location":"custom-build/aws-lambda/test-deployment/#prerequisites","title":"Prerequisites \u2705","text":"<p>Before starting, make sure you have:</p> <ul> <li>Your API Gateway URL (from previous step)</li> <li>Stripe CLI installed</li> <li>MQTT client (Mosquitto) installed</li> <li>Test environment variables configured in Lambda</li> </ul> <p>Keep Your Tools Ready</p> <p>You'll need several terminal windows open for testing. Consider using VSCode's integrated terminal with split panes to keep everything organized!</p>"},{"location":"custom-build/aws-lambda/test-deployment/#part-1-basic-api-testing","title":"Part 1: Basic API Testing \ud83d\udd0d","text":"<p>Let's start by making sure your API endpoints are accessible.</p>"},{"location":"custom-build/aws-lambda/test-deployment/#1-test-status-endpoint","title":"1. Test Status Endpoint","text":"<pre><code>curl https://your-api-url/status\n</code></pre> <p>Expected response: <pre><code>{\n    \"status\": \"up\",\n    \"message\": \"API is running\"\n}\n</code></pre></p> <p>Getting a 404?</p> <p>If you get a \"Not Found\" error:</p> <ul> <li>Double-check your API URL</li> <li>Verify the endpoint is deployed</li> <li>Check Lambda logs for errors</li> </ul>"},{"location":"custom-build/aws-lambda/test-deployment/#part-2-payment-flow-testing","title":"Part 2: Payment Flow Testing \ud83d\udcb3","text":""},{"location":"custom-build/aws-lambda/test-deployment/#1-create-payment-link","title":"1. Create Payment Link","text":"<pre><code>curl -X POST https://your-api-url/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre> <p>Expected response: <pre><code>{\n    \"url\": \"https://checkout.stripe.com/c/pay/cs_test_...\"\n}\n</code></pre></p>"},{"location":"custom-build/aws-lambda/test-deployment/#2-test-payment-processing","title":"2. Test Payment Processing","text":"<ol> <li> <p>Start Stripe webhook forwarding: <pre><code>stripe listen --forward-to https://your-api-url/addCredit\n</code></pre></p> </li> <li> <p>Open the payment URL in your browser</p> </li> <li> <p>Complete a test payment:</p> <ul> <li>Card number: 4242 4242 4242 4242</li> <li>Any future expiry date</li> <li>Any 3-digit CVC</li> <li>Any ZIP code</li> </ul> </li> </ol> <p>Test Cards</p> <p>Stripe provides several test cards for different scenarios:</p> <ul> <li>4242 4242 4242 4242 - Successful payment</li> <li>4000 0000 0000 9995 - Declined payment</li> <li>Find more in the Stripe testing docs</li> </ul>"},{"location":"custom-build/aws-lambda/test-deployment/#part-3-mqtt-message-testing","title":"Part 3: MQTT Message Testing \ud83d\udce1","text":""},{"location":"custom-build/aws-lambda/test-deployment/#1-watch-for-messages","title":"1. Watch for Messages","text":"<p>In a new terminal, subscribe to MQTT topics:</p> <pre><code>mosquitto_sub -h your.emqx.cloud.broker -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  -t \"arcade/machine/+/gameover\" \\\n  --cafile emqx.ca \\\n  -u \"your_username\" -P \"your_password\"\n</code></pre>"},{"location":"custom-build/aws-lambda/test-deployment/#2-test-game-over-signal","title":"2. Test Game Over Signal","text":"<pre><code>curl -X POST https://your-api-url/gameover \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre> <p>Watch your MQTT subscriber terminal for the game over message!</p>"},{"location":"custom-build/aws-lambda/test-deployment/#part-4-end-to-end-testing","title":"Part 4: End-to-End Testing \ud83d\udd04","text":"<p>Time to test the complete flow! You should see:</p> <ol> <li>Payment link creation \u2713</li> <li>Successful payment \u2713</li> <li>MQTT coin pulse message \u2713</li> <li>Game over signal \u2713</li> <li>MQTT game over message \u2713</li> </ol> <p>Working System</p> <p>If you see all these steps working, congratulations! Your arcade payment system is ready for action! \ud83c\udfae</p>"},{"location":"custom-build/aws-lambda/test-deployment/#monitoring-and-logs","title":"Monitoring and Logs \ud83d\udcca","text":""},{"location":"custom-build/aws-lambda/test-deployment/#check-cloudwatch-logs","title":"Check CloudWatch Logs","text":"<ol> <li>Go to AWS Console \u2192 CloudWatch \u2192 Log Groups</li> <li>Find your Lambda function's log group</li> <li>Look for any errors or warnings</li> </ol>"},{"location":"custom-build/aws-lambda/test-deployment/#monitor-stripe-dashboard","title":"Monitor Stripe Dashboard","text":"<ol> <li>Go to Stripe Dashboard \u2192 Events</li> <li>Look for successful test payments</li> <li>Verify webhook deliveries</li> </ol> <p>Log Investigation</p> <p>If something's not working, logs are your best friend! They'll tell you exactly where things went wrong.</p>"},{"location":"custom-build/aws-lambda/test-deployment/#common-issues-and-solutions","title":"Common Issues and Solutions \ud83d\udd27","text":""},{"location":"custom-build/aws-lambda/test-deployment/#api-gateway-issues","title":"API Gateway Issues","text":"<ul> <li>403 Forbidden: Check Lambda permissions</li> <li>502 Bad Gateway: Review Lambda function configuration</li> <li>Timeout: Adjust Lambda timeout settings</li> </ul>"},{"location":"custom-build/aws-lambda/test-deployment/#stripe-issues","title":"Stripe Issues","text":"<ul> <li>Webhook errors: Verify endpoint URL and secrets</li> <li>Payment failures: Check test card numbers</li> <li>Missing events: Confirm webhook forwarding is running</li> </ul>"},{"location":"custom-build/aws-lambda/test-deployment/#mqtt-issues","title":"MQTT Issues","text":"<ul> <li>Connection refused: Check broker address and credentials</li> <li>No messages: Verify topic subscriptions</li> <li>SSL errors: Check certificate configuration</li> </ul> <p>Still Stuck?</p> <ul> <li>Check the Troubleshooting Guide</li> <li>Review specific error messages</li> <li>Ask your teacher or mentor for help</li> </ul>"},{"location":"custom-build/aws-lambda/test-deployment/#security-checks","title":"Security Checks \ud83d\udd10","text":"<p>Before finishing testing, verify:</p> <ol> <li>Environment variables are properly set</li> <li>Stripe webhook secret is configured</li> <li>MQTT credentials are secure</li> <li>API endpoints are working as expected</li> </ol>"},{"location":"custom-build/aws-lambda/test-deployment/#next-steps","title":"Next Steps \ud83c\udfaf","text":"<p>Once testing is complete:</p> <ol> <li>Document any issues found</li> <li>Save test outputs for reference</li> <li>Plan your next features or modifications</li> <li>Consider moving to production mode</li> </ol> <p>Continue to Making Modifications \u2192 Back to API Gateway Setup</p> <p>Keep Testing!</p> <p>Regular testing helps catch issues early. Consider setting up automated tests for your system!</p>"},{"location":"getting-started/deployment-options/","title":"Choose Your Path","text":"<p>Ready to get your arcade cabinet connected to payment processing? We have two different paths you can take - let's figure out which one is right for you! </p>"},{"location":"getting-started/deployment-options/#quick-overview","title":"Quick Overview","text":"<p>Think of it like building a bike </p> <ul> <li>Quick Deploy Path = Getting a pre-built bike and customizing it</li> <li>Custom Build Path = Building a bike from individual parts</li> </ul>"},{"location":"getting-started/deployment-options/#quick-deploy-path","title":"Quick Deploy Path","text":"<p>This is the fastest way to get your arcade cabinet accepting payments!</p>"},{"location":"getting-started/deployment-options/#what-you-get","title":"What You Get","text":"<ul> <li>Pre-built software package</li> <li>Standard configuration</li> <li>Faster setup time</li> <li>Less technical complexity</li> </ul>"},{"location":"getting-started/deployment-options/#perfect-for","title":"Perfect For","text":"<ul> <li>First-time developers</li> <li>School projects with deadlines</li> <li>Quick testing and prototyping</li> <li>Learning basic cloud concepts</li> </ul>"},{"location":"getting-started/deployment-options/#time-investment","title":"Time Investment","text":"<ul> <li>Setup: 1-2 hours</li> <li>Configuration: 30-60 minutes</li> <li>Testing: 30 minutes</li> </ul>"},{"location":"getting-started/deployment-options/#skills-youll-learn","title":"Skills You'll Learn","text":"<ul> <li>Cloud service basics</li> <li>Payment system configuration</li> <li>Basic Linux commands</li> <li>Software deployment</li> <li>Testing and verification</li> </ul>"},{"location":"getting-started/deployment-options/#custom-build-path","title":"Custom Build Path","text":"<p>Build everything yourself and understand how it all works!</p>"},{"location":"getting-started/deployment-options/#what-you-get_1","title":"What You Get","text":"<ul> <li>Complete control over the code</li> <li>Deep understanding of the system</li> <li>Ability to add custom features</li> <li>Freedom to modify anything</li> </ul>"},{"location":"getting-started/deployment-options/#perfect-for_1","title":"Perfect For","text":"<ul> <li>Learning to code</li> <li>Understanding cloud architecture</li> <li>Creating custom features</li> <li>Advanced customization</li> </ul>"},{"location":"getting-started/deployment-options/#time-investment_1","title":"Time Investment","text":"<ul> <li>Setup: 2-3 hours</li> <li>Development: 3-5 hours</li> <li>Testing: 1-2 hours</li> </ul>"},{"location":"getting-started/deployment-options/#skills-youll-learn_1","title":"Skills You'll Learn","text":"<ul> <li>Python programming</li> <li>Docker containerization</li> <li>Cloud architecture</li> <li>API development</li> <li>Payment processing</li> <li>MQTT messaging</li> <li>Software testing</li> </ul>"},{"location":"getting-started/deployment-options/#comparison-chart","title":"Comparison Chart","text":"Feature Quick Deploy Custom Build Setup Time  Fast (1-2 hours)  Longer (6-10 hours) Technical Difficulty  Beginner  Advanced Customization  Basic  Full Learning Depth  Basic  Comprehensive Code Access  Limited  Full Support Needed :phone: Minimal :phone: More extensive"},{"location":"getting-started/deployment-options/#which-path-should-you-choose","title":"Which Path Should You Choose?","text":""},{"location":"getting-started/deployment-options/#choose-quick-deploy-if-you","title":"Choose Quick Deploy If You:","text":"<ul> <li>Want to get up and running quickly</li> <li>Are new to programming</li> <li>Have a tight deadline</li> <li>Want to focus on business aspects</li> <li>Prefer learning by using rather than building</li> </ul> <p>Quick Deploy Example</p> <p>\"I want to get my arcade cabinet taking payments this weekend so I can start earning money at the school fair next week!\"</p>"},{"location":"getting-started/deployment-options/#choose-custom-build-if-you","title":"Choose Custom Build If You:","text":"<ul> <li>Want to learn programming</li> <li>Have time to explore and experiment</li> <li>Plan to add custom features</li> <li>Want to understand every detail</li> <li>Are interested in software development</li> </ul> <p>Custom Build Example</p> <p>\"I want to learn how to code and maybe add some cool features like a remote monitoring system for my cabinet!\"</p>"},{"location":"getting-started/deployment-options/#path-features","title":"Path Features","text":""},{"location":"getting-started/deployment-options/#quick-deploy-features","title":"Quick Deploy Features","text":"<ol> <li>Simple Setup</li> <li>Pull pre-built Docker image</li> <li>Basic configuration</li> <li> <p>Quick testing</p> </li> <li> <p>Standard Functions</p> </li> <li>Payment processing</li> <li>Game control</li> <li> <p>Basic monitoring</p> </li> <li> <p>Limited Customization</p> </li> <li>Change basic settings</li> <li>Modify prices</li> <li>Update payment messages</li> </ol>"},{"location":"getting-started/deployment-options/#custom-build-features","title":"Custom Build Features","text":"<ol> <li>Full Development</li> <li>Write your own code</li> <li>Create custom features</li> <li> <p>Design your own logic</p> </li> <li> <p>Advanced Functions</p> </li> <li>Custom payment rules</li> <li>Advanced monitoring</li> <li>Special game modes</li> <li> <p>Custom reporting</p> </li> <li> <p>Complete Control</p> </li> <li>Modify any feature</li> <li>Add new capabilities</li> <li>Create unique experiences</li> </ol>"},{"location":"getting-started/deployment-options/#making-your-choice","title":"Making Your Choice","text":"<p>Still Not Sure?</p> <p>Ask yourself these questions:</p> <ol> <li>How much time do I have?</li> <li>What do I want to learn?</li> <li>Do I need custom features?</li> <li>How comfortable am I with coding?</li> </ol>"},{"location":"getting-started/deployment-options/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/deployment-options/#for-quick-deploy-path","title":"For Quick Deploy Path","text":"<p>Start Quick Deploy Guide</p> <p>You'll learn how to:</p> <ul> <li>Pull the pre-built software</li> <li>Configure your settings</li> <li>Test the system</li> <li>Start accepting payments</li> </ul>"},{"location":"getting-started/deployment-options/#for-custom-build-path","title":"For Custom Build Path","text":"<p>Start Custom Build Guide</p> <p>You'll learn how to:</p> <ul> <li>Set up your development environment</li> <li>Understand the code structure</li> <li>Make modifications</li> <li>Build and deploy your changes</li> </ul> <p>Need Help Deciding?</p> <ul> <li>Talk to your teacher or mentor</li> <li>Consider your goals</li> <li>Think about your timeline</li> <li>Assess your technical experience</li> </ul> <p>[!INSERT SECTION: Add success stories and examples from both paths]</p>"},{"location":"getting-started/overview/","title":"Project Overview","text":"<p>Welcome to the DIY Arcade Cabinet Project! \ud83c\udfae</p> <p>This guide will help you build and set up your own arcade cabinet with modern payment processing and game control systems.</p>"},{"location":"getting-started/overview/#what-youll-build","title":"What You'll Build","text":"<p>Imagine walking up to an arcade cabinet, scanning a QR code with your phone, making a payment, and instantly being able to play your favorite game. Your arcade system will:</p> <ul> <li>Accept payments through a modern payment system</li> <li>Control when games start and stop</li> <li>Keep track of credits and game sessions</li> <li>Run in a cloud environment</li> </ul>"},{"location":"getting-started/overview/#how-it-works","title":"How It Works","text":"<p>Let's break down the main components of your arcade system:</p> <ol> <li> <p>The Cabinet Software \ud83d\udda5\ufe0f</p> <ul> <li>Runs on your arcade cabinet</li> <li>Controls when games start and stop</li> <li>Keeps track of credits</li> <li>Communicates with the cloud</li> </ul> </li> <li> <p>The Cloud Service \u2601\ufe0f</p> <ul> <li>Handles payments securely</li> <li>Manages game sessions</li> <li>Connects everything together</li> </ul> </li> <li> <p>The Payment System \ud83d\udcb3</p> <ul> <li>Creates payment links</li> <li>Processes payments safely</li> <li>Adds credits to your game</li> </ul> </li> </ol>"},{"location":"getting-started/overview/#technologies-youll-learn","title":"Technologies You'll Learn","text":"<p>Through this project, you'll get hands-on experience with:</p> <ul> <li>Python: A popular programming language that's great for beginners</li> <li>Docker: A way to package software so it runs the same way everywhere</li> <li>MQTT: A messaging system that helps different parts of your arcade talk to each other</li> <li>Cloud Services: Learn how to use professional cloud platforms</li> <li>Payment Processing: See how real-world payment systems work</li> </ul>"},{"location":"getting-started/overview/#two-ways-to-build","title":"Two Ways to Build","text":"<p>We offer two paths to complete this project:</p> <ol> <li> <p>Quick Deploy Path \ud83d\ude80</p> <ul> <li>Best for: Getting up and running quickly</li> <li>Uses pre-built software</li> <li>Focus on setup and configuration</li> <li>Great for learning about cloud services and deployment</li> </ul> </li> <li> <p>Custom Build Path \ud83d\udee0\ufe0f</p> <ul> <li>Best for: Deep learning and customization</li> <li>Build the software yourself</li> <li>Modify and enhance the code</li> <li>Perfect for learning programming concepts</li> </ul> </li> </ol>"},{"location":"getting-started/overview/#whats-next","title":"What's Next?","text":"<p>Ready to start building? Head over to the Prerequisites section to see what you'll need to get started!</p> <p>Need Help?</p> <p>Don't worry if some of these concepts are new to you! We'll explain everything step by step, and there's a helpful Glossary if you run into any unfamiliar terms.</p>"},{"location":"getting-started/prerequisites/","title":"What You'll Need","text":"<p>Welcome DIY Artcade builder! Now that you've built your awesome arcade cabinet, let's get it connected to accept payments and control games. This guide will help you set up all the software you need to turn your cabinet into a modern arcade machine that can help you learn about business while earning money.</p>"},{"location":"getting-started/prerequisites/#your-diy-artcade-cabinet","title":"Your DIY Artcade Cabinet","text":"<p>You should already have:</p> <ul> <li>Your assembled DIY Artcade cabinet</li> <li>The built-in Mini-PC (Intel NUC or similar)</li> <li>Pre-configured Ubuntu Linux operating system</li> <li>Pre-loaded open-source games</li> <li>Arcade controls (joystick, buttons)</li> <li>Display screen connected</li> <li>Internet connectivity (via Ethernet or WiFi)</li> </ul>"},{"location":"getting-started/prerequisites/#about-your-cabinets-computer","title":"About Your Cabinet's Computer","text":"<p>Your Artcade comes with:</p> <ul> <li>A Mini-PC with Intel processor</li> <li>Custom Ubuntu Linux distribution</li> <li>Pre-configured for arcade controls</li> <li>Pre-loaded with open-source games</li> <li>Ready for internet connectivity</li> <li>USB ports for peripherals</li> </ul> <p>[!INSERT IMAGE: Photo of completed DIY Artcade cabinet with labeled components]</p> <p>Why Ubuntu Linux?</p> <p>Ubuntu is a free, secure, and reliable operating system that's perfect for arcade cabinets. It helps keep costs down while providing all the features we need!</p>"},{"location":"getting-started/prerequisites/#business-opportunities","title":"Business Opportunities","text":"<p>Your DIY Artcade can be used to:</p> <ul> <li>Generate passive income</li> <li>Raise funds for your school</li> <li>Help creators monetize their games</li> <li>Learn about entrepreneurship</li> <li>Support local businesses</li> </ul> <p>Real World Examples</p> <p>[!INSERT EXAMPLE: Add real-world example of cabinet earnings in different locations]</p> <ul> <li>School Cafeteria Setup</li> <li>Local Business Partnership</li> <li>Community Center Installation</li> </ul>"},{"location":"getting-started/prerequisites/#development-computer-requirements","title":"Development Computer Requirements","text":""},{"location":"getting-started/prerequisites/#for-software-setup","title":"For Software Setup","text":"<p>You'll need a separate computer (not your arcade's Mini-PC) with:</p> <ul> <li>Windows, Mac, or Linux operating system</li> <li>At least 8GB of RAM (memory)</li> <li>About 10GB of free disk space</li> <li>Reliable internet connection</li> </ul>"},{"location":"getting-started/prerequisites/#software-youll-need","title":"Software You'll Need","text":"<ul> <li>Visual Studio Code (VS Code) - A friendly code editor</li> <li>Python (version 3.6 or newer) - The programming language we'll use</li> <li>Docker Desktop - Helps package our code</li> <li>Git - Helps manage our code</li> </ul> <p>[!INSERT SCREENSHOT: Show the installed software on different operating systems]</p> <p>Mobile Requirements</p> <p>You'll need a smartphone to test the payment system. Any modern iPhone or Android phone will work!</p>"},{"location":"getting-started/prerequisites/#online-accounts","title":"Online Accounts","text":""},{"location":"getting-started/prerequisites/#free-development-accounts","title":"Free Development Accounts","text":"<ul> <li>GitHub Account - For storing and managing your code</li> <li>AWS Account - For running your payment system in the cloud</li> <li>EMQX Account - For sending messages between components</li> <li>Stripe Account (Test Mode) - For handling payments</li> </ul> <p>Account Security</p> <p>Always use a strong password and enable two-factor authentication when available. Keep your account details private!</p>"},{"location":"getting-started/prerequisites/#about-costs","title":"About Costs","text":"<p>The DIY Artcade is designed to be cost-effective for young entrepreneurs:</p> <p>During Development:</p> <ul> <li>Ubuntu Linux - Free operating system</li> <li>Open Source Games - Free to use</li> <li>AWS Free Tier - Includes enough resources to get started</li> <li>EMQX Free Tier - Perfect for testing</li> <li>Stripe Test Mode - Free for development</li> </ul> <p>When Ready for Business:</p> <ul> <li>AWS &amp; EMQX costs scale with usage (usually a few dollars per month for a single cabinet)</li> <li>Stripe fees (typically 2.9% + $0.30 per play)</li> <li>Example: For a $1.00 game play, Stripe would charge about $0.33, leaving you with $0.67</li> </ul> <p>[!INSERT TABLE: Detailed cost breakdown for different usage levels]</p>"},{"location":"getting-started/prerequisites/#technical-skills","title":"Technical Skills","text":""},{"location":"getting-started/prerequisites/#required-skills","title":"Required Skills","text":"<ul> <li>Basic computer skills</li> <li>Interest in learning programming</li> <li>Willingness to try new things!</li> </ul>"},{"location":"getting-started/prerequisites/#helpful-but-not-required","title":"Helpful But Not Required","text":"<ul> <li>Basic understanding of:<ul> <li>How websites work</li> <li>What APIs are</li> <li>What the cloud is</li> <li>Basic Linux commands</li> </ul> </li> </ul> <p>Don't worry if you're new to this!</p> <p>We'll explain everything as we go. The most important thing is your enthusiasm to learn! </p>"},{"location":"getting-started/prerequisites/#business-considerations","title":"Business Considerations","text":"<p>Before placing your arcade in a venue:</p> <ul> <li>Get permission from the venue owner</li> <li>Understand local business regulations</li> <li>Plan for collecting earnings</li> <li>Create a maintenance schedule</li> <li>Consider revenue sharing with the venue</li> <li>Think about game selection and pricing</li> </ul> <p>Business Learning</p> <p>Running an arcade machine is a great way to learn about:</p> <ul> <li>Passive Income Generation</li> <li>Business Operations</li> <li>Customer Service</li> <li>Basic Accounting</li> <li>Marketing and Promotion</li> <li>Technical Maintenance</li> </ul>"},{"location":"getting-started/prerequisites/#next-steps","title":"Next Steps","text":"<p>Ready to begin? Make sure you:</p> <ol> <li>Have your DIY Artcade cabinet assembled and working</li> <li>Check your development computer meets the requirements</li> <li>Install the required software</li> <li>Create your free accounts</li> <li>Bookmark this documentation!</li> </ol> <p>Get Started with Quick Deploy Need Help?</p> <p>Questions or Problems?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Visit our Getting Help section</li> </ul>"},{"location":"getting-started/prerequisites/#sample-configurations","title":"Sample Configurations","text":"<p>[!INSERT SECTION: Add tested configurations for different setups]</p> <ul> <li>Recommended venues and locations</li> <li>Successful business models</li> <li>Popular game selections</li> <li>Typical earnings by location type</li> <li>Best practices for maintenance</li> <li>Recommended pricing strategies</li> </ul>"},{"location":"how-it-works/architecture/","title":"System Architecture","text":"<p>Welcome to the technical overview of your arcade system! Let's break down how all the pieces work together to create a modern arcade experience. \ud83c\udfae</p>"},{"location":"how-it-works/architecture/#system-overview","title":"System Overview \ud83c\udf10","text":"<p>Your arcade system has three main parts working together:</p> <ol> <li>The Arcade Cabinet: Where the games run and players interact</li> <li>Cloud Services: Handles payments and communication</li> <li>Player's Phone: How players make payments</li> </ol> <p>Think of it Like a Restaurant</p> <ul> <li>The Arcade Cabinet is like the kitchen where food (games) is prepared</li> <li>Cloud Services are like the waiters taking orders and payments</li> <li>The Player's Phone is like a self-service ordering kiosk</li> </ul>"},{"location":"how-it-works/architecture/#system-diagram","title":"System Diagram","text":"<pre><code>graph TB\n    subgraph \"Arcade Cabinet\"\n        A[Game Software]\n        C[Attract Screen]\n        QR[QR Code on Screen]\n    end\n\n    subgraph \"Cloud Services\"\n        G[EMQX Cloud]\n        E[AWS Lambda API]\n        F[Stripe]\n    end\n\n    subgraph \"Player Interaction\"\n        H[Player Phone]\n    end\n\n    %% Game Software interactions\n    A --&gt;|Publish Game Over| G\n    G -.-&gt;|Subscribe to Coin Pulse| A\n\n    %% Attract Screen interactions\n    G -.-&gt;|Subscribe to Game Over &amp; Coin Pulse| C\n\n    %% Cloud Service interactions\n    E --&gt;|Process Payment| F\n    E --&gt;|Publish Coin Pulse| G\n    F --&gt;|Payment Webhook| E\n\n    %% Player interactions\n    H --&gt;|Scan| QR\n    H --&gt;|Payment| F\n\n    %% Styling\n    linkStyle 1,2 stroke:#666,stroke-width:2,stroke-dasharray: 5 5\n    classDef cloud fill:#f4f4f4,stroke:#666,stroke-width:2px\n    class E,F,G cloud</code></pre>"},{"location":"how-it-works/architecture/#core-components","title":"Core Components \ud83e\udde9","text":""},{"location":"how-it-works/architecture/#1-arcade-cabinet-components","title":"1. Arcade Cabinet Components","text":"<p>The cabinet runs three main pieces of software:</p> <ul> <li> <p>Game Software: </p> <ul> <li>Runs the actual games</li> <li>Subscribes to coin pulse messages to start games</li> <li>Sends game over messages when play ends</li> <li>Handles player controls and game logic</li> </ul> </li> <li> <p>Attract Screen: </p> <ul> <li>Shows animations when no one is playing</li> <li>Displays the QR code for payments</li> <li>Subscribes to both coin pulse and game over messages</li> <li>Switches between game and attract mode automatically</li> </ul> </li> </ul> <p>Message Subscriptions</p> <p>Both the Game Software and Attract Screen are \"subscribers\" - they listen for specific messages from the cloud: * Game Software listens for \"coin pulse\" to know when to start * Attract Screen listens for both \"coin pulse\" and \"game over\" to know when to switch modes</p>"},{"location":"how-it-works/architecture/#2-cloud-services","title":"2. Cloud Services","text":"<p>Your system uses three cloud services that work together:</p> <ol> <li> <p>EMQX Cloud</p> <ul> <li>Acts as the message hub for your system</li> <li>Receives coin pulse messages from Lambda</li> <li>Receives game over messages from games</li> <li>Delivers messages to all subscribers</li> <li>Handles all real-time communication</li> </ul> </li> <li> <p>AWS Lambda</p> <ul> <li>Runs your payment API</li> <li>Processes Stripe webhook events</li> <li>Publishes coin pulse messages to EMQX</li> <li>Manages game states</li> </ul> </li> <li> <p>Stripe</p> <ul> <li>Handles all payments securely</li> <li>Creates payment pages</li> <li>Sends webhook notifications to Lambda</li> <li>Manages refunds if needed</li> </ul> </li> </ol> <p>Message Flow Example</p> <p>When a player pays:</p> <ol> <li>Stripe tells Lambda \"Payment successful!\" via webhook</li> <li>Lambda publishes a coin pulse message to EMQX</li> <li>EMQX delivers the message to both:<ul> <li>Game Software (which starts the game)</li> <li>Attract Screen (which switches modes)</li> </ul> </li> </ol>"},{"location":"how-it-works/architecture/#3-communication-protocols","title":"3. Communication Protocols","text":"<p>The system uses two main types of communication:</p> <ol> <li> <p>HTTPS (for payments)</p> <ul> <li>Secure web communication</li> <li>Used for payment processing</li> <li>Handles webhook events</li> <li>Protects sensitive data</li> </ul> </li> <li> <p>MQTT (for real-time messaging)</p> <ul> <li>Fast, publish-subscribe messaging system</li> <li>Handles coin pulse messages</li> <li>Manages game over signals</li> <li>Provides real-time updates</li> </ul> </li> </ol>"},{"location":"how-it-works/architecture/#how-everything-works-together","title":"How Everything Works Together \ud83d\udd04","text":"<p>Let's follow a complete game session:</p>"},{"location":"how-it-works/architecture/#1-starting-a-game","title":"1. Starting a Game","text":"<ol> <li>Player approaches cabinet and sees attract screen</li> <li>Scans QR code with phone</li> <li>Makes payment through Stripe</li> <li>Stripe notifies Lambda via webhook</li> <li>Lambda publishes coin pulse to EMQX</li> <li>EMQX delivers message to subscribers:<ul> <li>Game Software starts the game</li> <li>Attract Screen switches to game mode</li> </ul> </li> </ol>"},{"location":"how-it-works/architecture/#2-during-gameplay","title":"2. During Gameplay","text":"<ul> <li>Game Software runs the game</li> <li>Player uses arcade controls</li> <li>Cloud services stand by</li> <li>Attract Screen stays in game mode</li> </ul>"},{"location":"how-it-works/architecture/#3-ending-a-game","title":"3. Ending a Game","text":"<ol> <li>Game finishes</li> <li>Game Software publishes game over to EMQX</li> <li>EMQX delivers message to Attract Screen</li> <li>Attract Screen resumes attract mode</li> <li>Ready for next player!</li> </ol>"},{"location":"how-it-works/architecture/#security-features","title":"Security Features \ud83d\udd10","text":"<p>Your system includes several security measures:</p> <ol> <li> <p>Payment Security</p> <ul> <li>Stripe handles all card data</li> <li>Encrypted connections</li> <li>Webhook verification</li> <li>Fraud prevention</li> </ul> </li> <li> <p>Message Security</p> <ul> <li>SSL/TLS encryption</li> <li>Authentication required</li> <li>Secure protocols</li> <li>Access controls</li> </ul> </li> <li> <p>Cabinet Security</p> <ul> <li>Local credit management</li> <li>Secured connections</li> <li>Protected game files</li> <li>State verification</li> </ul> </li> </ol> <p>Security Best Practices</p> <ul> <li>Keep all API keys private</li> <li>Don't share access credentials</li> <li>Monitor system logs</li> <li>Update software regularly</li> </ul>"},{"location":"how-it-works/architecture/#scalability","title":"Scalability \ud83d\udcc8","text":"<p>The system is designed to grow:</p> <ul> <li>Handles multiple cabinets</li> <li>Scales automatically</li> <li>Uses serverless technology</li> <li>Stays within free tiers</li> </ul> <p>Start Small, Think Big</p> <p>You can start with one cabinet and add more later - the system grows with you!</p>"},{"location":"how-it-works/architecture/#next-steps","title":"Next Steps \ud83d\ude80","text":"<p>Now that you understand the architecture:</p> <ol> <li>Learn about the Payment Flow</li> <li>Explore Game Control</li> <li>Dive into Cloud Services</li> </ol> <p>Continue to Payment Flow \u2192 Back to Overview</p> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review the code examples</li> </ul>"},{"location":"how-it-works/cloud-services/","title":"Cloud Services","text":"<p>Welcome to cloud services! This is where we'll explore the online systems that power your arcade cabinet. Think of these services as your arcade's behind-the-scenes crew - they handle payments, send messages, and keep everything running smoothly! \u2601\ufe0f</p>"},{"location":"how-it-works/cloud-services/#the-big-picture","title":"The Big Picture \ud83c\udfaf","text":"<p>Your arcade uses three main cloud services:</p> <pre><code>graph TB\n    subgraph \"AWS Lambda\"\n        A[API Service]\n    end\n\n    subgraph \"EMQX Cloud\"\n        B[Message Broker]\n    end\n\n    subgraph \"Stripe\"\n        C[Payment Service]\n    end\n\n    A --&gt;|Publishes Messages| B\n    C --&gt;|Payment Webhooks| A\n    B --&gt;|Delivers Messages| D[Arcade Cabinet]\n    D --&gt;|Game Over| B\n\n    style A fill:#FF9900,color:#000\n    style B fill:#00AA9E,color:#000\n    style C fill:#635BFF,color:#fff</code></pre> <p>Think of it Like a Restaurant</p> <ul> <li>AWS Lambda is like the waiter taking orders</li> <li>EMQX is like the kitchen intercom system</li> <li>Stripe is like the cash register</li> <li>Your cabinet is like the kitchen cooking up games!</li> </ul>"},{"location":"how-it-works/cloud-services/#aws-lambda","title":"AWS Lambda \u26a1","text":""},{"location":"how-it-works/cloud-services/#what-it-does","title":"What it Does","text":"<p>AWS Lambda runs your arcade's API (Application Programming Interface) in the cloud:</p> <ul> <li>Processes payments from Stripe</li> <li>Sends start game signals</li> <li>Handles game over messages</li> <li>Creates QR codes for payments</li> <li>Manages multiple cabinets</li> </ul> <p>Why Lambda?</p> <p>Lambda is \"serverless\" which means:</p> <ul> <li>You don't manage any servers</li> <li>It runs only when needed</li> <li>Scales automatically</li> <li>Perfect for arcade cabinets!</li> </ul>"},{"location":"how-it-works/cloud-services/#key-features","title":"Key Features","text":"<ol> <li> <p>API Endpoints</p> <ul> <li><code>/create-payment-link</code> - Makes QR codes</li> <li><code>/addCredit</code> - Processes payments</li> <li><code>/gameover</code> - Handles game endings</li> <li><code>/status</code> - Checks system health</li> </ul> </li> <li> <p>Free Tier Benefits</p> <ul> <li>1 million requests per month free</li> <li>400,000 GB-seconds compute time</li> <li>Perfect for arcade systems</li> <li>Room to grow</li> </ul> </li> </ol>"},{"location":"how-it-works/cloud-services/#emqx-cloud","title":"EMQX Cloud \ud83d\udce1","text":""},{"location":"how-it-works/cloud-services/#what-it-does_1","title":"What it Does","text":"<p>EMQX is your messaging system:</p> <ul> <li>Connects cabinets to the cloud</li> <li>Delivers messages instantly</li> <li>Handles real-time updates</li> <li>Keeps everything in sync</li> </ul> <p>Message Types</p> <p>EMQX handles two main messages:</p> <ol> <li> <p>Coin Pulse (Start Game): <pre><code>{\n    \"machineId\": \"arcade123\",\n    \"credits\": 1,\n    \"timestamp\": \"2024-07-01T12:00:00Z\"\n}\n</code></pre></p> </li> <li> <p>Game Over: <pre><code>{\n    \"machineId\": \"arcade123\",\n    \"status\": \"game_over\",\n    \"timestamp\": \"2024-07-01T12:30:00Z\"\n}\n</code></pre></p> </li> </ol>"},{"location":"how-it-works/cloud-services/#free-tier-features","title":"Free Tier Features","text":"<ul> <li>1 million session minutes/month</li> <li>1 GB traffic/month</li> <li>Perfect for getting started</li> <li>Easy to upgrade later</li> </ul>"},{"location":"how-it-works/cloud-services/#stripe","title":"Stripe \ud83d\udcb3","text":""},{"location":"how-it-works/cloud-services/#what-it-does_2","title":"What it Does","text":"<p>Stripe handles all your payments:</p> <ul> <li>Creates payment pages</li> <li>Processes credit cards</li> <li>Sends success messages</li> <li>Handles refunds if needed</li> </ul> <p>Test vs Live Mode</p> <p>Stripe has two modes:</p> <ul> <li>Test Mode: Practice with fake cards</li> <li>Live Mode: Real payments when ready</li> </ul>"},{"location":"how-it-works/cloud-services/#key-features_1","title":"Key Features","text":"<ol> <li> <p>Payment Links</p> <ul> <li>Easy QR code generation</li> <li>Mobile-friendly pages</li> <li>Secure processing</li> <li>Instant confirmation</li> </ul> </li> <li> <p>Webhooks</p> <ul> <li>Instant payment notification</li> <li>Secure delivery</li> <li>Automatic retries</li> <li>Payment verification</li> </ul> </li> </ol>"},{"location":"how-it-works/cloud-services/#how-they-work-together","title":"How They Work Together \ud83e\udd1d","text":"<p>Let's follow a payment through the system:</p> <pre><code>sequenceDiagram\n    participant P as Player\n    participant S as Stripe\n    participant L as Lambda\n    participant E as EMQX\n    participant C as Cabinet\n\n    P-&gt;&gt;S: Makes Payment\n    S-&gt;&gt;L: Sends Webhook\n    L-&gt;&gt;E: Publishes Coin Pulse\n    E-&gt;&gt;C: Delivers Message\n    C-&gt;&gt;E: Sends Game Over\n    E-&gt;&gt;C: Updates Display</code></pre> <ol> <li> <p>Payment Flow</p> <ul> <li>Player scans QR code</li> <li>Pays through Stripe</li> <li>Stripe notifies Lambda</li> <li>Lambda tells EMQX</li> <li>EMQX messages cabinet</li> <li>Game starts!</li> </ul> </li> <li> <p>Game Over Flow</p> <ul> <li>Game ends</li> <li>Cabinet tells EMQX</li> <li>System resets</li> <li>Ready for next player</li> </ul> </li> </ol>"},{"location":"how-it-works/cloud-services/#free-tier-limits","title":"Free Tier Limits \ud83d\udcca","text":"<p>Each service has free limits:</p> <ol> <li> <p>AWS Lambda</p> <ul> <li>1M requests/month</li> <li>400K GB-seconds</li> <li>Never expires</li> </ul> </li> <li> <p>EMQX Cloud</p> <ul> <li>1M minutes/month</li> <li>1 GB traffic</li> <li>Basic monitoring</li> </ul> </li> <li> <p>Stripe</p> <ul> <li>No monthly fees</li> <li>2.9% + $0.30 per payment</li> <li>Full test mode</li> </ul> </li> </ol> <p>Perfect for Learning!</p> <p>These free tiers are designed for:</p> <ul> <li>Learning the system</li> <li>Testing everything</li> <li>Starting your business</li> <li>Growing over time</li> </ul>"},{"location":"how-it-works/cloud-services/#security-features","title":"Security Features \ud83d\udd12","text":"<p>Your cloud services are protected by:</p> <ol> <li> <p>AWS Security</p> <ul> <li>API authentication</li> <li>Encrypted traffic</li> <li>Role-based access</li> <li>Activity monitoring</li> </ul> </li> <li> <p>EMQX Security</p> <ul> <li>TLS encryption</li> <li>Client authentication</li> <li>Access control</li> <li>Secure protocols</li> </ul> </li> <li> <p>Stripe Security</p> <ul> <li>PCI compliance</li> <li>Fraud detection</li> <li>Webhook signatures</li> <li>Data encryption</li> </ul> </li> </ol>"},{"location":"how-it-works/cloud-services/#monitoring-debugging","title":"Monitoring &amp; Debugging \ud83d\udd0d","text":"<p>Each service provides monitoring:</p>"},{"location":"how-it-works/cloud-services/#aws-cloudwatch","title":"AWS CloudWatch","text":"<ul> <li>API request logs</li> <li>Error tracking</li> <li>Performance metrics</li> <li>Usage statistics</li> </ul>"},{"location":"how-it-works/cloud-services/#emqx-dashboard","title":"EMQX Dashboard","text":"<ul> <li>Connection status</li> <li>Message delivery</li> <li>Client activity</li> <li>System health</li> </ul>"},{"location":"how-it-works/cloud-services/#stripe-dashboard","title":"Stripe Dashboard","text":"<ul> <li>Payment history</li> <li>Transaction details</li> <li>Webhook logs</li> <li>Error reports</li> </ul> <p>Staying Informed</p> <p>Check your dashboards for:</p> <ul> <li>System health</li> <li>Error messages</li> <li>Usage patterns</li> <li>Payment issues</li> </ul>"},{"location":"how-it-works/cloud-services/#next-steps","title":"Next Steps \ud83d\ude80","text":"<p>Now that you understand the cloud services:</p> <ol> <li>Set up your accounts</li> <li>Test the system</li> <li>Monitor activity</li> <li>Start accepting payments!</li> </ol> <p>Back to Game Control Start Setup \u2192</p> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review service documentation</li> </ul>"},{"location":"how-it-works/game-control/","title":"Game Control","text":"<p>Welcome to the game control guide! Here's where we'll explore how your arcade system manages games - from starting them up to handling game overs. Let's dive in! \ud83c\udfae</p>"},{"location":"how-it-works/game-control/#quick-overview","title":"Quick Overview \ud83c\udfaf","text":"<p>Your arcade's game control system:</p> <ul> <li>Starts games when players pay</li> <li>Manages credits and play time</li> <li>Handles game over signals</li> <li>Controls the attract screen</li> <li>Keeps everything in sync</li> </ul> <p>Think of it Like a DJ System</p> <ul> <li>The attract screen is like playing music between sets</li> <li>Starting a game is like starting your main playlist</li> <li>Game over is like finishing your set</li> <li>The system smoothly transitions between these modes!</li> </ul>"},{"location":"how-it-works/game-control/#how-games-are-controlled","title":"How Games Are Controlled \ud83d\udd79\ufe0f","text":""},{"location":"how-it-works/game-control/#1-state-management","title":"1. State Management","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; AttractMode\n    AttractMode --&gt; GamePlay: Coin Pulse\n    GamePlay --&gt; AttractMode: Game Over\n    GamePlay --&gt; GamePlay: Additional Credits</code></pre> <p>Your cabinet has two main states:</p> <ol> <li> <p>Attract Mode</p> <ul> <li>Shows demo animations</li> <li>Displays QR code</li> <li>Waits for payment</li> <li>Monitors for coin pulse</li> </ul> </li> <li> <p>Game Play Mode</p> <ul> <li>Runs the active game</li> <li>Tracks remaining credits</li> <li>Monitors game status</li> <li>Listens for game over</li> </ul> </li> </ol> <p>State Transitions</p> <p>The system smoothly handles changes between states:</p> <ul> <li>Attract \u2192 Game: When payment received</li> <li>Game \u2192 Attract: When game ends</li> <li>Game \u2192 Game: When more credits added</li> </ul>"},{"location":"how-it-works/game-control/#2-credit-system","title":"2. Credit System \ud83d\udcb0","text":"<p>The credit system manages:</p> <pre><code>graph TD\n    A[Payment Received] --&gt;|Add Credits| B[Credit Counter]\n    B --&gt;|Credits &gt; 0| C[Enable Game]\n    B --&gt;|Credits = 0| D[Return to Attract]\n    C --&gt;|Game Over| E[Decrease Credits]\n    E --&gt;|Check Credits| B\n    style A fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style B fill:#f0f0f0,stroke:#333,stroke-width:2px\n    style C fill:#e1e1e1,stroke:#333,stroke-width:2px\n    style D fill:#d3d3d3,stroke:#333,stroke-width:2px\n    style E fill:#c5c5c5,stroke:#333,stroke-width:2px</code></pre> <ul> <li>Credit addition from payments</li> <li>Credit deduction after games</li> <li>Multi-credit game support</li> <li>Credit persistence</li> </ul> <p>Credit Scenarios</p> <p>Here's how credits work:</p> <ul> <li>Player pays $1 \u2192 1 credit added</li> <li>Game starts \u2192 1 credit used</li> <li>Player adds more credits \u2192 Queue for next game</li> <li>Game ends \u2192 Check for remaining credits</li> </ul>"},{"location":"how-it-works/game-control/#3-game-start-process","title":"3. Game Start Process \ud83d\ude80","text":"<p>When credits are added:</p> <ol> <li> <p>System receives coin pulse message    <pre><code>{\n    \"machineId\": \"your-machine-id\",\n    \"credits\": 1,\n    \"timestamp\": \"2024-07-01T12:00:00Z\"\n}\n</code></pre></p> </li> <li> <p>The cabinet software:</p> <ul> <li>Verifies the machine ID</li> <li>Adds the specified credits</li> <li>Switches to game mode</li> <li>Starts the game</li> </ul> </li> </ol> <p>Start-up Checks</p> <p>Before starting a game, the system verifies:</p> <ul> <li>Valid machine ID</li> <li>Sufficient credits</li> <li>Game is ready</li> <li>No active games running</li> </ul>"},{"location":"how-it-works/game-control/#4-during-gameplay","title":"4. During Gameplay \u26a1","text":"<p>While a game is running:</p> <ul> <li>System monitors game status</li> <li>Tracks remaining credits</li> <li>Listens for game over</li> <li>Handles additional payments</li> </ul> <p>Multi-Credit Games</p> <p>Some games might need multiple credits:</p> <ul> <li>Fighting games: 1 credit per player</li> <li>Premium games: 2 credits per play</li> <li>Extended play: Credits for continue</li> </ul>"},{"location":"how-it-works/game-control/#5-game-over-handling","title":"5. Game Over Handling \ud83d\udd04","text":"<p>When a game ends:</p> <ol> <li> <p>Game sends over signal    <pre><code>{\n    \"machineId\": \"your-machine-id\",\n    \"status\": \"game_over\",\n    \"timestamp\": \"2024-07-01T12:30:00Z\"\n}\n</code></pre></p> </li> <li> <p>System processes game over:</p> <ul> <li>Updates credit count</li> <li>Checks for remaining credits</li> <li>Decides next state</li> <li>Updates display</li> </ul> </li> </ol> <p>Game Over Flow</p> <p>The system checks:</p> <ol> <li>Are there more credits?<ul> <li>Yes \u2192 Start new game</li> <li>No \u2192 Return to attract mode</li> </ul> </li> <li>Was this a multi-credit game?<ul> <li>Update credit display</li> <li>Handle any remaining balance</li> </ul> </li> </ol>"},{"location":"how-it-works/game-control/#error-handling","title":"Error Handling \ud83d\udd27","text":"<p>The system handles various game control issues:</p>"},{"location":"how-it-works/game-control/#1-game-crashes","title":"1. Game Crashes","text":"<p>If a game crashes:</p> <ul> <li>Credits are preserved</li> <li>System logs the error</li> <li>Cabinet returns to attract mode</li> <li>Player can start again</li> </ul>"},{"location":"how-it-works/game-control/#2-power-issues","title":"2. Power Issues","text":"<p>If power is lost:</p> <ul> <li>Credit state is saved</li> <li>System recovers on restart</li> <li>Games resume if possible</li> <li>Players don't lose credits</li> </ul> <p>Data Protection</p> <p>The system protects player credits by:</p> <ul> <li>Saving credit state regularly</li> <li>Using persistent storage</li> <li>Implementing recovery logic</li> <li>Maintaining transaction logs</li> </ul>"},{"location":"how-it-works/game-control/#testing-game-control","title":"Testing Game Control \ud83e\uddea","text":"<p>You can test the system using:</p> <ol> <li> <p>Manual Tests:</p> <ul> <li>Add test credits</li> <li>Start games</li> <li>Trigger game overs</li> <li>Check state transitions</li> </ul> </li> <li> <p>Automated Tests:</p> <ul> <li>Send test MQTT messages</li> <li>Verify credit handling</li> <li>Check state management</li> <li>Test error recovery</li> </ul> </li> </ol> <p>Testing Best Practices</p> <p>Always test:</p> <ul> <li>Multiple credit scenarios</li> <li>Rapid game starts/stops</li> <li>Power loss recovery</li> <li>Multi-player games</li> </ul>"},{"location":"how-it-works/game-control/#monitoring-debugging","title":"Monitoring &amp; Debugging \ud83d\udcca","text":"<p>Keep track of your games:</p> <ol> <li> <p>System Logs:</p> <ul> <li>Game start/stop events</li> <li>Credit changes</li> <li>Error conditions</li> <li>State transitions</li> </ul> </li> <li> <p>MQTT Messages:</p> <ul> <li>Coin pulse receipts</li> <li>Game over signals</li> <li>State changes</li> <li>Error notifications</li> </ul> </li> <li> <p>Cabinet Status:</p> <ul> <li>Current game state</li> <li>Credit count</li> <li>Active players</li> <li>System health</li> </ul> </li> </ol>"},{"location":"how-it-works/game-control/#next-steps","title":"Next Steps \ud83d\ude80","text":"<p>Now that you understand game control:</p> <ol> <li>Learn about Cloud Services</li> <li>Try testing different scenarios</li> <li>Explore credit management</li> </ol> <p>Continue to Cloud Services \u2192 Back to Payment Flow</p> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review the code examples</li> </ul>"},{"location":"how-it-works/payment-flow/","title":"Payment Flow","text":"<p>Welcome to the payment flow guide! Let's explore how money gets from a player's phone to your arcade cabinet. Let's make this fun! \ud83d\udcb8</p>"},{"location":"how-it-works/payment-flow/#quick-overview","title":"Quick Overview \ud83c\udfaf","text":"<p>Here's the basic flow when someone wants to play your arcade:</p> <ol> <li>Player sees QR code on cabinet</li> <li>Scans code with phone</li> <li>Makes payment through Stripe</li> <li>Game starts automatically!</li> </ol> <p>Think of it Like a Vending Machine</p> <ul> <li>The QR code is like the card reader</li> <li>Stripe is like the payment processor inside</li> <li>The coin pulse is like the spiral turning to drop your snack</li> <li>The game starting is like getting your treat!</li> </ul>"},{"location":"how-it-works/payment-flow/#detailed-payment-flow","title":"Detailed Payment Flow \ud83d\udd04","text":"<p>Let's break down exactly what happens in each step:</p>"},{"location":"how-it-works/payment-flow/#1-qr-code-generation","title":"1. QR Code Generation \ud83d\udcf1","text":"<pre><code>graph LR\n    A[Cabinet Display] --&gt;|Shows| B[QR Code]\n    B --&gt;|Links to| C[Stripe Payment]\n    style A fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style B fill:#f0f0f0,stroke:#333,stroke-width:2px\n    style C fill:#e1e1e1,stroke:#333,stroke-width:2px</code></pre> <ul> <li>Your cabinet shows a QR code during attract mode</li> <li>Each code is unique to your cabinet</li> <li>The code contains your cabinet's ID</li> <li>QR codes are generated through Stripe</li> </ul> <p>How QR Codes Work</p> <p>The QR code contains a special URL that:</p> <ul> <li>Links to your Stripe payment page</li> <li>Includes your cabinet's ID</li> <li>Sets the correct price</li> <li>Ensures proper tracking</li> </ul>"},{"location":"how-it-works/payment-flow/#2-payment-processing","title":"2. Payment Processing \ud83d\udcb3","text":"<pre><code>graph TD\n    A[Player's Phone] --&gt;|Scans| B[QR Code]\n    B --&gt;|Opens| C[Stripe Payment Page]\n    C --&gt;|Processes| D[Payment]\n    D --&gt;|Notifies| E[Your API]\n    style A fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style B fill:#f0f0f0,stroke:#333,stroke-width:2px\n    style C fill:#e1e1e1,stroke:#333,stroke-width:2px\n    style D fill:#d3d3d3,stroke:#333,stroke-width:2px\n    style E fill:#c5c5c5,stroke:#333,stroke-width:2px</code></pre> <p>When a player pays:</p> <ol> <li>They scan your QR code</li> <li>Their phone shows the Stripe payment page</li> <li>They enter their payment info</li> <li>Stripe processes the payment</li> <li>Success! Time for the next step</li> </ol> <p>Payment Page Example</p> <p>Your payment page shows:</p> <ul> <li>Your arcade name</li> <li>The price per play</li> <li>Secure payment form</li> <li>Confirmation message</li> </ul>"},{"location":"how-it-works/payment-flow/#3-webhook-notification","title":"3. Webhook Notification \ud83d\udce8","text":"<p>After successful payment:</p> <ol> <li>Stripe immediately sends a webhook to your API</li> <li>Your API verifies the webhook is legitimate</li> <li>The webhook contains:<ul> <li>Payment amount</li> <li>Cabinet ID</li> <li>Transaction details</li> <li>Timestamp</li> </ul> </li> </ol> <p>Security First!</p> <p>Your API always verifies webhooks by:</p> <ul> <li>Checking the Stripe signature</li> <li>Validating the cabinet ID</li> <li>Confirming the payment amount</li> <li>Ensuring no duplicate processing</li> </ul>"},{"location":"how-it-works/payment-flow/#4-credit-management","title":"4. Credit Management \ud83c\udfae","text":"<p>Once payment is verified:</p> <pre><code>graph TD\n    A[AWS Lambda] --&gt;|Publishes| B[MQTT Message]\n    B --&gt;|Delivers to| C[Cabinet Software]\n    C --&gt;|Adds| D[Game Credits]\n    D --&gt;|Starts| E[Game]\n    style A fill:#f9f9f9,stroke:#333,stroke-width:2px\n    style B fill:#f0f0f0,stroke:#333,stroke-width:2px\n    style C fill:#e1e1e1,stroke:#333,stroke-width:2px\n    style D fill:#d3d3d3,stroke:#333,stroke-width:2px\n    style E fill:#c5c5c5,stroke:#333,stroke-width:2px</code></pre> <ol> <li>Your API creates a \"coin pulse\" message</li> <li>EMQX delivers it to your cabinet</li> <li>The cabinet software:<ul> <li>Adds the credits</li> <li>Starts the game</li> <li>Updates the display</li> </ul> </li> </ol> <p>Credit Calculation</p> <p>Credits are calculated based on:</p> <ul> <li>Payment amount</li> <li>Your price settings</li> <li>Any active promotions</li> <li>Multi-play discounts</li> </ul>"},{"location":"how-it-works/payment-flow/#message-formats","title":"Message Formats \ud83d\udcdd","text":""},{"location":"how-it-works/payment-flow/#coin-pulse-message","title":"Coin Pulse Message","text":"<p>When credits are added:</p> <pre><code>{\n    \"machineId\": \"your-machine-id\",\n    \"credits\": 1,\n    \"timestamp\": \"2024-07-01T12:00:00Z\"\n}\n</code></pre>"},{"location":"how-it-works/payment-flow/#payment-confirmation","title":"Payment Confirmation","text":"<p>What Stripe sends to your API:</p> <pre><code>{\n    \"type\": \"checkout.session.completed\",\n    \"data\": {\n        \"object\": {\n            \"metadata\": {\n                \"machine_id\": \"your-machine-id\"\n            },\n            \"amount_total\": 100\n        }\n    }\n}\n</code></pre>"},{"location":"how-it-works/payment-flow/#error-handling","title":"Error Handling \ud83d\udd27","text":"<p>The system handles various payment issues:</p>"},{"location":"how-it-works/payment-flow/#payment-failures","title":"Payment Failures","text":"<p>If payment fails:</p> <ul> <li>Player sees clear error message</li> <li>No credits are added</li> <li>Cabinet stays in attract mode</li> <li>Player can try again</li> </ul>"},{"location":"how-it-works/payment-flow/#network-issues","title":"Network Issues","text":"<p>If connection drops:</p> <ul> <li>Payments are never lost</li> <li>System retries message delivery</li> <li>Cabinet maintains state</li> <li>Records are reconciled automatically</li> </ul> <p>Preventing Double Credits</p> <p>The system prevents duplicate credits by:</p> <ul> <li>Tracking transaction IDs</li> <li>Verifying webhook signatures</li> <li>Maintaining state records</li> <li>Using idempotency keys</li> </ul>"},{"location":"how-it-works/payment-flow/#testing-payments","title":"Testing Payments \ud83e\uddea","text":"<p>You can test the system using:</p> <ol> <li> <p>Stripe test cards:</p> <ul> <li>Success: 4242 4242 4242 4242</li> <li>Decline: 4000 0000 0000 0002</li> <li>Error: 4000 0000 0000 9995</li> </ul> </li> <li> <p>Test webhook events:</p> <ul> <li>Use Stripe CLI</li> <li>Send test webhooks</li> <li>Monitor responses</li> <li>Check credit addition</li> </ul> </li> </ol> <p>Testing Best Practices</p> <p>Always test:</p> <ul> <li>Different payment amounts</li> <li>Failed payments</li> <li>Network disconnections</li> <li>Multiple rapid payments</li> </ul>"},{"location":"how-it-works/payment-flow/#monitoring-debugging","title":"Monitoring &amp; Debugging \ud83d\udcca","text":"<p>Keep track of your payments:</p> <ol> <li> <p>Stripe Dashboard:</p> <ul> <li>View all transactions</li> <li>Check payment status</li> <li>Handle refunds</li> <li>Monitor disputes</li> </ul> </li> <li> <p>AWS CloudWatch:</p> <ul> <li>Watch API logs</li> <li>Monitor webhooks</li> <li>Track errors</li> <li>Set up alerts</li> </ul> </li> <li> <p>EMQX Console:</p> <ul> <li>View message flow</li> <li>Check connections</li> <li>Monitor delivery</li> <li>Debug issues</li> </ul> </li> </ol>"},{"location":"how-it-works/payment-flow/#next-steps","title":"Next Steps \ud83d\ude80","text":"<p>Now that you understand payments:</p> <ol> <li>Learn about Game Control</li> <li>Explore Cloud Services</li> <li>Try setting up test payments</li> </ol> <p>Continue to Game Control \u2192 Back to Architecture</p> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review the code examples</li> </ul>"},{"location":"quick-deploy/docker-pull/","title":"Pulling the Docker Image","text":"<p>Welcome to the Docker pull guide! Let's get the arcade software onto your computer so we can deploy it to AWS. </p>"},{"location":"quick-deploy/docker-pull/#before-you-start","title":"Before You Start","text":"<p>Make sure you have:</p> <ul> <li>Docker Desktop installed and running</li> <li>Terminal or PowerShell open</li> <li>AWS account set up</li> </ul> <p>Not Ready?</p> <p>Need to install Docker? Check our Prerequisites Guide first!</p>"},{"location":"quick-deploy/docker-pull/#understanding-docker-images","title":"Understanding Docker Images","text":"<p>Before we pull the image, let's understand what we're doing:</p> <p>What's a Docker Image?</p> <p>Think of a Docker image like a video game installer:</p> <ul> <li>It contains all the software we need</li> <li>It's pre-configured and ready to run</li> <li>It works the same way on every computer</li> <li>You can share it easily with others</li> </ul>"},{"location":"quick-deploy/docker-pull/#getting-and-renaming-the-image","title":"Getting and Renaming the Image","text":"<ol> <li>First, pull the image:</li> </ol> <pre><code>docker pull yeeyon/arcade-stem:latest\n</code></pre> <ol> <li>Give it a more descriptive name:</li> </ol> <pre><code>docker tag yeeyon/arcade-stem:latest diy-artcade-payment-api:latest\n</code></pre> <ol> <li>Remove the old name (optional):</li> </ol> <pre><code>docker rmi yeeyon/arcade-stem:latest\n</code></pre> <ol> <li>Verify everything worked:</li> </ol> <pre><code>docker images\n</code></pre> <p>You should see something like:</p> <pre><code>REPOSITORY                 TAG       IMAGE ID       CREATED        SIZE\ndiy-artcade-payment-api   latest    abc123def456   1 minute ago   156MB\n</code></pre> <p>About Image Names</p> <ul> <li>Renaming an image with <code>docker tag</code> doesn't create a copy</li> <li>It just gives the same image a new name</li> <li>This helps us keep our project organized</li> <li>Both names would work the same way in commands</li> </ul>"},{"location":"quick-deploy/docker-pull/#testing-the-image","title":"Testing the Image","text":"<p>Let's make sure the image works:</p> Apple Silicon Mac (M1/M2/M3)Windows/Linux/Intel Mac <pre><code>docker run --platform linux/amd64 --rm diy-artcade-payment-api:latest echo \"Hello from arcade container\"\n</code></pre> <pre><code>docker run --rm diy-artcade-payment-api:latest echo \"Hello from arcade container\"\n</code></pre> <p>You should see: <pre><code>Hello from arcade container\n</code></pre></p> <p>What Did We Do?</p> <ul> <li><code>docker run</code> starts a container</li> <li><code>--rm</code> removes it when finished</li> <li><code>echo \"Hello...\"</code> tests that it works</li> <li><code>--platform linux/amd64</code> ensures compatibility with Apple Silicon Macs</li> <li>If you see the message, your image is working!</li> </ul>"},{"location":"quick-deploy/docker-pull/#checking-image-details","title":"Checking Image Details","text":"<p>View detailed information about your image:</p> <pre><code>docker inspect diy-artcade-payment-api:latest\n</code></pre> <p>This shows you:</p> <ul> <li>When it was created</li> <li>What operating system it uses</li> <li>What settings it has</li> <li>And lots more!</li> </ul>"},{"location":"quick-deploy/docker-pull/#next-steps-setting-up-lambda","title":"Next Steps: Setting Up Lambda","text":"<p>Now that you have the Docker image on your computer, it's time to:</p> <ol> <li>Push it to Amazon ECR</li> <li>Set up AWS Lambda to use your image</li> <li>Configure your cloud API</li> </ol> <p>The next guide will walk you through these steps!</p> <p>Continue to Lambda Setup \u2192 Back to Quick Deploy Overview</p>"},{"location":"quick-deploy/docker-pull/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quick-deploy/docker-pull/#common-issues","title":"Common Issues","text":"<p>Docker Not Running <pre><code>Cannot connect to the Docker daemon\n</code></pre></p> <ul> <li>Make sure Docker Desktop is running</li> <li>Try restarting Docker Desktop</li> </ul> <p>Disk Space Issues <pre><code>no space left on device\n</code></pre></p> <ul> <li>Clear old Docker images: <code>docker system prune</code></li> <li>Free up disk space</li> </ul> <p>Slow Download</p> <ul> <li>Check your internet connection</li> <li>Try again later</li> <li>Ask if there's a local copy available</li> </ul> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Visit Docker's documentation</li> </ul>"},{"location":"quick-deploy/docker-pull/#understanding-the-process","title":"Understanding the Process","text":"<p>Here's what's happening when you pull and push Docker images:</p> <pre><code>graph LR\n    A[Docker Hub] --&gt;|Pull| B[Your Computer]\n    B --&gt;|Push| C[Amazon ECR]\n    C --&gt;|Deploy| D[AWS Lambda]</code></pre> <p>Keep Terminal Open</p> <p>After successfully pulling the image, keep your terminal open - you'll need it for the next step when pushing to ECR!</p> <p>Remember, pulling the Docker image is just the first step. Next, we'll get it into AWS where it can power your arcade cabinet's payment system!</p>"},{"location":"quick-deploy/overview/","title":"Quick Deploy Guide","text":"<p>Welcome to the Quick Deploy path! This is the fastest way to get your arcade cabinet accepting payments. Perfect for when you want to focus on running your arcade rather than diving deep into the code. </p>"},{"location":"quick-deploy/overview/#what-is-quick-deploy","title":"What is Quick Deploy?","text":"<p>Think of Quick Deploy like getting a pre-built bike versus building one from parts:</p> <ul> <li>Uses pre-built software package</li> <li>Standard configuration options</li> <li>Gets you up and running quickly</li> <li>Perfect for learning about cloud services</li> </ul>"},{"location":"quick-deploy/overview/#what-youll-learn","title":"What You'll Learn","text":"<p>Even though we're using pre-built software, you'll still learn valuable skills:</p> <ol> <li> <p>Cloud Services</p> <ul> <li>Setting up AWS Lambda</li> <li>Using API Gateway</li> <li>Managing cloud resources</li> </ul> </li> <li> <p>Payment Systems</p> <ul> <li>Configuring Stripe</li> <li>Setting up webhooks</li> <li>Testing payment flows</li> </ul> </li> <li> <p>System Administration</p> <ul> <li>Basic Docker commands</li> <li>Environment configuration</li> <li>Testing and verification</li> </ul> </li> </ol>"},{"location":"quick-deploy/overview/#time-investment","title":"Time Investment","text":"<p>The Quick Deploy path typically takes:</p> <ul> <li>Setup: 1-2 hours</li> <li>Configuration: 30-60 minutes</li> <li>Testing: 30 minutes</li> </ul> <p>Perfect for Events</p> <p>Quick Deploy is great when you need to get your arcade running quickly, like for:</p> <ul> <li>School fairs</li> <li>Fundraising events</li> <li>Class demonstrations</li> <li>Quick prototyping</li> </ul>"},{"location":"quick-deploy/overview/#steps-overview","title":"Steps Overview","text":"<p>Here's what we'll do:</p> <ol> <li>Pull the pre-built Docker image</li> <li>Set up your AWS Lambda function</li> <li>Configure API Gateway</li> <li>Connect Stripe payments</li> <li>Test everything</li> </ol> <p>Prerequisites</p> <p>Before starting, make sure you have:</p> <ul> <li>AWS account set up</li> <li>Stripe account ready</li> <li>EMQX account created</li> <li>Docker installed on your computer</li> </ul>"},{"location":"quick-deploy/overview/#required-skills","title":"Required Skills","text":"<p>You should be comfortable with:</p> <ul> <li>Basic computer usage</li> <li>Following detailed instructions</li> <li>Copy/pasting commands</li> <li>Basic problem solving</li> </ul> <p>No Coding Required</p> <p>You don't need to know how to code! We'll provide all the commands you need.</p>"},{"location":"quick-deploy/overview/#whats-included","title":"What's Included","text":"<p>The pre-built package contains:</p> <ul> <li>Payment processing system</li> <li>Game credit management</li> <li>MQTT messaging setup</li> <li>Stripe integration</li> <li>Testing tools</li> </ul>"},{"location":"quick-deploy/overview/#customization-options","title":"Customization Options","text":"<p>While Quick Deploy is pre-built, you can still customize:</p> <ul> <li>Payment amounts</li> <li>Credit values</li> <li>Game timing</li> <li>Basic messages</li> </ul> <p>Want More Control?</p> <p>If you find yourself wanting to modify the code itself, you can always switch to the Custom Build Path later!</p>"},{"location":"quick-deploy/overview/#support-and-help","title":"Support and Help","text":"<p>If you get stuck:</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review specific step documentation</li> <li>Look for solution in AWS or Stripe docs</li> </ul>"},{"location":"quick-deploy/overview/#ready-to-start","title":"Ready to Start?","text":"<p>Make sure you have:</p> <ol> <li> All accounts set up</li> <li> Docker installed</li> <li> About 2-3 hours available</li> <li> Good internet connection</li> </ol> <p>Start Docker Setup \u2192 Back to Deployment Options</p> <p>Not Sure This is Right for You?</p> <p>Compare the Quick Deploy vs Custom Build paths if you're unsure which to choose!</p>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/","title":"Understanding API Gateway","text":"<p>Welcome to the API Gateway guide! Let's learn about this important service that connects your arcade cabinet to your Lambda function. </p>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#what-is-api-gateway","title":"What is API Gateway?","text":"<p>Think of API Gateway as a smart receptionist for your arcade system:</p> <ul> <li>It receives requests from arcade cabinets</li> <li>Routes them to the right Lambda function</li> <li>Handles security and authentication</li> <li>Manages multiple connections</li> <li>Tracks usage and performance</li> </ul> <p>Real World Example</p> <p>Imagine a hotel front desk:</p> <ul> <li>Guests (arcade cabinets) arrive with requests</li> <li>The receptionist (API Gateway) checks their ID</li> <li>Then directs them to the right room (Lambda function)</li> <li>Keeps track of who's visiting</li> <li>Makes sure everything runs smoothly</li> </ul>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#why-do-we-need-it","title":"Why Do We Need It?","text":"<p>API Gateway is essential because it:</p> <ol> <li>Creates a stable URL for your API</li> <li>Manages security and access</li> <li>Handles multiple requests at once</li> <li>Provides usage metrics</li> <li>Stays within AWS free tier</li> </ol> <p>Free Tier Benefits</p> <p>API Gateway's free tier includes:</p> <ul> <li>1 million API calls per month</li> <li>Built-in DDoS protection</li> <li>Request validation</li> <li>Response caching</li> </ul>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#api-gateway-concepts","title":"API Gateway Concepts","text":""},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#1-endpoints","title":"1. Endpoints","text":"<p>These are the URLs your arcade cabinet will use:</p> <ul> <li><code>/status</code> - Check if system is running</li> <li><code>/create-payment-link</code> - Generate QR codes</li> <li><code>/addCredit</code> - Process payments</li> <li><code>/gameover</code> - Handle game completion</li> </ul>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#2-methods","title":"2. Methods","text":"<p>Different types of requests:</p> <ul> <li>GET - Retrieve information</li> <li>POST - Send information</li> <li>PUT - Update information</li> <li>DELETE - Remove information</li> </ul>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#3-stages","title":"3. Stages","text":"<p>Different versions of your API:</p> <ul> <li>Development - For testing</li> <li>Production - For real use</li> <li>Custom stages - For special needs</li> </ul>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#4-integrations","title":"4. Integrations","text":"<p>How API Gateway connects to Lambda:</p> <ul> <li>Proxy integration - Passes everything through</li> <li>Custom integration - More control but complex</li> </ul>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#security-features","title":"Security Features","text":"<p>API Gateway protects your system with:</p> <ol> <li> <p>Authentication</p> <ul> <li>API keys</li> <li>IAM roles</li> <li>Custom authorizers</li> </ul> </li> <li> <p>Throttling</p> <ul> <li>Rate limiting</li> <li>Burst limiting</li> <li>Per-client limits</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Request logging</li> <li>Error tracking</li> <li>Usage metrics</li> </ul> </li> </ol>"},{"location":"quick-deploy/aws-lambda/api-gateway-intro/#next-steps","title":"Next Steps","text":"<p>Now that you understand API Gateway:</p> <ol> <li>Set up your own API Gateway</li> <li>Configure security settings</li> <li>Test the integration</li> </ol> <p>Continue to API Gateway Setup \u2192 Back to Lambda Setup</p> <p>Keep Learning</p> <ul> <li>Explore API Gateway dashboard</li> <li>Read CloudWatch logs</li> <li>Test different configurations</li> </ul>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/","title":"Setting Up AWS Lambda","text":"<p>Welcome to the AWS Lambda setup guide! Now that you have the Docker image on your computer, let's get it running in the cloud! </p>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have:</p> <ul> <li>Completed Basic AWS Setup</li> <li>Successfully pulled and renamed the Docker image (previous step)</li> <li>AWS CLI installed and configured</li> <li>Your terminal or PowerShell still open</li> </ul>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#step-1-push-to-amazon-ecr","title":"Step 1: Push to Amazon ECR","text":"<p>First, we need to get your Docker image into AWS's container registry (ECR):</p> <ol> <li> <p>Create an ECR repository:</p> <pre><code>aws ecr create-repository --repository-name artcade-api-repo\n</code></pre> </li> <li> <p>Login to ECR (replace YOUR-REGION and YOUR-ACCOUNT-ID):</p> <pre><code>aws ecr get-login-password --region YOUR-REGION | docker login --username AWS --password-stdin YOUR-ACCOUNT-ID.dkr.ecr.YOUR-REGION.amazonaws.com\n</code></pre> </li> <li> <p>Tag your image for ECR (make sure to replace YOUR-REGION and YOUR-ACCOUNT-ID):</p> <pre><code>docker tag diy-artcade-payment-api:latest YOUR-ACCOUNT-ID.dkr.ecr.YOUR-REGION.amazonaws.com/artcade-api-repo:latest\n</code></pre> </li> <li> <p>Push to ECR (using the same YOUR-REGION and YOUR-ACCOUNT-ID):</p> <pre><code>docker push YOUR-ACCOUNT-ID.dkr.ecr.YOUR-REGION.amazonaws.com/artcade-api-repo:latest\n</code></pre> </li> </ol> <p>About YOUR-REGION and YOUR-ACCOUNT-ID</p> <ul> <li>Replace YOUR-REGION with values like <code>us-east-1</code> or <code>us-west-2</code></li> <li>Replace YOUR-ACCOUNT-ID with your 12-digit AWS account number</li> <li>Find both values in the top right of your AWS Console</li> <li>Or run this command to find your account ID: <pre><code>aws sts get-caller-identity\n</code></pre></li> </ul> <p>Command Example with Real Values</p> <p>If your account ID is 123456789012 and region is us-east-1, your commands would look like: <pre><code>aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com\n</code></pre></p>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#step-2-create-lambda-function","title":"Step 2: Create Lambda Function","text":"<p>Now that your image is in ECR, let's create your Lambda function:</p> <ol> <li>Go to AWS Console</li> <li>Search for \"Lambda\"</li> <li>Click \"Create function\"</li> <li> <p>Choose these settings:</p> <ul> <li>Select \"Container image\"</li> <li>Set function name to \"artcade-api\"</li> <li>Click \"Browse images\"</li> <li>Select the \"artcade-api-repo\" repository</li> <li>Choose the \"latest\" tag</li> <li>Click \"Create function\"</li> </ul> </li> </ol> <p>What's Lambda?</p> <p>AWS Lambda is like a smart worker in the cloud that:</p> <ul> <li>Runs your arcade payment code</li> <li>Only works when needed</li> <li>Automatically handles multiple players</li> <li>Stays within the free tier!</li> </ul>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#step-3-configure-environment","title":"Step 3: Configure Environment","text":"<p>Your Lambda function needs some secret information to work:</p> <ol> <li> <p>In Lambda Console:</p> <ul> <li>Click \"Configuration\" tab</li> <li>Select \"Environment variables\"</li> <li>Click \"Edit\"</li> </ul> </li> <li> <p>Add these variables (you got these from previous setup steps):</p> <ul> <li><code>STRIPE_API_KEY</code>: Your Stripe secret key</li> <li><code>STRIPE_WEBHOOK_SECRET</code>: Your Stripe webhook secret</li> <li><code>MQTT_USERNAME</code>: Your EMQX username</li> <li><code>MQTT_PASSWORD</code>: Your EMQX password</li> <li><code>MQTT_BROKER</code>: Your EMQX broker address</li> <li><code>MQTT_PORT</code>: Usually 8883 for SSL/TLS</li> <li><code>PRICE_ID</code>: Your Stripe Price ID</li> </ul> </li> </ol> <p>Keep Secrets Safe!</p> <p>Never share these values with anyone! They're like the keys to your arcade's payment system.</p>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#step-4-test-your-function","title":"Step 4: Test Your Function","text":"<p>Let's make sure everything works:</p> <ol> <li>Click the \"Test\" tab</li> <li>Create new test event:<ul> <li>Choose \"API Gateway HTTP API\" template</li> <li>Name it \"TestEvent\"</li> <li>Keep the default JSON</li> </ul> </li> <li>Click \"Test\"</li> </ol> <p>You should see a successful response!</p>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#step-5-monitor-your-function","title":"Step 5: Monitor Your Function","text":"<p>Set up basic monitoring:</p> <ol> <li>Go to \"Monitor\" tab</li> <li>View the CloudWatch metrics</li> <li>Note the \"Invocations\" and \"Errors\" graphs</li> </ol> <p>Free Tier Limits</p> <p>Your Lambda function gets:</p> <ul> <li>1 million free requests per month</li> <li>400,000 GB-seconds of compute time</li> <li>Plenty for several arcade cabinets!</li> </ul>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#next-steps","title":"Next Steps","text":"<p>Your Lambda function is ready! Next, we'll:</p> <ol> <li>Set up API Gateway</li> <li>Connect it to your Lambda</li> <li>Test the complete system</li> </ol> <p>Continue to API Gateway Setup \u2192 Back to Docker Pull</p>"},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quick-deploy/aws-lambda/quick-deploy-lambda-setup/#common-issues","title":"Common Issues","text":"<p>Push to ECR Failed <pre><code>Error: Cannot push to ECR\n</code></pre> * Check AWS CLI configuration * Verify the repository name is exactly <code>artcade-api-repo</code> * Try logging in to ECR again * Make sure you replaced YOUR-REGION and YOUR-ACCOUNT-ID</p> <p>Lambda Creation Failed <pre><code>Error: Cannot create function\n</code></pre> * Verify your image URI is correct * Check IAM permissions * Confirm the image was pushed to ECR successfully * Make sure you're using the correct repository name</p> <p>Function Test Failed <pre><code>Error: Function error\n</code></pre> * Check all environment variables are set correctly * Look at CloudWatch logs for specific error messages * Verify all secrets and credentials are correct</p> <p>Need Help?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review CloudWatch logs in the \"Monitor\" tab</li> </ul>"},{"location":"quick-deploy/aws-lambda/setup-gateway/","title":"Setting Up API Gateway","text":"<p>Time to connect your Lambda function to the internet! We'll start by creating the API Gateway trigger and then set up each endpoint. </p>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#getting-started-create-api-gateway-trigger","title":"Getting started: Create API Gateway Trigger","text":"<p>First, create the API Gateway trigger from your Lambda function:</p> <ol> <li>Go to your Lambda function in AWS Console</li> <li>Click on the \"Configuration\" tab</li> <li>Select \"Triggers\" from the left menu</li> <li>Click \"Add trigger\"</li> <li> <p>In the trigger configuration:</p> <ul> <li>Select \"API Gateway\" from the dropdown</li> <li>Under \"API\", select \"Create an API\"</li> <li>Choose \"HTTP API\" (it's simpler and cheaper!)</li> <li>For \"Security\", select \"Open\"</li> </ul> </li> <li> <p>Click \"Add\" to create the trigger</p> </li> </ol> <p>About HTTP APIs</p> <p>HTTP APIs are perfect for our arcade because:</p> <ul> <li>They're cost-effective</li> <li>They're simpler to manage</li> <li>They have great performance</li> <li>They work well with Lambda</li> </ul>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#creating-resources-and-methods","title":"Creating Resources and Methods","text":""},{"location":"quick-deploy/aws-lambda/setup-gateway/#step-1-create-a-new-resource","title":"Step 1: Create a New Resource","text":"<ol> <li>Click \"Create resource\" button</li> <li> <p>In the resource setup:</p> <ul> <li>Set Resource Path to \"/\" (root)</li> <li>Give your resource a name that matches an endpoint in your code</li> <li>Leave \"Proxy Resource\" and \"CORS\" unchecked</li> </ul> </li> <li> <p>Click \"Create resource\"</p> </li> </ol> <p>Resource Names</p> <p>Your resource name should match the endpoints in your code:</p> <ul> <li>/status</li> <li>/create-payment-link</li> <li>/addCredit</li> <li>/gameover</li> </ul>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#step-2-create-and-configure-method","title":"Step 2: Create and Configure Method","text":"<p>After creating your resource:</p> <ol> <li>Click on your newly created resource in the left sidebar</li> <li>Click \"Create method\" button</li> <li> <p>In the method setup:</p> <ul> <li>Choose the appropriate HTTP method (GET, POST) from dropdown</li> <li>Select \"Lambda Function\" for Integration type</li> <li>Enable \"Lambda Proxy integration\"</li> <li>Select your Lambda function from the dropdown</li> </ul> </li> <li> <p>Click \"Create method\"</p> </li> </ol> <p>Important Settings</p> <p>Make sure you:</p> <ul> <li>Choose the correct HTTP method for each endpoint</li> <li>Select Lambda Function integration type</li> <li>Enable Lambda Proxy integration</li> <li>Select your specific Lambda function</li> </ul>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#step-3-repeat-for-each-endpoint","title":"Step 3: Repeat for Each Endpoint","text":"<p>Create resources and methods for each endpoint:</p> <ol> <li> <p>Status Endpoint:</p> <ul> <li>Resource path: /status</li> <li>Method: GET</li> </ul> </li> <li> <p>Payment Link Endpoint:</p> <ul> <li>Resource path: /create-payment-link</li> <li>Method: POST</li> </ul> </li> <li> <p>Add Credit Endpoint:</p> <ul> <li>Resource path: /addCredit</li> <li>Method: POST</li> </ul> </li> <li> <p>Game Over Endpoint:</p> <ul> <li>Resource path: /gameover</li> <li>Method: POST</li> </ul> </li> </ol>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#deploying-your-api","title":"Deploying Your API","text":"<p>After creating all resources and methods:</p> <ol> <li>Click the \"Deploy API\" button</li> <li> <p>In the deployment popup:</p> <ul> <li>Select \"[New Stage]\" if this is your first deployment</li> <li>Enter a stage name (or leave as \"default\")</li> <li>Add a description if you want</li> </ul> </li> <li> <p>Click \"Deploy\"</p> </li> </ol> <p>Get Your URL</p> <p>After deployment, you'll get a URL that looks like:</p> <pre><code>https://abc123def.execute-api.us-west-2.amazonaws.com/default\n</code></pre> <p>Save this URL - you'll need it for:</p> <ul> <li>Testing your API</li> <li>Setting up Stripe webhooks</li> <li>Configuring your arcade cabinet</li> </ul>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#testing-your-setup","title":"Testing Your Setup","text":"<p>Test each endpoint using your new API URL:</p>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#1-status-check","title":"1. Status Check","text":"<pre><code>curl https://your-api-url/status\n</code></pre>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#2-payment-link-creation","title":"2. Payment Link Creation","text":"<pre><code>curl -X POST https://your-api-url/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#3-game-over-signal","title":"3. Game Over Signal","text":"<pre><code>curl -X POST https://your-api-url/gameover \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#method-not-found","title":"Method Not Found","text":"<ul> <li>Check that you created the resource correctly</li> <li>Verify HTTP method matches your code</li> <li>Ensure Lambda proxy integration is enabled</li> </ul>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#lambda-permission-error","title":"Lambda Permission Error","text":"<ul> <li>Check that API Gateway has permission to invoke Lambda</li> <li>Verify Lambda function name is correct</li> <li>Review IAM roles and permissions</li> </ul>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#deployment-issues","title":"Deployment Issues","text":"<ul> <li>Make sure all methods are properly configured</li> <li>Check that you've deployed to a stage</li> <li>Verify the API URL you're using matches your deployment stage</li> </ul> <p>Need Help?</p> <ul> <li>Check Troubleshooting Guide</li> <li>Review CloudWatch logs</li> <li>Ask your teacher or mentor</li> </ul>"},{"location":"quick-deploy/aws-lambda/setup-gateway/#next-steps","title":"Next Steps","text":"<p>After deploying your API:</p> <ol> <li>Save your API URL</li> <li>Update Stripe webhook settings</li> <li>Test all endpoints</li> <li>Monitor for issues</li> </ol> <p>Continue to Testing \u2192 Back to API Gateway Introduction</p>"},{"location":"quick-deploy/aws-lambda/test-deployment/","title":"Testing Your Deployment","text":"<p>Now that your API is deployed, let's make sure everything works! We'll test each part of your system step by step. </p>"},{"location":"quick-deploy/aws-lambda/test-deployment/#prerequisites","title":"Prerequisites \u2705","text":"<p>Before starting, make sure you have:</p> <ul> <li>Your API Gateway URL (from previous step)</li> <li>Stripe CLI installed</li> <li>MQTT client (Mosquitto) installed</li> <li>Test environment variables configured in Lambda</li> </ul> <p>Keep Your Tools Ready</p> <p>You'll need several terminal windows open for testing. Consider using VSCode's integrated terminal with split panes to keep everything organized!</p>"},{"location":"quick-deploy/aws-lambda/test-deployment/#part-1-basic-api-testing","title":"Part 1: Basic API Testing \ud83d\udd0d","text":"<p>Let's start by making sure your API endpoints are accessible.</p>"},{"location":"quick-deploy/aws-lambda/test-deployment/#1-test-status-endpoint","title":"1. Test Status Endpoint","text":"<pre><code>curl https://your-api-url/status\n</code></pre> <p>Expected response: <pre><code>{\n    \"status\": \"up\",\n    \"message\": \"API is running\"\n}\n</code></pre></p> <p>Getting a 404?</p> <p>If you get a \"Not Found\" error:</p> <ul> <li>Double-check your API URL</li> <li>Verify the endpoint is deployed</li> <li>Check Lambda logs for errors</li> </ul>"},{"location":"quick-deploy/aws-lambda/test-deployment/#part-2-payment-flow-testing","title":"Part 2: Payment Flow Testing \ud83d\udcb3","text":""},{"location":"quick-deploy/aws-lambda/test-deployment/#1-create-payment-link","title":"1. Create Payment Link","text":"<pre><code>curl -X POST https://your-api-url/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre> <p>Expected response: <pre><code>{\n    \"url\": \"https://checkout.stripe.com/c/pay/cs_test_...\"\n}\n</code></pre></p>"},{"location":"quick-deploy/aws-lambda/test-deployment/#2-test-payment-processing","title":"2. Test Payment Processing","text":"<ol> <li> <p>Start Stripe webhook forwarding: <pre><code>stripe listen --forward-to https://your-api-url/addCredit\n</code></pre></p> </li> <li> <p>Open the payment URL in your browser</p> </li> <li> <p>Complete a test payment:</p> <ul> <li>Card number: 4242 4242 4242 4242</li> <li>Any future expiry date</li> <li>Any 3-digit CVC</li> <li>Any ZIP code</li> </ul> </li> </ol> <p>Test Cards</p> <p>Stripe provides several test cards for different scenarios:</p> <ul> <li>4242 4242 4242 4242 - Successful payment</li> <li>4000 0000 0000 9995 - Declined payment</li> <li>Find more in the Stripe testing docs</li> </ul>"},{"location":"quick-deploy/aws-lambda/test-deployment/#part-3-mqtt-message-testing","title":"Part 3: MQTT Message Testing \ud83d\udce1","text":""},{"location":"quick-deploy/aws-lambda/test-deployment/#1-watch-for-messages","title":"1. Watch for Messages","text":"<p>In a new terminal, subscribe to MQTT topics:</p> <pre><code>mosquitto_sub -h your.emqx.cloud.broker -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  -t \"arcade/machine/+/gameover\" \\\n  --cafile emqx.ca \\\n  -u \"your_username\" -P \"your_password\"\n</code></pre>"},{"location":"quick-deploy/aws-lambda/test-deployment/#2-test-game-over-signal","title":"2. Test Game Over Signal","text":"<pre><code>curl -X POST https://your-api-url/gameover \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre> <p>Watch your MQTT subscriber terminal for the game over message!</p>"},{"location":"quick-deploy/aws-lambda/test-deployment/#part-4-end-to-end-testing","title":"Part 4: End-to-End Testing \ud83d\udd04","text":"<p>Time to test the complete flow! You should see:</p> <ol> <li>Payment link creation \u2713</li> <li>Successful payment \u2713</li> <li>MQTT coin pulse message \u2713</li> <li>Game over signal \u2713</li> <li>MQTT game over message \u2713</li> </ol> <p>Working System</p> <p>If you see all these steps working, congratulations! Your arcade payment system is ready for action! \ud83c\udfae</p>"},{"location":"quick-deploy/aws-lambda/test-deployment/#monitoring-and-logs","title":"Monitoring and Logs \ud83d\udcca","text":""},{"location":"quick-deploy/aws-lambda/test-deployment/#check-cloudwatch-logs","title":"Check CloudWatch Logs","text":"<ol> <li>Go to AWS Console \u2192 CloudWatch \u2192 Log Groups</li> <li>Find your Lambda function's log group</li> <li>Look for any errors or warnings</li> </ol>"},{"location":"quick-deploy/aws-lambda/test-deployment/#monitor-stripe-dashboard","title":"Monitor Stripe Dashboard","text":"<ol> <li>Go to Stripe Dashboard \u2192 Events</li> <li>Look for successful test payments</li> <li>Verify webhook deliveries</li> </ol> <p>Log Investigation</p> <p>If something's not working, logs are your best friend! They'll tell you exactly where things went wrong.</p>"},{"location":"quick-deploy/aws-lambda/test-deployment/#common-issues-and-solutions","title":"Common Issues and Solutions \ud83d\udd27","text":""},{"location":"quick-deploy/aws-lambda/test-deployment/#api-gateway-issues","title":"API Gateway Issues","text":"<ul> <li>403 Forbidden: Check Lambda permissions</li> <li>502 Bad Gateway: Review Lambda function configuration</li> <li>Timeout: Adjust Lambda timeout settings</li> </ul>"},{"location":"quick-deploy/aws-lambda/test-deployment/#stripe-issues","title":"Stripe Issues","text":"<ul> <li>Webhook errors: Verify endpoint URL and secrets</li> <li>Payment failures: Check test card numbers</li> <li>Missing events: Confirm webhook forwarding is running</li> </ul>"},{"location":"quick-deploy/aws-lambda/test-deployment/#mqtt-issues","title":"MQTT Issues","text":"<ul> <li>Connection refused: Check broker address and credentials</li> <li>No messages: Verify topic subscriptions</li> <li>SSL errors: Check certificate configuration</li> </ul> <p>Still Stuck?</p> <ul> <li>Check the Troubleshooting Guide</li> <li>Review specific error messages</li> <li>Ask your teacher or mentor for help</li> </ul>"},{"location":"quick-deploy/aws-lambda/test-deployment/#security-checks","title":"Security Checks \ud83d\udd10","text":"<p>Before finishing testing, verify:</p> <ol> <li>Environment variables are properly set</li> <li>Stripe webhook secret is configured</li> <li>MQTT credentials are secure</li> <li>API endpoints are working as expected</li> </ol>"},{"location":"quick-deploy/aws-lambda/test-deployment/#next-steps","title":"Next Steps \ud83c\udfaf","text":"<p>Once testing is complete:</p> <ol> <li>Document any issues found</li> <li>Save test outputs for reference</li> <li>Plan your next features or modifications</li> <li>Consider moving to production mode</li> </ol> <p>Continue to Making Modifications \u2192 Back to API Gateway Setup</p> <p>Keep Testing!</p> <p>Regular testing helps catch issues early. Consider setting up automated tests for your system!</p>"},{"location":"reference/api-docs/","title":"API Reference","text":"<p>Welcome to the Artcade API documentation! This guide explains all the ways your code can talk to the arcade system. Let's make it fun! \ud83c\udfae</p>"},{"location":"reference/api-docs/#api-overview","title":"API Overview \ud83c\udf10","text":"<p>Your arcade API has four main endpoints:</p> <ul> <li>Check if everything's working (<code>/status</code>)</li> <li>Create payment QR codes (<code>/create-payment-link</code>)</li> <li>Process payments (<code>/addCredit</code>)</li> <li>Handle game endings (<code>/gameover</code>)</li> </ul> <p>Think of it Like a Restaurant</p> <ul> <li><code>/status</code> is like checking if the restaurant is open</li> <li><code>/create-payment-link</code> is like creating a menu QR code</li> <li><code>/addCredit</code> is like processing a payment at the register</li> <li><code>/gameover</code> is like clearing a table for the next customer</li> </ul>"},{"location":"reference/api-docs/#base-url","title":"Base URL \ud83d\udd17","text":"<p>Your API will be available at: <pre><code>https://your-api-id.execute-api.your-region.amazonaws.com/prod\n</code></pre></p> <p>Finding Your URL</p> <p>You'll get your specific URL when you set up API Gateway in AWS. It will look similar to: <pre><code>https://abc123def.execute-api.us-west-2.amazonaws.com/prod\n</code></pre></p>"},{"location":"reference/api-docs/#endpoints","title":"Endpoints \ud83c\udfaf","text":""},{"location":"reference/api-docs/#check-status","title":"Check Status","text":"<p>Checks if your API is running properly.</p> <pre><code>GET /status\n</code></pre>"},{"location":"reference/api-docs/#response","title":"Response","text":"<pre><code>{\n    \"status\": \"up\",\n    \"message\": \"API is running\"\n}\n</code></pre> <p>Testing Status</p> <pre><code>curl https://your-api-url/status\n</code></pre>"},{"location":"reference/api-docs/#create-payment-link","title":"Create Payment Link","text":"<p>Creates a QR code payment link for your arcade cabinet.</p> <pre><code>POST /create-payment-link\n</code></pre>"},{"location":"reference/api-docs/#request-body","title":"Request Body","text":"<pre><code>{\n    \"machine_id\": \"your-machine-id\",\n    \"price_id\": \"price_xxxxxxxxxxxxx\",  // Optional\n    \"quantity\": 1                       // Optional\n}\n</code></pre>"},{"location":"reference/api-docs/#parameters","title":"Parameters","text":"<ul> <li><code>machine_id</code> (required): Your unique arcade cabinet ID</li> <li><code>price_id</code> (optional): Stripe price ID for custom pricing</li> <li><code>quantity</code> (optional): Number of credits to purchase</li> </ul>"},{"location":"reference/api-docs/#response_1","title":"Response","text":"<pre><code>{\n    \"url\": \"https://checkout.stripe.com/...\"\n}\n</code></pre> <p>Creating a Payment Link</p> <pre><code>curl -X POST https://your-api-url/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"arcade123\"}'\n</code></pre>"},{"location":"reference/api-docs/#process-payment","title":"Process Payment","text":"<p>Handles Stripe webhook notifications when a payment succeeds.</p> <pre><code>POST /addCredit\n</code></pre> <p>Webhook Security</p> <p>This endpoint is called by Stripe with a special signature. Don't call it directly!</p>"},{"location":"reference/api-docs/#headers","title":"Headers","text":"<ul> <li><code>Stripe-Signature</code>: Special code from Stripe to verify the webhook</li> </ul>"},{"location":"reference/api-docs/#webhook-event","title":"Webhook Event","text":"<pre><code>{\n    \"type\": \"checkout.session.completed\",\n    \"data\": {\n        \"object\": {\n            \"metadata\": {\n                \"machine_id\": \"arcade123\"\n            },\n            \"amount_total\": 100\n        }\n    }\n}\n</code></pre>"},{"location":"reference/api-docs/#response_2","title":"Response","text":"<ul> <li><code>200 OK</code>: Payment processed successfully</li> <li><code>400 Bad Request</code>: Invalid webhook</li> <li><code>500 Error</code>: Processing failed</li> </ul>"},{"location":"reference/api-docs/#game-over","title":"Game Over","text":"<p>Signals that a game has ended.</p> <pre><code>POST /gameover\n</code></pre>"},{"location":"reference/api-docs/#request-body_1","title":"Request Body","text":"<pre><code>{\n    \"machine_id\": \"arcade123\"\n}\n</code></pre>"},{"location":"reference/api-docs/#response_3","title":"Response","text":"<pre><code>{\n    \"message\": \"Game over signal sent\"\n}\n</code></pre> <p>Sending Game Over</p> <pre><code>curl -X POST https://your-api-url/gameover \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"arcade123\"}'\n</code></pre>"},{"location":"reference/api-docs/#mqtt-messages","title":"MQTT Messages \ud83d\udce8","text":"<p>Your API publishes these MQTT messages:</p>"},{"location":"reference/api-docs/#coin-pulse-signal","title":"Coin Pulse Signal","text":"<p>Sent when credits should be added:</p> <pre><code>{\n    \"machineId\": \"arcade123\",\n    \"credits\": 1,\n    \"timestamp\": \"2024-07-01T12:00:00Z\"\n}\n</code></pre>"},{"location":"reference/api-docs/#game-over-signal","title":"Game Over Signal","text":"<p>Sent when a game ends:</p> <pre><code>{\n    \"machineId\": \"arcade123\",\n    \"status\": \"game_over\",\n    \"timestamp\": \"2024-07-01T12:30:00Z\"\n}\n</code></pre>"},{"location":"reference/api-docs/#testing-tips","title":"Testing Tips \ud83e\uddea","text":""},{"location":"reference/api-docs/#test-cards","title":"Test Cards","text":"<p>Use these Stripe test cards:</p> <ul> <li>Success: <code>4242 4242 4242 4242</code></li> <li>Decline: <code>4000 0000 0000 0002</code></li> <li>Error: <code>4000 0000 0000 9995</code></li> </ul> <p>Test Card Details</p> <ul> <li>Use any future expiry date</li> <li>Any 3-digit CVC</li> <li>Any 5-digit ZIP code</li> </ul>"},{"location":"reference/api-docs/#using-stripe-cli","title":"Using Stripe CLI","text":"<p>Test webhooks locally:</p> <ol> <li> <p>Start webhook forwarding:    <pre><code>stripe listen --forward-to localhost:5000/webhook\n</code></pre></p> </li> <li> <p>Trigger test events:    <pre><code>stripe trigger checkout.session.completed\n</code></pre></p> </li> </ol>"},{"location":"reference/api-docs/#error-handling","title":"Error Handling \ud83d\udd27","text":"<p>Your API returns standard HTTP status codes:</p> <ul> <li><code>200</code>: Everything worked</li> <li><code>400</code>: Something wrong with the request</li> <li><code>401</code>: Not authorized</li> <li><code>404</code>: Endpoint not found</li> <li><code>500</code>: Server error</li> </ul> <p>Error responses look like: <pre><code>{\n    \"error\": \"Description of what went wrong\"\n}\n</code></pre></p>"},{"location":"reference/api-docs/#rate-limits","title":"Rate Limits \ud83d\udcca","text":"<p>Free tier limits:</p> <ul> <li>AWS Lambda: 1,000,000 requests/month</li> <li>EMQX: 1 GB traffic/month</li> <li>Stripe: No monthly limits</li> </ul> <p>Stay Within Limits</p> <ul> <li>Monitor your usage in AWS Console</li> <li>Watch EMQX dashboard</li> <li>Check Stripe dashboard</li> </ul>"},{"location":"reference/api-docs/#security-best-practices","title":"Security Best Practices \ud83d\udd10","text":"<ol> <li> <p>Never share:</p> <ul> <li>API keys</li> <li>Webhook secrets</li> <li>MQTT credentials</li> <li>AWS credentials</li> </ul> </li> <li> <p>Always use:</p> <ul> <li>HTTPS endpoints</li> <li>Webhook signatures</li> <li>SSL/TLS for MQTT</li> <li>Environment variables</li> </ul> </li> </ol>"},{"location":"reference/api-docs/#need-help","title":"Need Help? \ud83e\udd14","text":"<p>If you run into problems:</p> <ol> <li> <p>Check the logs:</p> <ul> <li>AWS CloudWatch</li> <li>EMQX Dashboard</li> <li>Stripe Dashboard</li> </ul> </li> <li> <p>Common issues:</p> <ul> <li>Wrong API URL</li> <li>Invalid credentials</li> <li>Network problems</li> <li>Rate limiting</li> </ul> </li> </ol> <p>Still Stuck?</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Ask your teacher or mentor</li> <li>Review error messages</li> <li>Try test endpoints first</li> </ul>"},{"location":"reference/api-docs/#next-steps","title":"Next Steps \ud83d\ude80","text":"<p>Now that you understand the API:</p> <ol> <li>Test the status endpoint</li> <li>Create a test payment</li> <li>Monitor the results</li> <li>Try the game over signal</li> </ol> <p>Try Quick Deploy \u2192 Custom Build Guide \u2192</p>"},{"location":"reference/config-options/","title":"Configuration Options","text":"<p>Welcome to the configuration guide! Here you'll find all the settings you can adjust in your arcade system. Let's make your cabinet work exactly how you want it! </p>"},{"location":"reference/config-options/#environment-variables","title":"Environment Variables \ud83d\udd11","text":"<p>These are the secret settings that control how your system works. You'll set these up in different places depending on whether you're testing locally or running in production.</p>"},{"location":"reference/config-options/#core-settings-required","title":"Core Settings (Required)","text":"Variable Description Example Required? <code>STRIPE_API_KEY</code> Your Stripe secret API key <code>sk_test_abc123...</code> Yes <code>STRIPE_WEBHOOK_SECRET</code> Secret for verifying Stripe webhooks <code>whsec_abc123...</code> Yes <code>PRICE_ID</code> ID of your game credit product in Stripe <code>price_abc123...</code> Yes <code>MQTT_USERNAME</code> Username for EMQX connection <code>arcade_user</code> Yes <code>MQTT_PASSWORD</code> Password for EMQX connection <code>your_password</code> Yes <code>MQTT_BROKER</code> Your EMQX broker address <code>broker.emqx.io</code> Yes <code>MQTT_PORT</code> Port for MQTT connection (usually 8883 for SSL) <code>8883</code> Yes <p>Protect Your Secrets!</p> <p>Never share these values or commit them to Git! They should stay private and secure.</p>"},{"location":"reference/config-options/#optional-settings","title":"Optional Settings","text":"Variable Description Default Required? <code>DEBUG</code> Enable debug logging <code>False</code> No <code>LOG_LEVEL</code> Detail level for logging <code>INFO</code> No <code>MAX_RETRIES</code> Message retry attempts <code>3</code> No"},{"location":"reference/config-options/#dynamic-parameters","title":"Dynamic Parameters \ud83c\udfae","text":""},{"location":"reference/config-options/#machine-id","title":"Machine ID","text":"<p>The <code>machine_id</code> is not an environment variable but a parameter you'll use in API requests:</p> <ol> <li> <p>Creating a Payment: <pre><code>POST /create-payment-link\n{\n    \"machine_id\": \"unique_machine_id\",\n    \"price_id\": \"optional_override\",\n    \"quantity\": \"optional_override\"\n}\n</code></pre></p> </li> <li> <p>Sending Game Over: <pre><code>POST /gameover\n{\n    \"machine_id\": \"unique_machine_id\"\n}\n</code></pre></p> </li> </ol> <p>Choosing Machine IDs</p> <p>Pick IDs that are: * Easy to remember (like <code>cab001</code>) * Unique to each cabinet * Simple but not guessable</p>"},{"location":"reference/config-options/#mqtt-topics","title":"MQTT Topics \ud83d\udce1","text":""},{"location":"reference/config-options/#topic-structure","title":"Topic Structure","text":"<p>All topics follow this pattern: <pre><code>arcade/machine/&lt;machine_id&gt;/&lt;message_type&gt;\n</code></pre></p>"},{"location":"reference/config-options/#available-message-types","title":"Available Message Types","text":"Type Purpose Example Topic <code>coinpulse</code> Credit signals <code>arcade/machine/cab001/coinpulse</code> <code>gameover</code> Game completion <code>arcade/machine/cab001/gameover</code>"},{"location":"reference/config-options/#message-formats","title":"Message Formats","text":"<ol> <li> <p>Coin Pulse Signal: <pre><code>{\n    \"machineId\": \"unique_machine_id\",\n    \"credits\": 1,\n    \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre></p> </li> <li> <p>Game Over Signal: <pre><code>{\n    \"machineId\": \"unique_machine_id\",\n    \"status\": \"game_over\",\n    \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre></p> </li> </ol>"},{"location":"reference/config-options/#file-requirements","title":"File Requirements \ud83d\udcc1","text":""},{"location":"reference/config-options/#ssltls-certificate","title":"SSL/TLS Certificate","text":"<ul> <li>File: <code>ca.crt</code></li> <li>Location: Same directory as <code>app.py</code></li> <li>Purpose: Secures MQTT connection</li> </ul> <p>Certificate Security</p> <ul> <li>Keep your certificate file safe</li> <li>Don't share it publicly</li> <li>Update it when it expires</li> <li>Back it up securely</li> </ul>"},{"location":"reference/config-options/#aws-lambda-settings","title":"AWS Lambda Settings \u26a1","text":""},{"location":"reference/config-options/#basic-settings","title":"Basic Settings","text":"Setting Recommended Value Why? Memory 128 MB Sufficient for most operations Timeout 30 seconds Allows for retry attempts Concurrency 5 Good for multiple cabinets"},{"location":"reference/config-options/#advanced-settings","title":"Advanced Settings","text":"Setting Recommended Value Notes Network Create new VPC Better security Architecture arm64 Better cost/performance SDK Log Level INFO Good for troubleshooting <p>Free Tier Usage</p> <p>These settings are optimized to stay within AWS's free tier limits!</p>"},{"location":"reference/config-options/#stripe-configuration","title":"Stripe Configuration \ud83d\udcb3","text":""},{"location":"reference/config-options/#webhook-settings","title":"Webhook Settings","text":"Setting Value Required? Endpoint URL Your API URL + <code>/addCredit</code> Yes Events <code>checkout.session.completed</code> Yes API Version <code>2023-10-16</code> Yes"},{"location":"reference/config-options/#security-best-practices","title":"Security Best Practices \ud83d\udd12","text":"<ol> <li> <p>Credential Protection</p> <ul> <li>Never commit secrets to Git</li> <li>Use environment variables</li> <li>Keep certificates secure</li> <li>Rotate credentials regularly</li> </ul> </li> <li> <p>Access Control</p> <ul> <li>Monitor access logs</li> <li>Use strong machine IDs</li> <li>Validate all inputs</li> <li>Limit permissions</li> </ul> </li> <li> <p>Regular Updates</p> <ul> <li>Check for security updates</li> <li>Update dependencies</li> <li>Review access patterns</li> <li>Monitor for unusual activity</li> </ul> </li> </ol> <p>Security First!</p> <p>Remember: Security isn't just a feature - it's a requirement for handling payments!</p>"},{"location":"reference/config-options/#testing-configuration","title":"Testing Configuration \ud83e\uddea","text":""},{"location":"reference/config-options/#test-cards","title":"Test Cards","text":"Card Number Behavior 4242 4242 4242 4242 Success 4000 0000 0000 9995 Decline"},{"location":"reference/config-options/#test-environment","title":"Test Environment","text":"<pre><code>STRIPE_API_KEY=sk_test_...  # Use test key\nDEBUG=True\nLOG_LEVEL=DEBUG\n</code></pre>"},{"location":"reference/config-options/#file-structure","title":"File Structure \ud83d\udcc2","text":"<p>Your configuration files should be organized like this:</p> <pre><code>your-project/\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 ca.crt              # SSL certificate\n\u251c\u2500\u2500 .env.local          # Local environment variables\n\u251c\u2500\u2500 requirements.txt    # Python dependencies\n\u2514\u2500\u2500 README.md          # Documentation\n</code></pre> <p>Keep It Organized</p> <p>Good organization makes troubleshooting easier!</p>"},{"location":"reference/glossary/","title":"Technical Glossary","text":"<p>Welcome to your arcade cabinet dictionary! \ud83d\udcda Here you'll find explanations of all the technical terms used in this project. Don't worry if some of these seem complex at first - we'll explain everything in simple terms!</p>"},{"location":"reference/glossary/#tips-for-using-this-glossary","title":"Tips for Using This Glossary \ud83d\udca1","text":"<ul> <li>Bookmark This Page: Come back whenever you see a term you don't understand</li> <li>Use Search: Press Ctrl+F (or Cmd+F on Mac) to quickly find terms</li> <li>Ask Questions: If something's still unclear, ask your teacher or mentor</li> <li>Learn Gradually: Don't try to memorize everything at once - learn terms as you need them</li> </ul> <p>Growing Vocabulary</p> <p>Like learning any new language, you'll get more comfortable with these terms as you use them. Don't worry if they seem confusing at first!</p>"},{"location":"reference/glossary/#a","title":"A","text":""},{"location":"reference/glossary/#api-application-programming-interface","title":"API (Application Programming Interface)","text":"<p>Think of this as a restaurant's menu and ordering system. It's a set of rules that lets different pieces of software talk to each other. In our arcade, the API helps the payment system talk to your cabinet.</p>"},{"location":"reference/glossary/#api-gateway","title":"API Gateway","text":"<p>Like a hotel's front desk that directs visitors to the right room. In AWS, it's the service that receives requests from the internet and sends them to the right place.</p>"},{"location":"reference/glossary/#aws-amazon-web-services","title":"AWS (Amazon Web Services)","text":"<p>A collection of cloud computing services - like renting powerful computers over the internet instead of buying them. We use AWS to run our arcade's payment system.</p>"},{"location":"reference/glossary/#attract-screen","title":"Attract Screen","text":"<p>The video display you see on an arcade cabinet when nobody is playing. It's like a TV commercial for your game that runs when the cabinet is idle.</p>"},{"location":"reference/glossary/#b","title":"B","text":""},{"location":"reference/glossary/#broker-mqtt-broker","title":"Broker (MQTT Broker)","text":"<p>Like a post office for messages between your cabinet and the cloud. It makes sure messages get delivered to the right place. We use EMQX as our broker.</p>"},{"location":"reference/glossary/#c","title":"C","text":""},{"location":"reference/glossary/#cabinet","title":"Cabinet","text":"<p>The physical arcade machine that holds the screen, controls, and computer. Think of it as your game's house!</p>"},{"location":"reference/glossary/#cloud-computing","title":"Cloud Computing","text":"<p>Using computers that are somewhere else on the internet instead of right next to you. Like streaming a movie instead of playing a DVD.</p>"},{"location":"reference/glossary/#container","title":"Container","text":"<p>A package that includes everything needed to run a piece of software. Like a lunchbox that contains not just the food, but also utensils and napkins!</p>"},{"location":"reference/glossary/#credit","title":"Credit","text":"<p>A unit of gameplay. Like tokens in traditional arcade machines, but digital.</p>"},{"location":"reference/glossary/#d","title":"D","text":""},{"location":"reference/glossary/#docker","title":"Docker","text":"<p>A tool that helps package software into containers. It's like a standardized shipping container for code - works the same way everywhere!</p>"},{"location":"reference/glossary/#docker-image","title":"Docker Image","text":"<p>A template for creating containers. Like a recipe that tells Docker exactly how to make your software container.</p>"},{"location":"reference/glossary/#e","title":"E","text":""},{"location":"reference/glossary/#endpoint","title":"Endpoint","text":"<p>A specific URL where your API can be accessed. Like different doors into a building, each meant for a specific purpose.</p>"},{"location":"reference/glossary/#environment-variables","title":"Environment Variables","text":"<p>Secret settings that tell your software how to work. Like a recipe's secret ingredients that you don't share publicly.</p>"},{"location":"reference/glossary/#emqx","title":"EMQX","text":"<p>The messaging system we use to send signals between your cabinet and the cloud. Think of it as a super-fast digital postal service.</p>"},{"location":"reference/glossary/#f","title":"F","text":""},{"location":"reference/glossary/#flask","title":"Flask","text":"<p>A Python tool for building web applications. It's like a kitchen that helps you cook up web services quickly!</p>"},{"location":"reference/glossary/#free-tier","title":"Free Tier","text":"<p>The free level of service offered by cloud providers. Like a free trial, but with specific limits on what you can use.</p>"},{"location":"reference/glossary/#g","title":"G","text":""},{"location":"reference/glossary/#git","title":"Git","text":"<p>A system that keeps track of changes in your code. Like a time machine that remembers every version of your homework!</p>"},{"location":"reference/glossary/#github","title":"GitHub","text":"<p>A website where programmers store and share their code. Like Google Drive, but specifically for code.</p>"},{"location":"reference/glossary/#l","title":"L","text":""},{"location":"reference/glossary/#lambda","title":"Lambda","text":"<p>An AWS service that runs code without needing a full server. It's like having a helper who only works (and charges you) when needed.</p>"},{"location":"reference/glossary/#linux","title":"Linux","text":"<p>An operating system (like Windows or macOS) that's free and open source. Your arcade cabinet runs on Ubuntu, which is a type of Linux.</p>"},{"location":"reference/glossary/#m","title":"M","text":""},{"location":"reference/glossary/#markdown","title":"Markdown","text":"<p>A simple way to format text that looks good when converted to a webpage. Like using emoji and hashtags, but for creating documentation!</p>"},{"location":"reference/glossary/#mqtt-message-queuing-telemetry-transport","title":"MQTT (Message Queuing Telemetry Transport)","text":"<p>A messaging system that helps machines talk to each other. Like a group chat for your arcade cabinet and the cloud!</p>"},{"location":"reference/glossary/#p","title":"P","text":""},{"location":"reference/glossary/#payment-link","title":"Payment Link","text":"<p>A special URL that leads to a Stripe payment page. Think of it as a digital price tag that lets people pay!</p>"},{"location":"reference/glossary/#python","title":"Python","text":"<p>A programming language that's great for beginners. It's what we use to write the software for your arcade system.</p>"},{"location":"reference/glossary/#q","title":"Q","text":""},{"location":"reference/glossary/#qr-code","title":"QR Code","text":"<p>A square barcode that people can scan with their phones. Like a link you can take a picture of!</p>"},{"location":"reference/glossary/#r","title":"R","text":""},{"location":"reference/glossary/#react","title":"React","text":"<p>A tool for building user interfaces on websites. Like LEGO blocks for building web pages!</p>"},{"location":"reference/glossary/#repository","title":"Repository","text":"<p>A place where all your code lives. Like a folder on your computer, but with super powers for tracking changes!</p>"},{"location":"reference/glossary/#s","title":"S","text":""},{"location":"reference/glossary/#serverless","title":"Serverless","text":"<p>A way to run code without managing servers. Like ordering takeout instead of running a whole restaurant!</p>"},{"location":"reference/glossary/#ssltls","title":"SSL/TLS","text":"<p>Security systems that keep internet connections private. Like having a secret code language that only the right computers can understand.</p>"},{"location":"reference/glossary/#stripe","title":"Stripe","text":"<p>A company that handles payments safely. They process the money when someone wants to play your arcade!</p>"},{"location":"reference/glossary/#t","title":"T","text":""},{"location":"reference/glossary/#terminal","title":"Terminal","text":"<p>A text-based way to talk to your computer. Like sending text messages to your computer instead of clicking buttons!</p>"},{"location":"reference/glossary/#test-mode","title":"Test Mode","text":"<p>A safe way to try things without using real money. Like playing a game in practice mode!</p>"},{"location":"reference/glossary/#u","title":"U","text":""},{"location":"reference/glossary/#ubuntu","title":"Ubuntu","text":"<p>A type of Linux operating system. It's what runs on your arcade cabinet's computer!</p>"},{"location":"reference/glossary/#url-uniform-resource-locator","title":"URL (Uniform Resource Locator)","text":"<p>The address of a webpage or API endpoint. Like a street address, but for the internet!</p>"},{"location":"reference/glossary/#v","title":"V","text":""},{"location":"reference/glossary/#virtual-environment","title":"Virtual Environment","text":"<p>A special folder for Python that keeps project software separate. Like having a separate pencil case for each class!</p>"},{"location":"reference/glossary/#vscode-visual-studio-code","title":"VSCode (Visual Studio Code)","text":"<p>A program for writing code. Like Microsoft Word, but designed specifically for programming!</p>"},{"location":"reference/glossary/#w","title":"W","text":""},{"location":"reference/glossary/#webhook","title":"Webhook","text":"<p>A way for one service to notify another when something happens. Like having a friend who promised to text you whenever something specific happens!</p>"},{"location":"reference/glossary/#websocket","title":"WebSocket","text":"<p>A technology that lets websites have real-time two-way communication. Like a phone call for computers!</p> <p>Need More Help?</p> <ul> <li>Check our How It Works section for deeper explanations</li> <li>Ask questions in our Getting Help section</li> <li>Talk to your teacher or mentor</li> <li>Look for real-world examples of these concepts</li> </ul>"},{"location":"troubleshooting/common-issues/","title":"Common Issues","text":"<p>Welcome to the troubleshooting guide! Having problems? Don't worry - we'll help you fix them! </p>"},{"location":"troubleshooting/common-issues/#how-to-use-this-guide","title":"How to Use This Guide","text":"<ol> <li>Find your issue category (AWS, Stripe, etc.)</li> <li>Look for your specific problem</li> <li>Try the solutions in order</li> <li>If still stuck, check \"Getting More Help\"</li> </ol> <p>Before You Start</p> <p>Always check these basics first:</p> <ul> <li>Are you connected to the internet?</li> <li>Did you save all your changes?</li> <li>Are your environment variables set?</li> <li>Is your virtual environment activated?</li> </ul>"},{"location":"troubleshooting/common-issues/#aws-issues","title":"AWS Issues","text":""},{"location":"troubleshooting/common-issues/#lambda-function-not-deploying","title":"Lambda Function Not Deploying","text":"<p>Symptoms:</p> <ul> <li>Error when trying to deploy to Lambda</li> <li>Deployment seems stuck</li> <li>Function shows as failed</li> </ul> <p>Solutions:</p> <ol> <li> <p>Check Image Architecture     <pre><code># If using M1/M2/M3 Mac, build with platform flag:\ndocker buildx build --platform linux/amd64 --no-cache -t arcade-game-app .\n</code></pre></p> </li> <li> <p>Verify IAM Permissions</p> <ul> <li>Go to IAM in AWS Console</li> <li>Check user permissions</li> <li>Ensure Lambda execution role exists</li> <li>Verify API Gateway permissions</li> </ul> </li> <li> <p>Check Function Configuration</p> <ul> <li>Memory should be at least 128MB</li> <li>Timeout should be 30 seconds</li> <li>Handler should match your code</li> </ul> </li> </ol>"},{"location":"troubleshooting/common-issues/#api-gateway-not-working","title":"API Gateway Not Working","text":"<p>Symptoms: * 403 Forbidden errors * Can't reach your API endpoints * Integration timeout errors</p> <p>Solutions:</p> <ol> <li> <p>Check CORS Settings</p> <ul> <li>Verify CORS is enabled</li> <li>Check allowed methods</li> <li>Verify allowed headers</li> </ul> </li> <li> <p>Check Route Configuration</p> <ul> <li>Verify route paths match exactly</li> <li>Check integration settings</li> <li>Ensure deployment stage is set</li> </ul> </li> <li> <p>Test Local vs. Production     <pre><code># Test locally first\ncurl http://localhost:5000/status\n\n# Then test production\ncurl https://your-api-id.execute-api.region.amazonaws.com/prod/status\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#free-tier-concerns","title":"Free Tier Concerns","text":"<p>Symptoms:</p> <ul> <li>Unexpected charges</li> <li>Usage warnings</li> <li>Service limitations</li> </ul> <p>Solutions:</p> <ol> <li> <p>Set Up Billing Alerts</p> <ul> <li>Go to AWS Billing Dashboard</li> <li>Create billing alert</li> <li>Set threshold below limits</li> </ul> </li> <li> <p>Monitor Usage</p> <ul> <li>Check Lambda invocations</li> <li>Monitor API Gateway calls</li> <li>Review CloudWatch logs</li> </ul> </li> </ol>"},{"location":"troubleshooting/common-issues/#stripe-issues","title":"Stripe Issues","text":""},{"location":"troubleshooting/common-issues/#payment-link-not-working","title":"Payment Link Not Working","text":"<p>Symptoms:</p> <ul> <li>QR code doesn't load</li> <li>Payment page error</li> <li>Invalid URL errors</li> </ul> <p>Solutions:</p> <ol> <li> <p>Verify API Key     <pre><code># Check which API key you're using\nprint(stripe.api_key.startswith('sk_test_'))  # Should be True in test mode\n</code></pre></p> </li> <li> <p>Check Price ID</p> <ul> <li>Verify price exists in Stripe</li> <li>Confirm correct mode (test/live)</li> <li>Check price is active</li> </ul> </li> <li> <p>Test Creating Link     <pre><code>curl -X POST http://localhost:5000/create-payment-link \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"machine_id\":\"test123\"}'\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#webhook-not-receiving-events","title":"Webhook Not Receiving Events","text":"<p>Symptoms: * Payments succeed but no credits added * No webhook logs in Stripe * API not receiving notifications</p> <p>Solutions:</p> <ol> <li> <p>Check Webhook Configuration</p> <ul> <li>Verify endpoint URL</li> <li>Check webhook secret</li> <li>Confirm selected events</li> </ul> </li> <li> <p>Test Locally with Stripe CLI     <pre><code># Start webhook forwarding\nstripe listen --forward-to localhost:5000/webhook\n\n# Test webhook\nstripe trigger checkout.session.completed\n</code></pre></p> </li> <li> <p>Check API Logs</p> <ul> <li>Look for webhook requests</li> <li>Check for signature errors</li> <li>Verify payload processing</li> </ul> </li> </ol>"},{"location":"troubleshooting/common-issues/#mqtt-issues","title":"MQTT Issues","text":""},{"location":"troubleshooting/common-issues/#connection-problems","title":"Connection Problems","text":"<p>Symptoms:</p> <ul> <li>Can't connect to MQTT broker</li> <li>Connection drops frequently</li> <li>SSL/TLS errors</li> </ul> <p>Solutions:</p> <ol> <li> <p>Check Credentials     <pre><code># Test connection with mosquitto_sub\nmosquitto_sub -h your.emqx.broker -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  --cafile emqx.ca \\\n  -u \"your_username\" -P \"your_password\"\n</code></pre></p> </li> <li> <p>Verify SSL/TLS Setup</p> <ul> <li>Check certificate file exists</li> <li>Verify certificate isn't expired</li> <li>Confirm correct file path</li> </ul> </li> <li> <p>Test Network</p> <ul> <li>Check firewall settings</li> <li>Verify port 8883 is open</li> <li>Test broker connection</li> </ul> </li> </ol>"},{"location":"troubleshooting/common-issues/#messages-not-received","title":"Messages Not Received","text":"<p>Symptoms:</p> <ul> <li>Cabinet not getting coin pulse</li> <li>Game over signals lost</li> <li>Delayed message delivery</li> </ul> <p>Solutions:</p> <ol> <li> <p>Check Topic Subscription</p> <ul> <li>Verify topic patterns</li> <li>Check machine ID format</li> <li>Confirm subscription active</li> </ul> </li> <li> <p>Monitor Message Flow</p> <ul> <li>Use EMQX dashboard</li> <li>Check message delivery</li> <li>Verify QoS levels</li> </ul> </li> </ol>"},{"location":"troubleshooting/common-issues/#game-control-issues","title":"Game Control Issues","text":""},{"location":"troubleshooting/common-issues/#credits-not-adding","title":"Credits Not Adding","text":"<p>Symptoms:</p> <ul> <li>Payment successful but no credits</li> <li>Game won't start</li> <li>Credit display incorrect</li> </ul> <p>Solutions:</p> <ol> <li> <p>Check MQTT Messages     <pre><code># Monitor coin pulse messages\nmosquitto_sub -h your.emqx.broker -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  --cafile emqx.ca \\\n  -u \"your_username\" -P \"your_password\"\n</code></pre></p> </li> <li> <p>Verify Machine ID</p> <ul> <li>Check payment metadata</li> <li>Confirm correct ID format</li> <li>Test with known working ID</li> </ul> </li> <li> <p>Monitor State Changes</p> <ul> <li>Check credit counter</li> <li>Verify game state</li> <li>Look for error messages</li> </ul> </li> </ol>"},{"location":"troubleshooting/common-issues/#game-wont-start","title":"Game Won't Start","text":"<p>Symptoms:</p> <ul> <li>Credits added but game inactive<ul> <li>Stuck on attract screen</li> <li>Controls not responding</li> <li>System unresponsive</li> </ul> </li> </ul> <p>Solutions:</p> <ol> <li> <p>Check Game State</p> <ul> <li>Verify current mode</li> <li>Check credit count</li> <li>Monitor MQTT messages</li> </ul> </li> <li> <p>Test Controls</p> <ul> <li>Verify USB connections</li> <li>Check control mapping</li> <li>Test basic input</li> </ul> </li> </ol>"},{"location":"troubleshooting/common-issues/#development-issues","title":"Development Issues","text":""},{"location":"troubleshooting/common-issues/#docker-build-problems","title":"Docker Build Problems","text":"<p>Symptoms:</p> <ul> <li>Build fails</li> <li>Missing dependencies</li> <li>Architecture mismatch</li> </ul> <p>Solutions:</p> <ol> <li> <p>Check Platform Settings     <pre><code># For M1/M2/M3 Macs\ndocker buildx build --platform linux/amd64 --no-cache -t arcade-game-app .\n\n# View image details\ndocker inspect arcade-game-app\n</code></pre></p> </li> <li> <p>Verify Dependencies</p> <ul> <li>Check requirements.txt</li> <li>Verify Python version</li> <li>Confirm all imports</li> </ul> </li> </ol>"},{"location":"troubleshooting/common-issues/#environment-setup-issues","title":"Environment Setup Issues","text":"<p>Symptoms:</p> <ul> <li>Missing variables</li> <li>Import errors</li> <li>Configuration problems</li> </ul> <p>Solutions:</p> <ol> <li> <p>Check Virtual Environment     <pre><code># Create new environment if needed\npython -m venv venv\n\n# Activate environment\nsource venv/bin/activate  # Unix\n.\\venv\\Scripts\\activate   # Windows\n</code></pre></p> </li> <li> <p>Verify Environment Variables     <pre><code># Check if variables are set\npython\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; print(os.getenv('STRIPE_API_KEY'))\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#getting-more-help","title":"Getting More Help","text":"<p>If you're still stuck:</p> <ol> <li> <p>Check Error Messages</p> <ul> <li>Read the full error text</li> <li>Look for specific codes</li> <li>Check related logs</li> </ul> </li> <li> <p>Gather Information</p> <ul> <li>Which step failed?</li> <li>What changed recently?</li> <li>What are the exact errors?</li> </ul> </li> <li> <p>Get Help</p> <ul> <li>Ask your teacher/mentor</li> <li>Check service documentation</li> <li>Search error messages</li> </ul> </li> </ol> <p>Still Need Help?</p> <ul> <li>Describe the problem clearly</li> <li>Share relevant error messages</li> <li>Explain what you've tried</li> <li>Provide system details</li> </ul>"},{"location":"troubleshooting/common-issues/#quick-reference","title":"Quick Reference","text":""},{"location":"troubleshooting/common-issues/#common-terminal-commands","title":"Common Terminal Commands","text":"<pre><code># Check Python version\npython --version\n\n# Check Docker version\ndocker --version\n\n# Test API endpoint\ncurl http://localhost:5000/status\n\n# Monitor MQTT messages\nmosquitto_sub -h broker -p 8883 -t \"arcade/machine/+/coinpulse\"\n</code></pre>"},{"location":"troubleshooting/common-issues/#useful-links","title":"Useful Links","text":"<ul> <li>AWS Lambda Docs</li> <li>Stripe API Docs</li> <li>EMQX Docs</li> <li>Getting Help Guide</li> </ul> <p>Remember: Most problems have simple solutions. Take your time, check the basics, and don't hesitate to ask for help! </p>"},{"location":"troubleshooting/getting-help/","title":"Getting Help","text":"<p>Welcome to the help guide! Everyone needs help sometimes - even experienced developers! Let's look at all the ways you can get assistance with your arcade cabinet project. </p>"},{"location":"troubleshooting/getting-help/#quick-help-checklist","title":"Quick Help Checklist","text":"<p>Before asking for help, try these quick steps:</p> <ol> <li>Check the Common Issues guide</li> <li>Look through error messages carefully</li> <li>Try searching for the error online</li> <li>Review relevant documentation sections</li> </ol> <p>Screenshots Help!</p> <p>When asking for help, include screenshots of:</p> <ul> <li>Error messages</li> <li>Console output</li> <li>Relevant code</li> <li>AWS/Stripe dashboards</li> </ul>"},{"location":"troubleshooting/getting-help/#where-to-get-help","title":"Where to Get Help","text":""},{"location":"troubleshooting/getting-help/#1-your-teachermentor","title":"1. Your Teacher/Mentor","text":"<p>Best for: * Project requirements * Business questions * Local setup issues * General guidance</p> <p>Working with Your Mentor</p> <ul> <li>Schedule regular check-ins</li> <li>Come prepared with specific questions</li> <li>Take notes during meetings</li> <li>Follow up on suggestions</li> </ul>"},{"location":"troubleshooting/getting-help/#2-official-documentation","title":"2. Official Documentation","text":""},{"location":"troubleshooting/getting-help/#aws-resources","title":"AWS Resources","text":"<ul> <li>AWS Lambda Documentation</li> <li>API Gateway Documentation</li> <li>AWS Free Tier Details</li> </ul>"},{"location":"troubleshooting/getting-help/#stripe-resources","title":"Stripe Resources","text":"<ul> <li>Stripe Documentation</li> <li>Stripe Testing Guide</li> <li>Stripe Support Center</li> </ul>"},{"location":"troubleshooting/getting-help/#emqx-resources","title":"EMQX Resources","text":"<ul> <li>EMQX Cloud Documentation</li> <li>MQTT Basic Concepts</li> <li>EMQX Support</li> </ul>"},{"location":"troubleshooting/getting-help/#3-community-resources","title":"3. Community Resources","text":"<p>Great places to find answers:</p> <ul> <li> <p>Stack Overflow</p> <ul> <li>Search for \"[aws-lambda]\" tag</li> <li>Look for \"[stripe-api]\" questions</li> <li>Check \"[mqtt]\" discussions</li> </ul> </li> <li> <p>GitHub Discussions</p> <ul> <li>Review issues in similar projects</li> <li>Check documentation updates</li> <li>Look for community solutions</li> </ul> </li> </ul> <p>When Posting Questions</p> <p>Never share: * API keys * Passwords * Secret tokens * Personal information</p>"},{"location":"troubleshooting/getting-help/#how-to-ask-for-help","title":"How to Ask for Help","text":""},{"location":"troubleshooting/getting-help/#1-describe-your-problem","title":"1. Describe Your Problem","text":"<p>Include: * What you're trying to do * What's happening instead * Any error messages * Steps to reproduce</p> <p>Example: <pre><code>Problem: Game won't start after payment\nExpected: Game starts when payment completes\nActual: Cabinet stays in attract mode\nError: \"No coin pulse received\" in logs\n</code></pre></p>"},{"location":"troubleshooting/getting-help/#2-show-what-youve-tried","title":"2. Show What You've Tried","text":"<p>List the solutions you've attempted:</p> <pre><code>Steps taken:\n1. Checked MQTT connection\n2. Verified Stripe webhook\n3. Tested local API endpoint\n4. Reviewed CloudWatch logs\n</code></pre>"},{"location":"troubleshooting/getting-help/#3-provide-context","title":"3. Provide Context","text":"<p>Include relevant details:</p> <ul> <li>Your development environment</li> <li>AWS region being used</li> <li>Stage of the project</li> <li>Recent changes made</li> </ul>"},{"location":"troubleshooting/getting-help/#creating-support-tickets","title":"Creating Support Tickets","text":""},{"location":"troubleshooting/getting-help/#aws-support","title":"AWS Support","text":"<ol> <li>Go to AWS Support Center</li> <li>Click \"Create case\"</li> <li>Choose \"Service limit increase\" or \"Technical support\"</li> <li>Fill in the details</li> </ol> <p>AWS Support Levels</p> <p>Free tier includes: * Basic support features * Service health checks * Documentation access * AWS Personal Health Dashboard</p>"},{"location":"troubleshooting/getting-help/#stripe-support","title":"Stripe Support","text":"<ol> <li>Visit Stripe Dashboard</li> <li>Click \"Support\" in bottom left</li> <li>Choose your topic</li> <li>Describe your issue</li> </ol> <p>Stripe Support Tips</p> <ul> <li>Include test API logs</li> <li>Share webhook event IDs</li> <li>Describe payment flow</li> <li>Provide checkout session IDs</li> </ul>"},{"location":"troubleshooting/getting-help/#emqx-support","title":"EMQX Support","text":"<ol> <li>Access EMQX Cloud Console</li> <li>Use \"Help\" or \"Support\" section</li> <li>Describe connection issues</li> <li>Include broker details</li> </ol>"},{"location":"troubleshooting/getting-help/#debugging-tools","title":"Debugging Tools","text":""},{"location":"troubleshooting/getting-help/#local-testing","title":"Local Testing","text":"<pre><code># Test API endpoint\ncurl http://localhost:5000/status\n\n# Monitor MQTT messages\nmosquitto_sub -h your.emqx.broker -p 8883 \\\n  -t \"arcade/machine/+/coinpulse\" \\\n  --cafile emqx.ca \\\n  -u \"your_username\" -P \"your_password\"\n\n# Forward Stripe webhooks\nstripe listen --forward-to localhost:5000/webhook\n</code></pre>"},{"location":"troubleshooting/getting-help/#cloud-monitoring","title":"Cloud Monitoring","text":"<ul> <li>AWS CloudWatch</li> <li>Stripe Dashboard Events</li> <li>EMQX Cloud Console</li> </ul>"},{"location":"troubleshooting/getting-help/#next-steps","title":"Next Steps","text":"<ol> <li>Check the Common Issues guide first</li> <li>Try solving it yourself using this guide</li> <li>Ask your teacher/mentor if stuck</li> <li>Use official support channels if needed</li> </ol> <p>Back to Common Issues Return to Home</p> <p>You've Got This!</p> <p>Remember: Every developer was a beginner once. Don't be afraid to ask for help - it's part of learning! </p>"}]}